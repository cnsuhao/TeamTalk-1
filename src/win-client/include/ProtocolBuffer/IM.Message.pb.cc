// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IM.Message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace Message {
class IMMsgDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMMsgData> {
} _IMMsgData_default_instance_;
class IMMsgDataAckDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMMsgDataAck> {
} _IMMsgDataAck_default_instance_;
class IMMsgDataReadAckDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMMsgDataReadAck> {
} _IMMsgDataReadAck_default_instance_;
class IMMsgDataReadNotifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMMsgDataReadNotify> {
} _IMMsgDataReadNotify_default_instance_;
class IMClientTimeReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMClientTimeReq> {
} _IMClientTimeReq_default_instance_;
class IMClientTimeRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMClientTimeRsp> {
} _IMClientTimeRsp_default_instance_;
class IMUnreadMsgCntReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMUnreadMsgCntReq> {
} _IMUnreadMsgCntReq_default_instance_;
class IMUnreadMsgCntRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMUnreadMsgCntRsp> {
} _IMUnreadMsgCntRsp_default_instance_;
class IMGetMsgListReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMGetMsgListReq> {
} _IMGetMsgListReq_default_instance_;
class IMGetMsgListRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMGetMsgListRsp> {
} _IMGetMsgListRsp_default_instance_;
class IMGetLatestMsgIdReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMGetLatestMsgIdReq> {
} _IMGetLatestMsgIdReq_default_instance_;
class IMGetLatestMsgIdRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMGetLatestMsgIdRsp> {
} _IMGetLatestMsgIdRsp_default_instance_;
class IMGetMsgByIdReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMGetMsgByIdReq> {
} _IMGetMsgByIdReq_default_instance_;
class IMGetMsgByIdRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMGetMsgByIdRsp> {
} _IMGetMsgByIdRsp_default_instance_;

namespace protobuf_IM_2eMessage_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _IMMsgData_default_instance_.Shutdown();
  _IMMsgDataAck_default_instance_.Shutdown();
  _IMMsgDataReadAck_default_instance_.Shutdown();
  _IMMsgDataReadNotify_default_instance_.Shutdown();
  _IMClientTimeReq_default_instance_.Shutdown();
  _IMClientTimeRsp_default_instance_.Shutdown();
  _IMUnreadMsgCntReq_default_instance_.Shutdown();
  _IMUnreadMsgCntRsp_default_instance_.Shutdown();
  _IMGetMsgListReq_default_instance_.Shutdown();
  _IMGetMsgListRsp_default_instance_.Shutdown();
  _IMGetLatestMsgIdReq_default_instance_.Shutdown();
  _IMGetLatestMsgIdRsp_default_instance_.Shutdown();
  _IMGetMsgByIdReq_default_instance_.Shutdown();
  _IMGetMsgByIdRsp_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::IM::BaseDefine::protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  _IMMsgData_default_instance_.DefaultConstruct();
  _IMMsgDataAck_default_instance_.DefaultConstruct();
  _IMMsgDataReadAck_default_instance_.DefaultConstruct();
  _IMMsgDataReadNotify_default_instance_.DefaultConstruct();
  _IMClientTimeReq_default_instance_.DefaultConstruct();
  _IMClientTimeRsp_default_instance_.DefaultConstruct();
  _IMUnreadMsgCntReq_default_instance_.DefaultConstruct();
  _IMUnreadMsgCntRsp_default_instance_.DefaultConstruct();
  _IMGetMsgListReq_default_instance_.DefaultConstruct();
  _IMGetMsgListRsp_default_instance_.DefaultConstruct();
  _IMGetLatestMsgIdReq_default_instance_.DefaultConstruct();
  _IMGetLatestMsgIdRsp_default_instance_.DefaultConstruct();
  _IMGetMsgByIdReq_default_instance_.DefaultConstruct();
  _IMGetMsgByIdRsp_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::IM::BaseDefine::protobuf_IM_2eBaseDefine_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_IM_2eMessage_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMMsgData::kFromUserIdFieldNumber;
const int IMMsgData::kToSessionIdFieldNumber;
const int IMMsgData::kMsgIdFieldNumber;
const int IMMsgData::kCreateTimeFieldNumber;
const int IMMsgData::kMsgTypeFieldNumber;
const int IMMsgData::kMsgDataFieldNumber;
const int IMMsgData::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMMsgData::IMMsgData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMMsgData)
}
IMMsgData::IMMsgData(const IMMsgData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg_data().size() > 0) {
    msg_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_data_);
  }
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  ::memcpy(&from_user_id_, &from.from_user_id_,
    reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&from_user_id_) + sizeof(msg_type_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMMsgData)
}

void IMMsgData::SharedCtor() {
  msg_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_user_id_, 0, reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&from_user_id_) + sizeof(msg_type_));
  _cached_size_ = 0;
}

IMMsgData::~IMMsgData() {
  // @@protoc_insertion_point(destructor:IM.Message.IMMsgData)
  SharedDtor();
}

void IMMsgData::SharedDtor() {
  msg_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMMsgData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMMsgData& IMMsgData::default_instance() {
  protobuf_IM_2eMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMMsgData* IMMsgData::New(::google::protobuf::Arena* arena) const {
  IMMsgData* n = new IMMsgData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMMsgData::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMMsgData)
  msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_user_id_, 0, reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&from_user_id_) + sizeof(msg_type_));
}

bool IMMsgData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Message.IMMsgData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 from_user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 to_session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 msg_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 create_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.MsgType msg_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_msg_type(static_cast< ::IM::BaseDefine::MsgType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes msg_data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMMsgData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMMsgData)
  return false;
#undef DO_
}

void IMMsgData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMMsgData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from_user_id = 1;
  if (this->from_user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->from_user_id(), output);
  }

  // uint32 to_session_id = 2;
  if (this->to_session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->to_session_id(), output);
  }

  // uint32 msg_id = 3;
  if (this->msg_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msg_id(), output);
  }

  // uint32 create_time = 4;
  if (this->create_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->create_time(), output);
  }

  // .IM.BaseDefine.MsgType msg_type = 5;
  if (this->msg_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->msg_type(), output);
  }

  // bytes msg_data = 6;
  if (this->msg_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->msg_data(), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Message.IMMsgData)
}

size_t IMMsgData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMMsgData)
  size_t total_size = 0;

  // bytes msg_data = 6;
  if (this->msg_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg_data());
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 from_user_id = 1;
  if (this->from_user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_user_id());
  }

  // uint32 to_session_id = 2;
  if (this->to_session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->to_session_id());
  }

  // uint32 msg_id = 3;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id());
  }

  // uint32 create_time = 4;
  if (this->create_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->create_time());
  }

  // .IM.BaseDefine.MsgType msg_type = 5;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMMsgData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMMsgData*>(&from));
}

void IMMsgData::MergeFrom(const IMMsgData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMMsgData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_data().size() > 0) {

    msg_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_data_);
  }
  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.from_user_id() != 0) {
    set_from_user_id(from.from_user_id());
  }
  if (from.to_session_id() != 0) {
    set_to_session_id(from.to_session_id());
  }
  if (from.msg_id() != 0) {
    set_msg_id(from.msg_id());
  }
  if (from.create_time() != 0) {
    set_create_time(from.create_time());
  }
  if (from.msg_type() != 0) {
    set_msg_type(from.msg_type());
  }
}

void IMMsgData::CopyFrom(const IMMsgData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMMsgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgData::IsInitialized() const {
  return true;
}

void IMMsgData::Swap(IMMsgData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMMsgData::InternalSwap(IMMsgData* other) {
  msg_data_.Swap(&other->msg_data_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(from_user_id_, other->from_user_id_);
  std::swap(to_session_id_, other->to_session_id_);
  std::swap(msg_id_, other->msg_id_);
  std::swap(create_time_, other->create_time_);
  std::swap(msg_type_, other->msg_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMMsgData::GetTypeName() const {
  return "IM.Message.IMMsgData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMMsgData

// uint32 from_user_id = 1;
void IMMsgData::clear_from_user_id() {
  from_user_id_ = 0u;
}
::google::protobuf::uint32 IMMsgData::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgData.from_user_id)
  return from_user_id_;
}
void IMMsgData::set_from_user_id(::google::protobuf::uint32 value) {
  
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgData.from_user_id)
}

// uint32 to_session_id = 2;
void IMMsgData::clear_to_session_id() {
  to_session_id_ = 0u;
}
::google::protobuf::uint32 IMMsgData::to_session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgData.to_session_id)
  return to_session_id_;
}
void IMMsgData::set_to_session_id(::google::protobuf::uint32 value) {
  
  to_session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgData.to_session_id)
}

// uint32 msg_id = 3;
void IMMsgData::clear_msg_id() {
  msg_id_ = 0u;
}
::google::protobuf::uint32 IMMsgData::msg_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgData.msg_id)
  return msg_id_;
}
void IMMsgData::set_msg_id(::google::protobuf::uint32 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgData.msg_id)
}

// uint32 create_time = 4;
void IMMsgData::clear_create_time() {
  create_time_ = 0u;
}
::google::protobuf::uint32 IMMsgData::create_time() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgData.create_time)
  return create_time_;
}
void IMMsgData::set_create_time(::google::protobuf::uint32 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgData.create_time)
}

// .IM.BaseDefine.MsgType msg_type = 5;
void IMMsgData::clear_msg_type() {
  msg_type_ = 0;
}
::IM::BaseDefine::MsgType IMMsgData::msg_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgData.msg_type)
  return static_cast< ::IM::BaseDefine::MsgType >(msg_type_);
}
void IMMsgData::set_msg_type(::IM::BaseDefine::MsgType value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgData.msg_type)
}

// bytes msg_data = 6;
void IMMsgData::clear_msg_data() {
  msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMMsgData::msg_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgData.msg_data)
  return msg_data_.GetNoArena();
}
void IMMsgData::set_msg_data(const ::std::string& value) {
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgData.msg_data)
}
#if LANG_CXX11
void IMMsgData::set_msg_data(::std::string&& value) {
  
  msg_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Message.IMMsgData.msg_data)
}
#endif
void IMMsgData::set_msg_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Message.IMMsgData.msg_data)
}
void IMMsgData::set_msg_data(const void* value, size_t size) {
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Message.IMMsgData.msg_data)
}
::std::string* IMMsgData::mutable_msg_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Message.IMMsgData.msg_data)
  return msg_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMMsgData::release_msg_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMMsgData.msg_data)
  
  return msg_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMMsgData::set_allocated_msg_data(::std::string* msg_data) {
  if (msg_data != NULL) {
    
  } else {
    
  }
  msg_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMMsgData.msg_data)
}

// bytes attach_data = 20;
void IMMsgData::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMMsgData::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgData.attach_data)
  return attach_data_.GetNoArena();
}
void IMMsgData::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgData.attach_data)
}
#if LANG_CXX11
void IMMsgData::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Message.IMMsgData.attach_data)
}
#endif
void IMMsgData::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Message.IMMsgData.attach_data)
}
void IMMsgData::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Message.IMMsgData.attach_data)
}
::std::string* IMMsgData::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Message.IMMsgData.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMMsgData::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMMsgData.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMMsgData::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMMsgData.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMMsgDataAck::kUserIdFieldNumber;
const int IMMsgDataAck::kSessionIdFieldNumber;
const int IMMsgDataAck::kMsgIdFieldNumber;
const int IMMsgDataAck::kSessionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMMsgDataAck::IMMsgDataAck()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMMsgDataAck)
}
IMMsgDataAck::IMMsgDataAck(const IMMsgDataAck& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(session_type_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMMsgDataAck)
}

void IMMsgDataAck::SharedCtor() {
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(session_type_));
  _cached_size_ = 0;
}

IMMsgDataAck::~IMMsgDataAck() {
  // @@protoc_insertion_point(destructor:IM.Message.IMMsgDataAck)
  SharedDtor();
}

void IMMsgDataAck::SharedDtor() {
}

void IMMsgDataAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMMsgDataAck& IMMsgDataAck::default_instance() {
  protobuf_IM_2eMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMMsgDataAck* IMMsgDataAck::New(::google::protobuf::Arena* arena) const {
  IMMsgDataAck* n = new IMMsgDataAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMMsgDataAck::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMMsgDataAck)
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(session_type_));
}

bool IMMsgDataAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Message.IMMsgDataAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 msg_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.SessionType session_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMMsgDataAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMMsgDataAck)
  return false;
#undef DO_
}

void IMMsgDataAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMMsgDataAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // uint32 session_id = 2;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->session_id(), output);
  }

  // uint32 msg_id = 3;
  if (this->msg_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msg_id(), output);
  }

  // .IM.BaseDefine.SessionType session_type = 4;
  if (this->session_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->session_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Message.IMMsgDataAck)
}

size_t IMMsgDataAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMMsgDataAck)
  size_t total_size = 0;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // uint32 session_id = 2;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  // uint32 msg_id = 3;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id());
  }

  // .IM.BaseDefine.SessionType session_type = 4;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMMsgDataAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMMsgDataAck*>(&from));
}

void IMMsgDataAck::MergeFrom(const IMMsgDataAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMMsgDataAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
  if (from.msg_id() != 0) {
    set_msg_id(from.msg_id());
  }
  if (from.session_type() != 0) {
    set_session_type(from.session_type());
  }
}

void IMMsgDataAck::CopyFrom(const IMMsgDataAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMMsgDataAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgDataAck::IsInitialized() const {
  return true;
}

void IMMsgDataAck::Swap(IMMsgDataAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMMsgDataAck::InternalSwap(IMMsgDataAck* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(session_id_, other->session_id_);
  std::swap(msg_id_, other->msg_id_);
  std::swap(session_type_, other->session_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMMsgDataAck::GetTypeName() const {
  return "IM.Message.IMMsgDataAck";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMMsgDataAck

// uint32 user_id = 1;
void IMMsgDataAck::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMMsgDataAck::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataAck.user_id)
  return user_id_;
}
void IMMsgDataAck::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataAck.user_id)
}

// uint32 session_id = 2;
void IMMsgDataAck::clear_session_id() {
  session_id_ = 0u;
}
::google::protobuf::uint32 IMMsgDataAck::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataAck.session_id)
  return session_id_;
}
void IMMsgDataAck::set_session_id(::google::protobuf::uint32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataAck.session_id)
}

// uint32 msg_id = 3;
void IMMsgDataAck::clear_msg_id() {
  msg_id_ = 0u;
}
::google::protobuf::uint32 IMMsgDataAck::msg_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataAck.msg_id)
  return msg_id_;
}
void IMMsgDataAck::set_msg_id(::google::protobuf::uint32 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataAck.msg_id)
}

// .IM.BaseDefine.SessionType session_type = 4;
void IMMsgDataAck::clear_session_type() {
  session_type_ = 0;
}
::IM::BaseDefine::SessionType IMMsgDataAck::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataAck.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
void IMMsgDataAck::set_session_type(::IM::BaseDefine::SessionType value) {
  
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataAck.session_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMMsgDataReadAck::kUserIdFieldNumber;
const int IMMsgDataReadAck::kSessionIdFieldNumber;
const int IMMsgDataReadAck::kMsgIdFieldNumber;
const int IMMsgDataReadAck::kSessionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMMsgDataReadAck::IMMsgDataReadAck()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMMsgDataReadAck)
}
IMMsgDataReadAck::IMMsgDataReadAck(const IMMsgDataReadAck& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(session_type_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMMsgDataReadAck)
}

void IMMsgDataReadAck::SharedCtor() {
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(session_type_));
  _cached_size_ = 0;
}

IMMsgDataReadAck::~IMMsgDataReadAck() {
  // @@protoc_insertion_point(destructor:IM.Message.IMMsgDataReadAck)
  SharedDtor();
}

void IMMsgDataReadAck::SharedDtor() {
}

void IMMsgDataReadAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMMsgDataReadAck& IMMsgDataReadAck::default_instance() {
  protobuf_IM_2eMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMMsgDataReadAck* IMMsgDataReadAck::New(::google::protobuf::Arena* arena) const {
  IMMsgDataReadAck* n = new IMMsgDataReadAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMMsgDataReadAck::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMMsgDataReadAck)
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(session_type_));
}

bool IMMsgDataReadAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Message.IMMsgDataReadAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 msg_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.SessionType session_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMMsgDataReadAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMMsgDataReadAck)
  return false;
#undef DO_
}

void IMMsgDataReadAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMMsgDataReadAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // uint32 session_id = 2;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->session_id(), output);
  }

  // uint32 msg_id = 3;
  if (this->msg_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msg_id(), output);
  }

  // .IM.BaseDefine.SessionType session_type = 4;
  if (this->session_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->session_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Message.IMMsgDataReadAck)
}

size_t IMMsgDataReadAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMMsgDataReadAck)
  size_t total_size = 0;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // uint32 session_id = 2;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  // uint32 msg_id = 3;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id());
  }

  // .IM.BaseDefine.SessionType session_type = 4;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMMsgDataReadAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMMsgDataReadAck*>(&from));
}

void IMMsgDataReadAck::MergeFrom(const IMMsgDataReadAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMMsgDataReadAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
  if (from.msg_id() != 0) {
    set_msg_id(from.msg_id());
  }
  if (from.session_type() != 0) {
    set_session_type(from.session_type());
  }
}

void IMMsgDataReadAck::CopyFrom(const IMMsgDataReadAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMMsgDataReadAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgDataReadAck::IsInitialized() const {
  return true;
}

void IMMsgDataReadAck::Swap(IMMsgDataReadAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMMsgDataReadAck::InternalSwap(IMMsgDataReadAck* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(session_id_, other->session_id_);
  std::swap(msg_id_, other->msg_id_);
  std::swap(session_type_, other->session_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMMsgDataReadAck::GetTypeName() const {
  return "IM.Message.IMMsgDataReadAck";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMMsgDataReadAck

// uint32 user_id = 1;
void IMMsgDataReadAck::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMMsgDataReadAck::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataReadAck.user_id)
  return user_id_;
}
void IMMsgDataReadAck::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataReadAck.user_id)
}

// uint32 session_id = 2;
void IMMsgDataReadAck::clear_session_id() {
  session_id_ = 0u;
}
::google::protobuf::uint32 IMMsgDataReadAck::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataReadAck.session_id)
  return session_id_;
}
void IMMsgDataReadAck::set_session_id(::google::protobuf::uint32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataReadAck.session_id)
}

// uint32 msg_id = 3;
void IMMsgDataReadAck::clear_msg_id() {
  msg_id_ = 0u;
}
::google::protobuf::uint32 IMMsgDataReadAck::msg_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataReadAck.msg_id)
  return msg_id_;
}
void IMMsgDataReadAck::set_msg_id(::google::protobuf::uint32 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataReadAck.msg_id)
}

// .IM.BaseDefine.SessionType session_type = 4;
void IMMsgDataReadAck::clear_session_type() {
  session_type_ = 0;
}
::IM::BaseDefine::SessionType IMMsgDataReadAck::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataReadAck.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
void IMMsgDataReadAck::set_session_type(::IM::BaseDefine::SessionType value) {
  
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataReadAck.session_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMMsgDataReadNotify::kUserIdFieldNumber;
const int IMMsgDataReadNotify::kSessionIdFieldNumber;
const int IMMsgDataReadNotify::kMsgIdFieldNumber;
const int IMMsgDataReadNotify::kSessionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMMsgDataReadNotify::IMMsgDataReadNotify()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMMsgDataReadNotify)
}
IMMsgDataReadNotify::IMMsgDataReadNotify(const IMMsgDataReadNotify& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(session_type_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMMsgDataReadNotify)
}

void IMMsgDataReadNotify::SharedCtor() {
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(session_type_));
  _cached_size_ = 0;
}

IMMsgDataReadNotify::~IMMsgDataReadNotify() {
  // @@protoc_insertion_point(destructor:IM.Message.IMMsgDataReadNotify)
  SharedDtor();
}

void IMMsgDataReadNotify::SharedDtor() {
}

void IMMsgDataReadNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMMsgDataReadNotify& IMMsgDataReadNotify::default_instance() {
  protobuf_IM_2eMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMMsgDataReadNotify* IMMsgDataReadNotify::New(::google::protobuf::Arena* arena) const {
  IMMsgDataReadNotify* n = new IMMsgDataReadNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMMsgDataReadNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMMsgDataReadNotify)
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(session_type_));
}

bool IMMsgDataReadNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Message.IMMsgDataReadNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 msg_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.SessionType session_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMMsgDataReadNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMMsgDataReadNotify)
  return false;
#undef DO_
}

void IMMsgDataReadNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMMsgDataReadNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // uint32 session_id = 2;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->session_id(), output);
  }

  // uint32 msg_id = 3;
  if (this->msg_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msg_id(), output);
  }

  // .IM.BaseDefine.SessionType session_type = 4;
  if (this->session_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->session_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Message.IMMsgDataReadNotify)
}

size_t IMMsgDataReadNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMMsgDataReadNotify)
  size_t total_size = 0;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // uint32 session_id = 2;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  // uint32 msg_id = 3;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id());
  }

  // .IM.BaseDefine.SessionType session_type = 4;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMMsgDataReadNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMMsgDataReadNotify*>(&from));
}

void IMMsgDataReadNotify::MergeFrom(const IMMsgDataReadNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMMsgDataReadNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
  if (from.msg_id() != 0) {
    set_msg_id(from.msg_id());
  }
  if (from.session_type() != 0) {
    set_session_type(from.session_type());
  }
}

void IMMsgDataReadNotify::CopyFrom(const IMMsgDataReadNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMMsgDataReadNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgDataReadNotify::IsInitialized() const {
  return true;
}

void IMMsgDataReadNotify::Swap(IMMsgDataReadNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMMsgDataReadNotify::InternalSwap(IMMsgDataReadNotify* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(session_id_, other->session_id_);
  std::swap(msg_id_, other->msg_id_);
  std::swap(session_type_, other->session_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMMsgDataReadNotify::GetTypeName() const {
  return "IM.Message.IMMsgDataReadNotify";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMMsgDataReadNotify

// uint32 user_id = 1;
void IMMsgDataReadNotify::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMMsgDataReadNotify::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataReadNotify.user_id)
  return user_id_;
}
void IMMsgDataReadNotify::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataReadNotify.user_id)
}

// uint32 session_id = 2;
void IMMsgDataReadNotify::clear_session_id() {
  session_id_ = 0u;
}
::google::protobuf::uint32 IMMsgDataReadNotify::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataReadNotify.session_id)
  return session_id_;
}
void IMMsgDataReadNotify::set_session_id(::google::protobuf::uint32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataReadNotify.session_id)
}

// uint32 msg_id = 3;
void IMMsgDataReadNotify::clear_msg_id() {
  msg_id_ = 0u;
}
::google::protobuf::uint32 IMMsgDataReadNotify::msg_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataReadNotify.msg_id)
  return msg_id_;
}
void IMMsgDataReadNotify::set_msg_id(::google::protobuf::uint32 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataReadNotify.msg_id)
}

// .IM.BaseDefine.SessionType session_type = 4;
void IMMsgDataReadNotify::clear_session_type() {
  session_type_ = 0;
}
::IM::BaseDefine::SessionType IMMsgDataReadNotify::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMMsgDataReadNotify.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
void IMMsgDataReadNotify::set_session_type(::IM::BaseDefine::SessionType value) {
  
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMMsgDataReadNotify.session_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMClientTimeReq::IMClientTimeReq()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMClientTimeReq)
}
IMClientTimeReq::IMClientTimeReq(const IMClientTimeReq& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMClientTimeReq)
}

void IMClientTimeReq::SharedCtor() {
  _cached_size_ = 0;
}

IMClientTimeReq::~IMClientTimeReq() {
  // @@protoc_insertion_point(destructor:IM.Message.IMClientTimeReq)
  SharedDtor();
}

void IMClientTimeReq::SharedDtor() {
}

void IMClientTimeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMClientTimeReq& IMClientTimeReq::default_instance() {
  protobuf_IM_2eMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMClientTimeReq* IMClientTimeReq::New(::google::protobuf::Arena* arena) const {
  IMClientTimeReq* n = new IMClientTimeReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMClientTimeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMClientTimeReq)
}

bool IMClientTimeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Message.IMClientTimeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMClientTimeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMClientTimeReq)
  return false;
#undef DO_
}

void IMClientTimeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMClientTimeReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:IM.Message.IMClientTimeReq)
}

size_t IMClientTimeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMClientTimeReq)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMClientTimeReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMClientTimeReq*>(&from));
}

void IMClientTimeReq::MergeFrom(const IMClientTimeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMClientTimeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void IMClientTimeReq::CopyFrom(const IMClientTimeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMClientTimeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMClientTimeReq::IsInitialized() const {
  return true;
}

void IMClientTimeReq::Swap(IMClientTimeReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMClientTimeReq::InternalSwap(IMClientTimeReq* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMClientTimeReq::GetTypeName() const {
  return "IM.Message.IMClientTimeReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMClientTimeReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMClientTimeRsp::kServerTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMClientTimeRsp::IMClientTimeRsp()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMClientTimeRsp)
}
IMClientTimeRsp::IMClientTimeRsp(const IMClientTimeRsp& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_time_ = from.server_time_;
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMClientTimeRsp)
}

void IMClientTimeRsp::SharedCtor() {
  server_time_ = 0u;
  _cached_size_ = 0;
}

IMClientTimeRsp::~IMClientTimeRsp() {
  // @@protoc_insertion_point(destructor:IM.Message.IMClientTimeRsp)
  SharedDtor();
}

void IMClientTimeRsp::SharedDtor() {
}

void IMClientTimeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMClientTimeRsp& IMClientTimeRsp::default_instance() {
  protobuf_IM_2eMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMClientTimeRsp* IMClientTimeRsp::New(::google::protobuf::Arena* arena) const {
  IMClientTimeRsp* n = new IMClientTimeRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMClientTimeRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMClientTimeRsp)
  server_time_ = 0u;
}

bool IMClientTimeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Message.IMClientTimeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 server_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMClientTimeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMClientTimeRsp)
  return false;
#undef DO_
}

void IMClientTimeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMClientTimeRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_time = 1;
  if (this->server_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Message.IMClientTimeRsp)
}

size_t IMClientTimeRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMClientTimeRsp)
  size_t total_size = 0;

  // uint32 server_time = 1;
  if (this->server_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMClientTimeRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMClientTimeRsp*>(&from));
}

void IMClientTimeRsp::MergeFrom(const IMClientTimeRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMClientTimeRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_time() != 0) {
    set_server_time(from.server_time());
  }
}

void IMClientTimeRsp::CopyFrom(const IMClientTimeRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMClientTimeRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMClientTimeRsp::IsInitialized() const {
  return true;
}

void IMClientTimeRsp::Swap(IMClientTimeRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMClientTimeRsp::InternalSwap(IMClientTimeRsp* other) {
  std::swap(server_time_, other->server_time_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMClientTimeRsp::GetTypeName() const {
  return "IM.Message.IMClientTimeRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMClientTimeRsp

// uint32 server_time = 1;
void IMClientTimeRsp::clear_server_time() {
  server_time_ = 0u;
}
::google::protobuf::uint32 IMClientTimeRsp::server_time() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMClientTimeRsp.server_time)
  return server_time_;
}
void IMClientTimeRsp::set_server_time(::google::protobuf::uint32 value) {
  
  server_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMClientTimeRsp.server_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMUnreadMsgCntReq::kUserIdFieldNumber;
const int IMUnreadMsgCntReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMUnreadMsgCntReq::IMUnreadMsgCntReq()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMUnreadMsgCntReq)
}
IMUnreadMsgCntReq::IMUnreadMsgCntReq(const IMUnreadMsgCntReq& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMUnreadMsgCntReq)
}

void IMUnreadMsgCntReq::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  _cached_size_ = 0;
}

IMUnreadMsgCntReq::~IMUnreadMsgCntReq() {
  // @@protoc_insertion_point(destructor:IM.Message.IMUnreadMsgCntReq)
  SharedDtor();
}

void IMUnreadMsgCntReq::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMUnreadMsgCntReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUnreadMsgCntReq& IMUnreadMsgCntReq::default_instance() {
  protobuf_IM_2eMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMUnreadMsgCntReq* IMUnreadMsgCntReq::New(::google::protobuf::Arena* arena) const {
  IMUnreadMsgCntReq* n = new IMUnreadMsgCntReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMUnreadMsgCntReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMUnreadMsgCntReq)
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
}

bool IMUnreadMsgCntReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Message.IMUnreadMsgCntReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMUnreadMsgCntReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMUnreadMsgCntReq)
  return false;
#undef DO_
}

void IMUnreadMsgCntReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMUnreadMsgCntReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Message.IMUnreadMsgCntReq)
}

size_t IMUnreadMsgCntReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMUnreadMsgCntReq)
  size_t total_size = 0;

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUnreadMsgCntReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUnreadMsgCntReq*>(&from));
}

void IMUnreadMsgCntReq::MergeFrom(const IMUnreadMsgCntReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMUnreadMsgCntReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void IMUnreadMsgCntReq::CopyFrom(const IMUnreadMsgCntReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMUnreadMsgCntReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUnreadMsgCntReq::IsInitialized() const {
  return true;
}

void IMUnreadMsgCntReq::Swap(IMUnreadMsgCntReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMUnreadMsgCntReq::InternalSwap(IMUnreadMsgCntReq* other) {
  attach_data_.Swap(&other->attach_data_);
  std::swap(user_id_, other->user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMUnreadMsgCntReq::GetTypeName() const {
  return "IM.Message.IMUnreadMsgCntReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMUnreadMsgCntReq

// uint32 user_id = 1;
void IMUnreadMsgCntReq::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMUnreadMsgCntReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMUnreadMsgCntReq.user_id)
  return user_id_;
}
void IMUnreadMsgCntReq::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMUnreadMsgCntReq.user_id)
}

// bytes attach_data = 20;
void IMUnreadMsgCntReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMUnreadMsgCntReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMUnreadMsgCntReq.attach_data)
  return attach_data_.GetNoArena();
}
void IMUnreadMsgCntReq::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Message.IMUnreadMsgCntReq.attach_data)
}
#if LANG_CXX11
void IMUnreadMsgCntReq::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Message.IMUnreadMsgCntReq.attach_data)
}
#endif
void IMUnreadMsgCntReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Message.IMUnreadMsgCntReq.attach_data)
}
void IMUnreadMsgCntReq::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Message.IMUnreadMsgCntReq.attach_data)
}
::std::string* IMUnreadMsgCntReq::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Message.IMUnreadMsgCntReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMUnreadMsgCntReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMUnreadMsgCntReq.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMUnreadMsgCntReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMUnreadMsgCntReq.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMUnreadMsgCntRsp::kUserIdFieldNumber;
const int IMUnreadMsgCntRsp::kTotalCntFieldNumber;
const int IMUnreadMsgCntRsp::kUnreadinfoListFieldNumber;
const int IMUnreadMsgCntRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMUnreadMsgCntRsp::IMUnreadMsgCntRsp()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMUnreadMsgCntRsp)
}
IMUnreadMsgCntRsp::IMUnreadMsgCntRsp(const IMUnreadMsgCntRsp& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      unreadinfo_list_(from.unreadinfo_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&total_cnt_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(total_cnt_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMUnreadMsgCntRsp)
}

void IMUnreadMsgCntRsp::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&total_cnt_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(total_cnt_));
  _cached_size_ = 0;
}

IMUnreadMsgCntRsp::~IMUnreadMsgCntRsp() {
  // @@protoc_insertion_point(destructor:IM.Message.IMUnreadMsgCntRsp)
  SharedDtor();
}

void IMUnreadMsgCntRsp::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMUnreadMsgCntRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUnreadMsgCntRsp& IMUnreadMsgCntRsp::default_instance() {
  protobuf_IM_2eMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMUnreadMsgCntRsp* IMUnreadMsgCntRsp::New(::google::protobuf::Arena* arena) const {
  IMUnreadMsgCntRsp* n = new IMUnreadMsgCntRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMUnreadMsgCntRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMUnreadMsgCntRsp)
  unreadinfo_list_.Clear();
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&total_cnt_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(total_cnt_));
}

bool IMUnreadMsgCntRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Message.IMUnreadMsgCntRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_cnt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IM.BaseDefine.UnreadInfo unreadinfo_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unreadinfo_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMUnreadMsgCntRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMUnreadMsgCntRsp)
  return false;
#undef DO_
}

void IMUnreadMsgCntRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMUnreadMsgCntRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // uint32 total_cnt = 2;
  if (this->total_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_cnt(), output);
  }

  // repeated .IM.BaseDefine.UnreadInfo unreadinfo_list = 3;
  for (unsigned int i = 0, n = this->unreadinfo_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->unreadinfo_list(i), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Message.IMUnreadMsgCntRsp)
}

size_t IMUnreadMsgCntRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMUnreadMsgCntRsp)
  size_t total_size = 0;

  // repeated .IM.BaseDefine.UnreadInfo unreadinfo_list = 3;
  {
    unsigned int count = this->unreadinfo_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unreadinfo_list(i));
    }
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // uint32 total_cnt = 2;
  if (this->total_cnt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_cnt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUnreadMsgCntRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUnreadMsgCntRsp*>(&from));
}

void IMUnreadMsgCntRsp::MergeFrom(const IMUnreadMsgCntRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMUnreadMsgCntRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unreadinfo_list_.MergeFrom(from.unreadinfo_list_);
  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.total_cnt() != 0) {
    set_total_cnt(from.total_cnt());
  }
}

void IMUnreadMsgCntRsp::CopyFrom(const IMUnreadMsgCntRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMUnreadMsgCntRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUnreadMsgCntRsp::IsInitialized() const {
  return true;
}

void IMUnreadMsgCntRsp::Swap(IMUnreadMsgCntRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMUnreadMsgCntRsp::InternalSwap(IMUnreadMsgCntRsp* other) {
  unreadinfo_list_.InternalSwap(&other->unreadinfo_list_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(user_id_, other->user_id_);
  std::swap(total_cnt_, other->total_cnt_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMUnreadMsgCntRsp::GetTypeName() const {
  return "IM.Message.IMUnreadMsgCntRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMUnreadMsgCntRsp

// uint32 user_id = 1;
void IMUnreadMsgCntRsp::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMUnreadMsgCntRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMUnreadMsgCntRsp.user_id)
  return user_id_;
}
void IMUnreadMsgCntRsp::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMUnreadMsgCntRsp.user_id)
}

// uint32 total_cnt = 2;
void IMUnreadMsgCntRsp::clear_total_cnt() {
  total_cnt_ = 0u;
}
::google::protobuf::uint32 IMUnreadMsgCntRsp::total_cnt() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMUnreadMsgCntRsp.total_cnt)
  return total_cnt_;
}
void IMUnreadMsgCntRsp::set_total_cnt(::google::protobuf::uint32 value) {
  
  total_cnt_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMUnreadMsgCntRsp.total_cnt)
}

// repeated .IM.BaseDefine.UnreadInfo unreadinfo_list = 3;
int IMUnreadMsgCntRsp::unreadinfo_list_size() const {
  return unreadinfo_list_.size();
}
void IMUnreadMsgCntRsp::clear_unreadinfo_list() {
  unreadinfo_list_.Clear();
}
const ::IM::BaseDefine::UnreadInfo& IMUnreadMsgCntRsp::unreadinfo_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Message.IMUnreadMsgCntRsp.unreadinfo_list)
  return unreadinfo_list_.Get(index);
}
::IM::BaseDefine::UnreadInfo* IMUnreadMsgCntRsp::mutable_unreadinfo_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Message.IMUnreadMsgCntRsp.unreadinfo_list)
  return unreadinfo_list_.Mutable(index);
}
::IM::BaseDefine::UnreadInfo* IMUnreadMsgCntRsp::add_unreadinfo_list() {
  // @@protoc_insertion_point(field_add:IM.Message.IMUnreadMsgCntRsp.unreadinfo_list)
  return unreadinfo_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UnreadInfo >*
IMUnreadMsgCntRsp::mutable_unreadinfo_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Message.IMUnreadMsgCntRsp.unreadinfo_list)
  return &unreadinfo_list_;
}
const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UnreadInfo >&
IMUnreadMsgCntRsp::unreadinfo_list() const {
  // @@protoc_insertion_point(field_list:IM.Message.IMUnreadMsgCntRsp.unreadinfo_list)
  return unreadinfo_list_;
}

// bytes attach_data = 20;
void IMUnreadMsgCntRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMUnreadMsgCntRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMUnreadMsgCntRsp.attach_data)
  return attach_data_.GetNoArena();
}
void IMUnreadMsgCntRsp::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Message.IMUnreadMsgCntRsp.attach_data)
}
#if LANG_CXX11
void IMUnreadMsgCntRsp::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Message.IMUnreadMsgCntRsp.attach_data)
}
#endif
void IMUnreadMsgCntRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Message.IMUnreadMsgCntRsp.attach_data)
}
void IMUnreadMsgCntRsp::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Message.IMUnreadMsgCntRsp.attach_data)
}
::std::string* IMUnreadMsgCntRsp::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Message.IMUnreadMsgCntRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMUnreadMsgCntRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMUnreadMsgCntRsp.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMUnreadMsgCntRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMUnreadMsgCntRsp.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMGetMsgListReq::kUserIdFieldNumber;
const int IMGetMsgListReq::kSessionTypeFieldNumber;
const int IMGetMsgListReq::kSessionIdFieldNumber;
const int IMGetMsgListReq::kMsgIdBeginFieldNumber;
const int IMGetMsgListReq::kMsgCntFieldNumber;
const int IMGetMsgListReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMGetMsgListReq::IMGetMsgListReq()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMGetMsgListReq)
}
IMGetMsgListReq::IMGetMsgListReq(const IMGetMsgListReq& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&msg_cnt_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(msg_cnt_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMGetMsgListReq)
}

void IMGetMsgListReq::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&msg_cnt_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(msg_cnt_));
  _cached_size_ = 0;
}

IMGetMsgListReq::~IMGetMsgListReq() {
  // @@protoc_insertion_point(destructor:IM.Message.IMGetMsgListReq)
  SharedDtor();
}

void IMGetMsgListReq::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMGetMsgListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGetMsgListReq& IMGetMsgListReq::default_instance() {
  protobuf_IM_2eMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMGetMsgListReq* IMGetMsgListReq::New(::google::protobuf::Arena* arena) const {
  IMGetMsgListReq* n = new IMGetMsgListReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMGetMsgListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMGetMsgListReq)
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&msg_cnt_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(msg_cnt_));
}

bool IMGetMsgListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Message.IMGetMsgListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.SessionType session_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 session_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 msg_id_begin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_begin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 msg_cnt = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMGetMsgListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMGetMsgListReq)
  return false;
#undef DO_
}

void IMGetMsgListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMGetMsgListReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->session_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // uint32 session_id = 3;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // uint32 msg_id_begin = 4;
  if (this->msg_id_begin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->msg_id_begin(), output);
  }

  // uint32 msg_cnt = 5;
  if (this->msg_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->msg_cnt(), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Message.IMGetMsgListReq)
}

size_t IMGetMsgListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMGetMsgListReq)
  size_t total_size = 0;

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
  }

  // uint32 session_id = 3;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  // uint32 msg_id_begin = 4;
  if (this->msg_id_begin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id_begin());
  }

  // uint32 msg_cnt = 5;
  if (this->msg_cnt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_cnt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGetMsgListReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGetMsgListReq*>(&from));
}

void IMGetMsgListReq::MergeFrom(const IMGetMsgListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMGetMsgListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.session_type() != 0) {
    set_session_type(from.session_type());
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
  if (from.msg_id_begin() != 0) {
    set_msg_id_begin(from.msg_id_begin());
  }
  if (from.msg_cnt() != 0) {
    set_msg_cnt(from.msg_cnt());
  }
}

void IMGetMsgListReq::CopyFrom(const IMGetMsgListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMGetMsgListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetMsgListReq::IsInitialized() const {
  return true;
}

void IMGetMsgListReq::Swap(IMGetMsgListReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMGetMsgListReq::InternalSwap(IMGetMsgListReq* other) {
  attach_data_.Swap(&other->attach_data_);
  std::swap(user_id_, other->user_id_);
  std::swap(session_type_, other->session_type_);
  std::swap(session_id_, other->session_id_);
  std::swap(msg_id_begin_, other->msg_id_begin_);
  std::swap(msg_cnt_, other->msg_cnt_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMGetMsgListReq::GetTypeName() const {
  return "IM.Message.IMGetMsgListReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMGetMsgListReq

// uint32 user_id = 1;
void IMGetMsgListReq::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMGetMsgListReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListReq.user_id)
  return user_id_;
}
void IMGetMsgListReq::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListReq.user_id)
}

// .IM.BaseDefine.SessionType session_type = 2;
void IMGetMsgListReq::clear_session_type() {
  session_type_ = 0;
}
::IM::BaseDefine::SessionType IMGetMsgListReq::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListReq.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
void IMGetMsgListReq::set_session_type(::IM::BaseDefine::SessionType value) {
  
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListReq.session_type)
}

// uint32 session_id = 3;
void IMGetMsgListReq::clear_session_id() {
  session_id_ = 0u;
}
::google::protobuf::uint32 IMGetMsgListReq::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListReq.session_id)
  return session_id_;
}
void IMGetMsgListReq::set_session_id(::google::protobuf::uint32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListReq.session_id)
}

// uint32 msg_id_begin = 4;
void IMGetMsgListReq::clear_msg_id_begin() {
  msg_id_begin_ = 0u;
}
::google::protobuf::uint32 IMGetMsgListReq::msg_id_begin() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListReq.msg_id_begin)
  return msg_id_begin_;
}
void IMGetMsgListReq::set_msg_id_begin(::google::protobuf::uint32 value) {
  
  msg_id_begin_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListReq.msg_id_begin)
}

// uint32 msg_cnt = 5;
void IMGetMsgListReq::clear_msg_cnt() {
  msg_cnt_ = 0u;
}
::google::protobuf::uint32 IMGetMsgListReq::msg_cnt() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListReq.msg_cnt)
  return msg_cnt_;
}
void IMGetMsgListReq::set_msg_cnt(::google::protobuf::uint32 value) {
  
  msg_cnt_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListReq.msg_cnt)
}

// bytes attach_data = 20;
void IMGetMsgListReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMGetMsgListReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListReq.attach_data)
  return attach_data_.GetNoArena();
}
void IMGetMsgListReq::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListReq.attach_data)
}
#if LANG_CXX11
void IMGetMsgListReq::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Message.IMGetMsgListReq.attach_data)
}
#endif
void IMGetMsgListReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Message.IMGetMsgListReq.attach_data)
}
void IMGetMsgListReq::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Message.IMGetMsgListReq.attach_data)
}
::std::string* IMGetMsgListReq::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Message.IMGetMsgListReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMGetMsgListReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMGetMsgListReq.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMGetMsgListReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMGetMsgListReq.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMGetMsgListRsp::kUserIdFieldNumber;
const int IMGetMsgListRsp::kSessionTypeFieldNumber;
const int IMGetMsgListRsp::kSessionIdFieldNumber;
const int IMGetMsgListRsp::kMsgIdBeginFieldNumber;
const int IMGetMsgListRsp::kMsgListFieldNumber;
const int IMGetMsgListRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMGetMsgListRsp::IMGetMsgListRsp()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMGetMsgListRsp)
}
IMGetMsgListRsp::IMGetMsgListRsp(const IMGetMsgListRsp& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      msg_list_(from.msg_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&msg_id_begin_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(msg_id_begin_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMGetMsgListRsp)
}

void IMGetMsgListRsp::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&msg_id_begin_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(msg_id_begin_));
  _cached_size_ = 0;
}

IMGetMsgListRsp::~IMGetMsgListRsp() {
  // @@protoc_insertion_point(destructor:IM.Message.IMGetMsgListRsp)
  SharedDtor();
}

void IMGetMsgListRsp::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMGetMsgListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGetMsgListRsp& IMGetMsgListRsp::default_instance() {
  protobuf_IM_2eMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMGetMsgListRsp* IMGetMsgListRsp::New(::google::protobuf::Arena* arena) const {
  IMGetMsgListRsp* n = new IMGetMsgListRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMGetMsgListRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMGetMsgListRsp)
  msg_list_.Clear();
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&msg_id_begin_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(msg_id_begin_));
}

bool IMGetMsgListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Message.IMGetMsgListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.SessionType session_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 session_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 msg_id_begin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_begin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IM.BaseDefine.MsgInfo msg_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msg_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMGetMsgListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMGetMsgListRsp)
  return false;
#undef DO_
}

void IMGetMsgListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMGetMsgListRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->session_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // uint32 session_id = 3;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // uint32 msg_id_begin = 4;
  if (this->msg_id_begin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->msg_id_begin(), output);
  }

  // repeated .IM.BaseDefine.MsgInfo msg_list = 5;
  for (unsigned int i = 0, n = this->msg_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->msg_list(i), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Message.IMGetMsgListRsp)
}

size_t IMGetMsgListRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMGetMsgListRsp)
  size_t total_size = 0;

  // repeated .IM.BaseDefine.MsgInfo msg_list = 5;
  {
    unsigned int count = this->msg_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_list(i));
    }
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
  }

  // uint32 session_id = 3;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  // uint32 msg_id_begin = 4;
  if (this->msg_id_begin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id_begin());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGetMsgListRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGetMsgListRsp*>(&from));
}

void IMGetMsgListRsp::MergeFrom(const IMGetMsgListRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMGetMsgListRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_list_.MergeFrom(from.msg_list_);
  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.session_type() != 0) {
    set_session_type(from.session_type());
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
  if (from.msg_id_begin() != 0) {
    set_msg_id_begin(from.msg_id_begin());
  }
}

void IMGetMsgListRsp::CopyFrom(const IMGetMsgListRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMGetMsgListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetMsgListRsp::IsInitialized() const {
  return true;
}

void IMGetMsgListRsp::Swap(IMGetMsgListRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMGetMsgListRsp::InternalSwap(IMGetMsgListRsp* other) {
  msg_list_.InternalSwap(&other->msg_list_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(user_id_, other->user_id_);
  std::swap(session_type_, other->session_type_);
  std::swap(session_id_, other->session_id_);
  std::swap(msg_id_begin_, other->msg_id_begin_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMGetMsgListRsp::GetTypeName() const {
  return "IM.Message.IMGetMsgListRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMGetMsgListRsp

// uint32 user_id = 1;
void IMGetMsgListRsp::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMGetMsgListRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListRsp.user_id)
  return user_id_;
}
void IMGetMsgListRsp::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListRsp.user_id)
}

// .IM.BaseDefine.SessionType session_type = 2;
void IMGetMsgListRsp::clear_session_type() {
  session_type_ = 0;
}
::IM::BaseDefine::SessionType IMGetMsgListRsp::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListRsp.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
void IMGetMsgListRsp::set_session_type(::IM::BaseDefine::SessionType value) {
  
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListRsp.session_type)
}

// uint32 session_id = 3;
void IMGetMsgListRsp::clear_session_id() {
  session_id_ = 0u;
}
::google::protobuf::uint32 IMGetMsgListRsp::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListRsp.session_id)
  return session_id_;
}
void IMGetMsgListRsp::set_session_id(::google::protobuf::uint32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListRsp.session_id)
}

// uint32 msg_id_begin = 4;
void IMGetMsgListRsp::clear_msg_id_begin() {
  msg_id_begin_ = 0u;
}
::google::protobuf::uint32 IMGetMsgListRsp::msg_id_begin() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListRsp.msg_id_begin)
  return msg_id_begin_;
}
void IMGetMsgListRsp::set_msg_id_begin(::google::protobuf::uint32 value) {
  
  msg_id_begin_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListRsp.msg_id_begin)
}

// repeated .IM.BaseDefine.MsgInfo msg_list = 5;
int IMGetMsgListRsp::msg_list_size() const {
  return msg_list_.size();
}
void IMGetMsgListRsp::clear_msg_list() {
  msg_list_.Clear();
}
const ::IM::BaseDefine::MsgInfo& IMGetMsgListRsp::msg_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListRsp.msg_list)
  return msg_list_.Get(index);
}
::IM::BaseDefine::MsgInfo* IMGetMsgListRsp::mutable_msg_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Message.IMGetMsgListRsp.msg_list)
  return msg_list_.Mutable(index);
}
::IM::BaseDefine::MsgInfo* IMGetMsgListRsp::add_msg_list() {
  // @@protoc_insertion_point(field_add:IM.Message.IMGetMsgListRsp.msg_list)
  return msg_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::MsgInfo >*
IMGetMsgListRsp::mutable_msg_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Message.IMGetMsgListRsp.msg_list)
  return &msg_list_;
}
const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::MsgInfo >&
IMGetMsgListRsp::msg_list() const {
  // @@protoc_insertion_point(field_list:IM.Message.IMGetMsgListRsp.msg_list)
  return msg_list_;
}

// bytes attach_data = 20;
void IMGetMsgListRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMGetMsgListRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgListRsp.attach_data)
  return attach_data_.GetNoArena();
}
void IMGetMsgListRsp::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgListRsp.attach_data)
}
#if LANG_CXX11
void IMGetMsgListRsp::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Message.IMGetMsgListRsp.attach_data)
}
#endif
void IMGetMsgListRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Message.IMGetMsgListRsp.attach_data)
}
void IMGetMsgListRsp::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Message.IMGetMsgListRsp.attach_data)
}
::std::string* IMGetMsgListRsp::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Message.IMGetMsgListRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMGetMsgListRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMGetMsgListRsp.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMGetMsgListRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMGetMsgListRsp.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMGetLatestMsgIdReq::kUserIdFieldNumber;
const int IMGetLatestMsgIdReq::kSessionTypeFieldNumber;
const int IMGetLatestMsgIdReq::kSessionIdFieldNumber;
const int IMGetLatestMsgIdReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMGetLatestMsgIdReq::IMGetLatestMsgIdReq()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMGetLatestMsgIdReq)
}
IMGetLatestMsgIdReq::IMGetLatestMsgIdReq(const IMGetLatestMsgIdReq& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(session_id_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMGetLatestMsgIdReq)
}

void IMGetLatestMsgIdReq::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(session_id_));
  _cached_size_ = 0;
}

IMGetLatestMsgIdReq::~IMGetLatestMsgIdReq() {
  // @@protoc_insertion_point(destructor:IM.Message.IMGetLatestMsgIdReq)
  SharedDtor();
}

void IMGetLatestMsgIdReq::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMGetLatestMsgIdReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGetLatestMsgIdReq& IMGetLatestMsgIdReq::default_instance() {
  protobuf_IM_2eMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMGetLatestMsgIdReq* IMGetLatestMsgIdReq::New(::google::protobuf::Arena* arena) const {
  IMGetLatestMsgIdReq* n = new IMGetLatestMsgIdReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMGetLatestMsgIdReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMGetLatestMsgIdReq)
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(session_id_));
}

bool IMGetLatestMsgIdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Message.IMGetLatestMsgIdReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.SessionType session_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 session_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMGetLatestMsgIdReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMGetLatestMsgIdReq)
  return false;
#undef DO_
}

void IMGetLatestMsgIdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMGetLatestMsgIdReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->session_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // uint32 session_id = 3;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Message.IMGetLatestMsgIdReq)
}

size_t IMGetLatestMsgIdReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMGetLatestMsgIdReq)
  size_t total_size = 0;

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
  }

  // uint32 session_id = 3;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGetLatestMsgIdReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGetLatestMsgIdReq*>(&from));
}

void IMGetLatestMsgIdReq::MergeFrom(const IMGetLatestMsgIdReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMGetLatestMsgIdReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.session_type() != 0) {
    set_session_type(from.session_type());
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
}

void IMGetLatestMsgIdReq::CopyFrom(const IMGetLatestMsgIdReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMGetLatestMsgIdReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetLatestMsgIdReq::IsInitialized() const {
  return true;
}

void IMGetLatestMsgIdReq::Swap(IMGetLatestMsgIdReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMGetLatestMsgIdReq::InternalSwap(IMGetLatestMsgIdReq* other) {
  attach_data_.Swap(&other->attach_data_);
  std::swap(user_id_, other->user_id_);
  std::swap(session_type_, other->session_type_);
  std::swap(session_id_, other->session_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMGetLatestMsgIdReq::GetTypeName() const {
  return "IM.Message.IMGetLatestMsgIdReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMGetLatestMsgIdReq

// uint32 user_id = 1;
void IMGetLatestMsgIdReq::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMGetLatestMsgIdReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetLatestMsgIdReq.user_id)
  return user_id_;
}
void IMGetLatestMsgIdReq::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetLatestMsgIdReq.user_id)
}

// .IM.BaseDefine.SessionType session_type = 2;
void IMGetLatestMsgIdReq::clear_session_type() {
  session_type_ = 0;
}
::IM::BaseDefine::SessionType IMGetLatestMsgIdReq::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetLatestMsgIdReq.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
void IMGetLatestMsgIdReq::set_session_type(::IM::BaseDefine::SessionType value) {
  
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetLatestMsgIdReq.session_type)
}

// uint32 session_id = 3;
void IMGetLatestMsgIdReq::clear_session_id() {
  session_id_ = 0u;
}
::google::protobuf::uint32 IMGetLatestMsgIdReq::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetLatestMsgIdReq.session_id)
  return session_id_;
}
void IMGetLatestMsgIdReq::set_session_id(::google::protobuf::uint32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetLatestMsgIdReq.session_id)
}

// bytes attach_data = 20;
void IMGetLatestMsgIdReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMGetLatestMsgIdReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetLatestMsgIdReq.attach_data)
  return attach_data_.GetNoArena();
}
void IMGetLatestMsgIdReq::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetLatestMsgIdReq.attach_data)
}
#if LANG_CXX11
void IMGetLatestMsgIdReq::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Message.IMGetLatestMsgIdReq.attach_data)
}
#endif
void IMGetLatestMsgIdReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Message.IMGetLatestMsgIdReq.attach_data)
}
void IMGetLatestMsgIdReq::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Message.IMGetLatestMsgIdReq.attach_data)
}
::std::string* IMGetLatestMsgIdReq::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Message.IMGetLatestMsgIdReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMGetLatestMsgIdReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMGetLatestMsgIdReq.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMGetLatestMsgIdReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMGetLatestMsgIdReq.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMGetLatestMsgIdRsp::kUserIdFieldNumber;
const int IMGetLatestMsgIdRsp::kSessionTypeFieldNumber;
const int IMGetLatestMsgIdRsp::kSessionIdFieldNumber;
const int IMGetLatestMsgIdRsp::kLatestMsgIdFieldNumber;
const int IMGetLatestMsgIdRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMGetLatestMsgIdRsp::IMGetLatestMsgIdRsp()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMGetLatestMsgIdRsp)
}
IMGetLatestMsgIdRsp::IMGetLatestMsgIdRsp(const IMGetLatestMsgIdRsp& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&latest_msg_id_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(latest_msg_id_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMGetLatestMsgIdRsp)
}

void IMGetLatestMsgIdRsp::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&latest_msg_id_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(latest_msg_id_));
  _cached_size_ = 0;
}

IMGetLatestMsgIdRsp::~IMGetLatestMsgIdRsp() {
  // @@protoc_insertion_point(destructor:IM.Message.IMGetLatestMsgIdRsp)
  SharedDtor();
}

void IMGetLatestMsgIdRsp::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMGetLatestMsgIdRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGetLatestMsgIdRsp& IMGetLatestMsgIdRsp::default_instance() {
  protobuf_IM_2eMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMGetLatestMsgIdRsp* IMGetLatestMsgIdRsp::New(::google::protobuf::Arena* arena) const {
  IMGetLatestMsgIdRsp* n = new IMGetLatestMsgIdRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMGetLatestMsgIdRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMGetLatestMsgIdRsp)
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&latest_msg_id_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(latest_msg_id_));
}

bool IMGetLatestMsgIdRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Message.IMGetLatestMsgIdRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.SessionType session_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 session_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 latest_msg_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMGetLatestMsgIdRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMGetLatestMsgIdRsp)
  return false;
#undef DO_
}

void IMGetLatestMsgIdRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMGetLatestMsgIdRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->session_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // uint32 session_id = 3;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // uint32 latest_msg_id = 4;
  if (this->latest_msg_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->latest_msg_id(), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Message.IMGetLatestMsgIdRsp)
}

size_t IMGetLatestMsgIdRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMGetLatestMsgIdRsp)
  size_t total_size = 0;

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
  }

  // uint32 session_id = 3;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  // uint32 latest_msg_id = 4;
  if (this->latest_msg_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latest_msg_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGetLatestMsgIdRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGetLatestMsgIdRsp*>(&from));
}

void IMGetLatestMsgIdRsp::MergeFrom(const IMGetLatestMsgIdRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMGetLatestMsgIdRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.session_type() != 0) {
    set_session_type(from.session_type());
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
  if (from.latest_msg_id() != 0) {
    set_latest_msg_id(from.latest_msg_id());
  }
}

void IMGetLatestMsgIdRsp::CopyFrom(const IMGetLatestMsgIdRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMGetLatestMsgIdRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetLatestMsgIdRsp::IsInitialized() const {
  return true;
}

void IMGetLatestMsgIdRsp::Swap(IMGetLatestMsgIdRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMGetLatestMsgIdRsp::InternalSwap(IMGetLatestMsgIdRsp* other) {
  attach_data_.Swap(&other->attach_data_);
  std::swap(user_id_, other->user_id_);
  std::swap(session_type_, other->session_type_);
  std::swap(session_id_, other->session_id_);
  std::swap(latest_msg_id_, other->latest_msg_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMGetLatestMsgIdRsp::GetTypeName() const {
  return "IM.Message.IMGetLatestMsgIdRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMGetLatestMsgIdRsp

// uint32 user_id = 1;
void IMGetLatestMsgIdRsp::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMGetLatestMsgIdRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetLatestMsgIdRsp.user_id)
  return user_id_;
}
void IMGetLatestMsgIdRsp::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetLatestMsgIdRsp.user_id)
}

// .IM.BaseDefine.SessionType session_type = 2;
void IMGetLatestMsgIdRsp::clear_session_type() {
  session_type_ = 0;
}
::IM::BaseDefine::SessionType IMGetLatestMsgIdRsp::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetLatestMsgIdRsp.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
void IMGetLatestMsgIdRsp::set_session_type(::IM::BaseDefine::SessionType value) {
  
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetLatestMsgIdRsp.session_type)
}

// uint32 session_id = 3;
void IMGetLatestMsgIdRsp::clear_session_id() {
  session_id_ = 0u;
}
::google::protobuf::uint32 IMGetLatestMsgIdRsp::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetLatestMsgIdRsp.session_id)
  return session_id_;
}
void IMGetLatestMsgIdRsp::set_session_id(::google::protobuf::uint32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetLatestMsgIdRsp.session_id)
}

// uint32 latest_msg_id = 4;
void IMGetLatestMsgIdRsp::clear_latest_msg_id() {
  latest_msg_id_ = 0u;
}
::google::protobuf::uint32 IMGetLatestMsgIdRsp::latest_msg_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetLatestMsgIdRsp.latest_msg_id)
  return latest_msg_id_;
}
void IMGetLatestMsgIdRsp::set_latest_msg_id(::google::protobuf::uint32 value) {
  
  latest_msg_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetLatestMsgIdRsp.latest_msg_id)
}

// bytes attach_data = 20;
void IMGetLatestMsgIdRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMGetLatestMsgIdRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetLatestMsgIdRsp.attach_data)
  return attach_data_.GetNoArena();
}
void IMGetLatestMsgIdRsp::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetLatestMsgIdRsp.attach_data)
}
#if LANG_CXX11
void IMGetLatestMsgIdRsp::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Message.IMGetLatestMsgIdRsp.attach_data)
}
#endif
void IMGetLatestMsgIdRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Message.IMGetLatestMsgIdRsp.attach_data)
}
void IMGetLatestMsgIdRsp::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Message.IMGetLatestMsgIdRsp.attach_data)
}
::std::string* IMGetLatestMsgIdRsp::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Message.IMGetLatestMsgIdRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMGetLatestMsgIdRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMGetLatestMsgIdRsp.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMGetLatestMsgIdRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMGetLatestMsgIdRsp.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMGetMsgByIdReq::kUserIdFieldNumber;
const int IMGetMsgByIdReq::kSessionTypeFieldNumber;
const int IMGetMsgByIdReq::kSessionIdFieldNumber;
const int IMGetMsgByIdReq::kMsgIdListFieldNumber;
const int IMGetMsgByIdReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMGetMsgByIdReq::IMGetMsgByIdReq()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMGetMsgByIdReq)
}
IMGetMsgByIdReq::IMGetMsgByIdReq(const IMGetMsgByIdReq& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      msg_id_list_(from.msg_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(session_id_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMGetMsgByIdReq)
}

void IMGetMsgByIdReq::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(session_id_));
  _cached_size_ = 0;
}

IMGetMsgByIdReq::~IMGetMsgByIdReq() {
  // @@protoc_insertion_point(destructor:IM.Message.IMGetMsgByIdReq)
  SharedDtor();
}

void IMGetMsgByIdReq::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMGetMsgByIdReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGetMsgByIdReq& IMGetMsgByIdReq::default_instance() {
  protobuf_IM_2eMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMGetMsgByIdReq* IMGetMsgByIdReq::New(::google::protobuf::Arena* arena) const {
  IMGetMsgByIdReq* n = new IMGetMsgByIdReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMGetMsgByIdReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMGetMsgByIdReq)
  msg_id_list_.Clear();
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(session_id_));
}

bool IMGetMsgByIdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Message.IMGetMsgByIdReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.SessionType session_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 session_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 msg_id_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_msg_id_list())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(32u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_msg_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMGetMsgByIdReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMGetMsgByIdReq)
  return false;
#undef DO_
}

void IMGetMsgByIdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMGetMsgByIdReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->session_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // uint32 session_id = 3;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // repeated uint32 msg_id_list = 4;
  if (this->msg_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_msg_id_list_cached_byte_size_);
  }
  for (int i = 0, n = this->msg_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->msg_id_list(i), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Message.IMGetMsgByIdReq)
}

size_t IMGetMsgByIdReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMGetMsgByIdReq)
  size_t total_size = 0;

  // repeated uint32 msg_id_list = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->msg_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _msg_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
  }

  // uint32 session_id = 3;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGetMsgByIdReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGetMsgByIdReq*>(&from));
}

void IMGetMsgByIdReq::MergeFrom(const IMGetMsgByIdReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMGetMsgByIdReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_id_list_.MergeFrom(from.msg_id_list_);
  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.session_type() != 0) {
    set_session_type(from.session_type());
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
}

void IMGetMsgByIdReq::CopyFrom(const IMGetMsgByIdReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMGetMsgByIdReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetMsgByIdReq::IsInitialized() const {
  return true;
}

void IMGetMsgByIdReq::Swap(IMGetMsgByIdReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMGetMsgByIdReq::InternalSwap(IMGetMsgByIdReq* other) {
  msg_id_list_.InternalSwap(&other->msg_id_list_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(user_id_, other->user_id_);
  std::swap(session_type_, other->session_type_);
  std::swap(session_id_, other->session_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMGetMsgByIdReq::GetTypeName() const {
  return "IM.Message.IMGetMsgByIdReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMGetMsgByIdReq

// uint32 user_id = 1;
void IMGetMsgByIdReq::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMGetMsgByIdReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgByIdReq.user_id)
  return user_id_;
}
void IMGetMsgByIdReq::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgByIdReq.user_id)
}

// .IM.BaseDefine.SessionType session_type = 2;
void IMGetMsgByIdReq::clear_session_type() {
  session_type_ = 0;
}
::IM::BaseDefine::SessionType IMGetMsgByIdReq::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgByIdReq.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
void IMGetMsgByIdReq::set_session_type(::IM::BaseDefine::SessionType value) {
  
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgByIdReq.session_type)
}

// uint32 session_id = 3;
void IMGetMsgByIdReq::clear_session_id() {
  session_id_ = 0u;
}
::google::protobuf::uint32 IMGetMsgByIdReq::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgByIdReq.session_id)
  return session_id_;
}
void IMGetMsgByIdReq::set_session_id(::google::protobuf::uint32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgByIdReq.session_id)
}

// repeated uint32 msg_id_list = 4;
int IMGetMsgByIdReq::msg_id_list_size() const {
  return msg_id_list_.size();
}
void IMGetMsgByIdReq::clear_msg_id_list() {
  msg_id_list_.Clear();
}
::google::protobuf::uint32 IMGetMsgByIdReq::msg_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgByIdReq.msg_id_list)
  return msg_id_list_.Get(index);
}
void IMGetMsgByIdReq::set_msg_id_list(int index, ::google::protobuf::uint32 value) {
  msg_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgByIdReq.msg_id_list)
}
void IMGetMsgByIdReq::add_msg_id_list(::google::protobuf::uint32 value) {
  msg_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Message.IMGetMsgByIdReq.msg_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGetMsgByIdReq::msg_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Message.IMGetMsgByIdReq.msg_id_list)
  return msg_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGetMsgByIdReq::mutable_msg_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Message.IMGetMsgByIdReq.msg_id_list)
  return &msg_id_list_;
}

// bytes attach_data = 20;
void IMGetMsgByIdReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMGetMsgByIdReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgByIdReq.attach_data)
  return attach_data_.GetNoArena();
}
void IMGetMsgByIdReq::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgByIdReq.attach_data)
}
#if LANG_CXX11
void IMGetMsgByIdReq::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Message.IMGetMsgByIdReq.attach_data)
}
#endif
void IMGetMsgByIdReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Message.IMGetMsgByIdReq.attach_data)
}
void IMGetMsgByIdReq::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Message.IMGetMsgByIdReq.attach_data)
}
::std::string* IMGetMsgByIdReq::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Message.IMGetMsgByIdReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMGetMsgByIdReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMGetMsgByIdReq.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMGetMsgByIdReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMGetMsgByIdReq.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMGetMsgByIdRsp::kUserIdFieldNumber;
const int IMGetMsgByIdRsp::kSessionTypeFieldNumber;
const int IMGetMsgByIdRsp::kSessionIdFieldNumber;
const int IMGetMsgByIdRsp::kMsgListFieldNumber;
const int IMGetMsgByIdRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMGetMsgByIdRsp::IMGetMsgByIdRsp()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMGetMsgByIdRsp)
}
IMGetMsgByIdRsp::IMGetMsgByIdRsp(const IMGetMsgByIdRsp& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      msg_list_(from.msg_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(session_id_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMGetMsgByIdRsp)
}

void IMGetMsgByIdRsp::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(session_id_));
  _cached_size_ = 0;
}

IMGetMsgByIdRsp::~IMGetMsgByIdRsp() {
  // @@protoc_insertion_point(destructor:IM.Message.IMGetMsgByIdRsp)
  SharedDtor();
}

void IMGetMsgByIdRsp::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMGetMsgByIdRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMGetMsgByIdRsp& IMGetMsgByIdRsp::default_instance() {
  protobuf_IM_2eMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMGetMsgByIdRsp* IMGetMsgByIdRsp::New(::google::protobuf::Arena* arena) const {
  IMGetMsgByIdRsp* n = new IMGetMsgByIdRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMGetMsgByIdRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMGetMsgByIdRsp)
  msg_list_.Clear();
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(session_id_));
}

bool IMGetMsgByIdRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Message.IMGetMsgByIdRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.SessionType session_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 session_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IM.BaseDefine.MsgInfo msg_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msg_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMGetMsgByIdRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMGetMsgByIdRsp)
  return false;
#undef DO_
}

void IMGetMsgByIdRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMGetMsgByIdRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->session_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // uint32 session_id = 3;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // repeated .IM.BaseDefine.MsgInfo msg_list = 4;
  for (unsigned int i = 0, n = this->msg_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->msg_list(i), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Message.IMGetMsgByIdRsp)
}

size_t IMGetMsgByIdRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMGetMsgByIdRsp)
  size_t total_size = 0;

  // repeated .IM.BaseDefine.MsgInfo msg_list = 4;
  {
    unsigned int count = this->msg_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_list(i));
    }
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
  }

  // uint32 session_id = 3;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGetMsgByIdRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMGetMsgByIdRsp*>(&from));
}

void IMGetMsgByIdRsp::MergeFrom(const IMGetMsgByIdRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMGetMsgByIdRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_list_.MergeFrom(from.msg_list_);
  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.session_type() != 0) {
    set_session_type(from.session_type());
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
}

void IMGetMsgByIdRsp::CopyFrom(const IMGetMsgByIdRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMGetMsgByIdRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetMsgByIdRsp::IsInitialized() const {
  return true;
}

void IMGetMsgByIdRsp::Swap(IMGetMsgByIdRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMGetMsgByIdRsp::InternalSwap(IMGetMsgByIdRsp* other) {
  msg_list_.InternalSwap(&other->msg_list_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(user_id_, other->user_id_);
  std::swap(session_type_, other->session_type_);
  std::swap(session_id_, other->session_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMGetMsgByIdRsp::GetTypeName() const {
  return "IM.Message.IMGetMsgByIdRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMGetMsgByIdRsp

// uint32 user_id = 1;
void IMGetMsgByIdRsp::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMGetMsgByIdRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgByIdRsp.user_id)
  return user_id_;
}
void IMGetMsgByIdRsp::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgByIdRsp.user_id)
}

// .IM.BaseDefine.SessionType session_type = 2;
void IMGetMsgByIdRsp::clear_session_type() {
  session_type_ = 0;
}
::IM::BaseDefine::SessionType IMGetMsgByIdRsp::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgByIdRsp.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
void IMGetMsgByIdRsp::set_session_type(::IM::BaseDefine::SessionType value) {
  
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgByIdRsp.session_type)
}

// uint32 session_id = 3;
void IMGetMsgByIdRsp::clear_session_id() {
  session_id_ = 0u;
}
::google::protobuf::uint32 IMGetMsgByIdRsp::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgByIdRsp.session_id)
  return session_id_;
}
void IMGetMsgByIdRsp::set_session_id(::google::protobuf::uint32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgByIdRsp.session_id)
}

// repeated .IM.BaseDefine.MsgInfo msg_list = 4;
int IMGetMsgByIdRsp::msg_list_size() const {
  return msg_list_.size();
}
void IMGetMsgByIdRsp::clear_msg_list() {
  msg_list_.Clear();
}
const ::IM::BaseDefine::MsgInfo& IMGetMsgByIdRsp::msg_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgByIdRsp.msg_list)
  return msg_list_.Get(index);
}
::IM::BaseDefine::MsgInfo* IMGetMsgByIdRsp::mutable_msg_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Message.IMGetMsgByIdRsp.msg_list)
  return msg_list_.Mutable(index);
}
::IM::BaseDefine::MsgInfo* IMGetMsgByIdRsp::add_msg_list() {
  // @@protoc_insertion_point(field_add:IM.Message.IMGetMsgByIdRsp.msg_list)
  return msg_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::MsgInfo >*
IMGetMsgByIdRsp::mutable_msg_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Message.IMGetMsgByIdRsp.msg_list)
  return &msg_list_;
}
const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::MsgInfo >&
IMGetMsgByIdRsp::msg_list() const {
  // @@protoc_insertion_point(field_list:IM.Message.IMGetMsgByIdRsp.msg_list)
  return msg_list_;
}

// bytes attach_data = 20;
void IMGetMsgByIdRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMGetMsgByIdRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Message.IMGetMsgByIdRsp.attach_data)
  return attach_data_.GetNoArena();
}
void IMGetMsgByIdRsp::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Message.IMGetMsgByIdRsp.attach_data)
}
#if LANG_CXX11
void IMGetMsgByIdRsp::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Message.IMGetMsgByIdRsp.attach_data)
}
#endif
void IMGetMsgByIdRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Message.IMGetMsgByIdRsp.attach_data)
}
void IMGetMsgByIdRsp::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Message.IMGetMsgByIdRsp.attach_data)
}
::std::string* IMGetMsgByIdRsp::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Message.IMGetMsgByIdRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMGetMsgByIdRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Message.IMGetMsgByIdRsp.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMGetMsgByIdRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Message.IMGetMsgByIdRsp.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace IM

// @@protoc_insertion_point(global_scope)
