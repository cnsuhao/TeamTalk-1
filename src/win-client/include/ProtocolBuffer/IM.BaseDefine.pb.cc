// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.BaseDefine.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IM.BaseDefine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace BaseDefine {
class IpAddrDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IpAddr> {
} _IpAddr_default_instance_;
class UserInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserInfo> {
} _UserInfo_default_instance_;
class ContactSessionInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ContactSessionInfo> {
} _ContactSessionInfo_default_instance_;
class UserStatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserStat> {
} _UserStat_default_instance_;
class ServerUserStatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServerUserStat> {
} _ServerUserStat_default_instance_;
class UnreadInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UnreadInfo> {
} _UnreadInfo_default_instance_;
class MsgInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MsgInfo> {
} _MsgInfo_default_instance_;
class GroupVersionInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GroupVersionInfo> {
} _GroupVersionInfo_default_instance_;
class GroupInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GroupInfo> {
} _GroupInfo_default_instance_;
class UserTokenInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserTokenInfo> {
} _UserTokenInfo_default_instance_;
class PushResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PushResult> {
} _PushResult_default_instance_;
class ShieldStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ShieldStatus> {
} _ShieldStatus_default_instance_;
class OfflineFileInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OfflineFileInfo> {
} _OfflineFileInfo_default_instance_;
class DepartInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DepartInfo> {
} _DepartInfo_default_instance_;
class PushShieldStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PushShieldStatus> {
} _PushShieldStatus_default_instance_;

namespace protobuf_IM_2eBaseDefine_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _IpAddr_default_instance_.Shutdown();
  _UserInfo_default_instance_.Shutdown();
  _ContactSessionInfo_default_instance_.Shutdown();
  _UserStat_default_instance_.Shutdown();
  _ServerUserStat_default_instance_.Shutdown();
  _UnreadInfo_default_instance_.Shutdown();
  _MsgInfo_default_instance_.Shutdown();
  _GroupVersionInfo_default_instance_.Shutdown();
  _GroupInfo_default_instance_.Shutdown();
  _UserTokenInfo_default_instance_.Shutdown();
  _PushResult_default_instance_.Shutdown();
  _ShieldStatus_default_instance_.Shutdown();
  _OfflineFileInfo_default_instance_.Shutdown();
  _DepartInfo_default_instance_.Shutdown();
  _PushShieldStatus_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _IpAddr_default_instance_.DefaultConstruct();
  _UserInfo_default_instance_.DefaultConstruct();
  _ContactSessionInfo_default_instance_.DefaultConstruct();
  _UserStat_default_instance_.DefaultConstruct();
  _ServerUserStat_default_instance_.DefaultConstruct();
  _UnreadInfo_default_instance_.DefaultConstruct();
  _MsgInfo_default_instance_.DefaultConstruct();
  _GroupVersionInfo_default_instance_.DefaultConstruct();
  _GroupInfo_default_instance_.DefaultConstruct();
  _UserTokenInfo_default_instance_.DefaultConstruct();
  _PushResult_default_instance_.DefaultConstruct();
  _ShieldStatus_default_instance_.DefaultConstruct();
  _OfflineFileInfo_default_instance_.DefaultConstruct();
  _DepartInfo_default_instance_.DefaultConstruct();
  _PushShieldStatus_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_IM_2eBaseDefine_2eproto

bool ServiceID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

bool LoginCmdID_IsValid(int value) {
  switch (value) {
    case 0:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
      return true;
    default:
      return false;
  }
}

bool BuddyListCmdID_IsValid(int value) {
  switch (value) {
    case 0:
    case 513:
    case 514:
    case 515:
    case 516:
    case 517:
    case 518:
    case 519:
    case 520:
    case 521:
    case 522:
    case 523:
    case 524:
    case 525:
    case 526:
    case 527:
    case 528:
    case 529:
    case 530:
    case 531:
    case 532:
    case 533:
      return true;
    default:
      return false;
  }
}

bool MessageCmdID_IsValid(int value) {
  switch (value) {
    case 0:
    case 769:
    case 770:
    case 771:
    case 772:
    case 773:
    case 774:
    case 775:
    case 776:
    case 777:
    case 778:
    case 779:
    case 780:
    case 781:
    case 782:
      return true;
    default:
      return false;
  }
}

bool GroupCmdID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1029:
    case 1030:
    case 1031:
    case 1032:
    case 1033:
    case 1034:
    case 1035:
      return true;
    default:
      return false;
  }
}

bool FileCmdID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1281:
    case 1282:
    case 1283:
    case 1284:
    case 1285:
    case 1286:
    case 1287:
    case 1288:
    case 1289:
    case 1290:
    case 1291:
    case 1292:
      return true;
    default:
      return false;
  }
}

bool SwitchServiceCmdID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1537:
      return true;
    default:
      return false;
  }
}

bool OtherCmdID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1793:
    case 1794:
    case 1795:
    case 1796:
    case 1797:
    case 1798:
    case 1799:
    case 1800:
    case 1801:
    case 1802:
    case 1803:
    case 1805:
    case 1806:
    case 1807:
    case 1808:
    case 1809:
    case 1810:
    case 1841:
    case 1842:
    case 1843:
    case 1844:
      return true;
    default:
      return false;
  }
}

bool ResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

bool KickReasonType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool OnlineListType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

bool UserStatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool SessionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

bool ClientType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

bool GroupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool GroupModifyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool TransferFileType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool ClientFileState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool ClientFileRole_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool FileServerError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

bool SessionStatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool DepartmentStatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IpAddr::kIpFieldNumber;
const int IpAddr::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IpAddr::IpAddr()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.BaseDefine.IpAddr)
}
IpAddr::IpAddr(const IpAddr& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.IpAddr)
}

void IpAddr::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  _cached_size_ = 0;
}

IpAddr::~IpAddr() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.IpAddr)
  SharedDtor();
}

void IpAddr::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IpAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IpAddr& IpAddr::default_instance() {
  protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  return *internal_default_instance();
}

IpAddr* IpAddr::New(::google::protobuf::Arena* arena) const {
  IpAddr* n = new IpAddr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IpAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.IpAddr)
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

bool IpAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.BaseDefine.IpAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.BaseDefine.IpAddr.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.BaseDefine.IpAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.BaseDefine.IpAddr)
  return false;
#undef DO_
}

void IpAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.BaseDefine.IpAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.IpAddr.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.BaseDefine.IpAddr)
}

size_t IpAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.IpAddr)
  size_t total_size = 0;

  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IpAddr::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IpAddr*>(&from));
}

void IpAddr::MergeFrom(const IpAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.IpAddr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void IpAddr::CopyFrom(const IpAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.IpAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpAddr::IsInitialized() const {
  return true;
}

void IpAddr::Swap(IpAddr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IpAddr::InternalSwap(IpAddr* other) {
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IpAddr::GetTypeName() const {
  return "IM.BaseDefine.IpAddr";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IpAddr

// string ip = 1;
void IpAddr::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IpAddr::ip() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.IpAddr.ip)
  return ip_.GetNoArena();
}
void IpAddr::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.IpAddr.ip)
}
#if LANG_CXX11
void IpAddr::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.IpAddr.ip)
}
#endif
void IpAddr::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.IpAddr.ip)
}
void IpAddr::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.IpAddr.ip)
}
::std::string* IpAddr::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.IpAddr.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IpAddr::release_ip() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.IpAddr.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IpAddr::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.IpAddr.ip)
}

// uint32 port = 2;
void IpAddr::clear_port() {
  port_ = 0u;
}
::google::protobuf::uint32 IpAddr::port() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.IpAddr.port)
  return port_;
}
void IpAddr::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.IpAddr.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserInfo::kUserIdFieldNumber;
const int UserInfo::kUserGenderFieldNumber;
const int UserInfo::kUserNickNameFieldNumber;
const int UserInfo::kAvatarUrlFieldNumber;
const int UserInfo::kDepartmentIdFieldNumber;
const int UserInfo::kEmailFieldNumber;
const int UserInfo::kUserRealNameFieldNumber;
const int UserInfo::kUserTelFieldNumber;
const int UserInfo::kUserDomainFieldNumber;
const int UserInfo::kStatusFieldNumber;
const int UserInfo::kSignInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserInfo::UserInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.BaseDefine.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_nick_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_nick_name().size() > 0) {
    user_nick_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_nick_name_);
  }
  avatar_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.avatar_url().size() > 0) {
    avatar_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.email().size() > 0) {
    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  user_real_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_real_name().size() > 0) {
    user_real_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_real_name_);
  }
  user_tel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_tel().size() > 0) {
    user_tel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_tel_);
  }
  user_domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_domain().size() > 0) {
    user_domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_domain_);
  }
  sign_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sign_info().size() > 0) {
    sign_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_info_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.UserInfo)
}

void UserInfo::SharedCtor() {
  user_nick_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_real_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_tel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(status_));
  _cached_size_ = 0;
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  user_nick_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_real_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_tel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserInfo& UserInfo::default_instance() {
  protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserInfo* UserInfo::New(::google::protobuf::Arena* arena) const {
  UserInfo* n = new UserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.UserInfo)
  user_nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_real_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_tel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(status_));
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.BaseDefine.UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 user_gender = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_gender_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_nick_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_nick_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_nick_name().data(), this->user_nick_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.BaseDefine.UserInfo.user_nick_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string avatar_url = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->avatar_url().data(), this->avatar_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.BaseDefine.UserInfo.avatar_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 department_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &department_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string email = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.BaseDefine.UserInfo.email"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_real_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_real_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_real_name().data(), this->user_real_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.BaseDefine.UserInfo.user_real_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_tel = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_tel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_tel().data(), this->user_tel().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.BaseDefine.UserInfo.user_tel"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_domain = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_domain().data(), this->user_domain().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.BaseDefine.UserInfo.user_domain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 status = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sign_info = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sign_info().data(), this->sign_info().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.BaseDefine.UserInfo.sign_info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.BaseDefine.UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.BaseDefine.UserInfo)
  return false;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.BaseDefine.UserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // uint32 user_gender = 2;
  if (this->user_gender() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_gender(), output);
  }

  // string user_nick_name = 3;
  if (this->user_nick_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_nick_name().data(), this->user_nick_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.UserInfo.user_nick_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_nick_name(), output);
  }

  // string avatar_url = 4;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.UserInfo.avatar_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->avatar_url(), output);
  }

  // uint32 department_id = 5;
  if (this->department_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->department_id(), output);
  }

  // string email = 6;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.UserInfo.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->email(), output);
  }

  // string user_real_name = 7;
  if (this->user_real_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_real_name().data(), this->user_real_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.UserInfo.user_real_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->user_real_name(), output);
  }

  // string user_tel = 8;
  if (this->user_tel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_tel().data(), this->user_tel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.UserInfo.user_tel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->user_tel(), output);
  }

  // string user_domain = 9;
  if (this->user_domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_domain().data(), this->user_domain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.UserInfo.user_domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->user_domain(), output);
  }

  // uint32 status = 10;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->status(), output);
  }

  // string sign_info = 11;
  if (this->sign_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sign_info().data(), this->sign_info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.UserInfo.sign_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->sign_info(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.BaseDefine.UserInfo)
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.UserInfo)
  size_t total_size = 0;

  // string user_nick_name = 3;
  if (this->user_nick_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_nick_name());
  }

  // string avatar_url = 4;
  if (this->avatar_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->avatar_url());
  }

  // string email = 6;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  // string user_real_name = 7;
  if (this->user_real_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_real_name());
  }

  // string user_tel = 8;
  if (this->user_tel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_tel());
  }

  // string user_domain = 9;
  if (this->user_domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_domain());
  }

  // string sign_info = 11;
  if (this->sign_info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sign_info());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // uint32 user_gender = 2;
  if (this->user_gender() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_gender());
  }

  // uint32 department_id = 5;
  if (this->department_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->department_id());
  }

  // uint32 status = 10;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserInfo*>(&from));
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_nick_name().size() > 0) {

    user_nick_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_nick_name_);
  }
  if (from.avatar_url().size() > 0) {

    avatar_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.user_real_name().size() > 0) {

    user_real_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_real_name_);
  }
  if (from.user_tel().size() > 0) {

    user_tel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_tel_);
  }
  if (from.user_domain().size() > 0) {

    user_domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_domain_);
  }
  if (from.sign_info().size() > 0) {

    sign_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_info_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.user_gender() != 0) {
    set_user_gender(from.user_gender());
  }
  if (from.department_id() != 0) {
    set_department_id(from.department_id());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserInfo::InternalSwap(UserInfo* other) {
  user_nick_name_.Swap(&other->user_nick_name_);
  avatar_url_.Swap(&other->avatar_url_);
  email_.Swap(&other->email_);
  user_real_name_.Swap(&other->user_real_name_);
  user_tel_.Swap(&other->user_tel_);
  user_domain_.Swap(&other->user_domain_);
  sign_info_.Swap(&other->sign_info_);
  std::swap(user_id_, other->user_id_);
  std::swap(user_gender_, other->user_gender_);
  std::swap(department_id_, other->department_id_);
  std::swap(status_, other->status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserInfo::GetTypeName() const {
  return "IM.BaseDefine.UserInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserInfo

// uint32 user_id = 1;
void UserInfo::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 UserInfo::user_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.user_id)
  return user_id_;
}
void UserInfo::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.user_id)
}

// uint32 user_gender = 2;
void UserInfo::clear_user_gender() {
  user_gender_ = 0u;
}
::google::protobuf::uint32 UserInfo::user_gender() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.user_gender)
  return user_gender_;
}
void UserInfo::set_user_gender(::google::protobuf::uint32 value) {
  
  user_gender_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.user_gender)
}

// string user_nick_name = 3;
void UserInfo::clear_user_nick_name() {
  user_nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserInfo::user_nick_name() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.user_nick_name)
  return user_nick_name_.GetNoArena();
}
void UserInfo::set_user_nick_name(const ::std::string& value) {
  
  user_nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.user_nick_name)
}
#if LANG_CXX11
void UserInfo::set_user_nick_name(::std::string&& value) {
  
  user_nick_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.UserInfo.user_nick_name)
}
#endif
void UserInfo::set_user_nick_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UserInfo.user_nick_name)
}
void UserInfo::set_user_nick_name(const char* value, size_t size) {
  
  user_nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UserInfo.user_nick_name)
}
::std::string* UserInfo::mutable_user_nick_name() {
  
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.user_nick_name)
  return user_nick_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfo::release_user_nick_name() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.user_nick_name)
  
  return user_nick_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfo::set_allocated_user_nick_name(::std::string* user_nick_name) {
  if (user_nick_name != NULL) {
    
  } else {
    
  }
  user_nick_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_nick_name);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.user_nick_name)
}

// string avatar_url = 4;
void UserInfo::clear_avatar_url() {
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserInfo::avatar_url() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.avatar_url)
  return avatar_url_.GetNoArena();
}
void UserInfo::set_avatar_url(const ::std::string& value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.avatar_url)
}
#if LANG_CXX11
void UserInfo::set_avatar_url(::std::string&& value) {
  
  avatar_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.UserInfo.avatar_url)
}
#endif
void UserInfo::set_avatar_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UserInfo.avatar_url)
}
void UserInfo::set_avatar_url(const char* value, size_t size) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UserInfo.avatar_url)
}
::std::string* UserInfo::mutable_avatar_url() {
  
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.avatar_url)
  return avatar_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfo::release_avatar_url() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.avatar_url)
  
  return avatar_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfo::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url != NULL) {
    
  } else {
    
  }
  avatar_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar_url);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.avatar_url)
}

// uint32 department_id = 5;
void UserInfo::clear_department_id() {
  department_id_ = 0u;
}
::google::protobuf::uint32 UserInfo::department_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.department_id)
  return department_id_;
}
void UserInfo::set_department_id(::google::protobuf::uint32 value) {
  
  department_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.department_id)
}

// string email = 6;
void UserInfo::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserInfo::email() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.email)
  return email_.GetNoArena();
}
void UserInfo::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.email)
}
#if LANG_CXX11
void UserInfo::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.UserInfo.email)
}
#endif
void UserInfo::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UserInfo.email)
}
void UserInfo::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UserInfo.email)
}
::std::string* UserInfo::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfo::release_email() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfo::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.email)
}

// string user_real_name = 7;
void UserInfo::clear_user_real_name() {
  user_real_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserInfo::user_real_name() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.user_real_name)
  return user_real_name_.GetNoArena();
}
void UserInfo::set_user_real_name(const ::std::string& value) {
  
  user_real_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.user_real_name)
}
#if LANG_CXX11
void UserInfo::set_user_real_name(::std::string&& value) {
  
  user_real_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.UserInfo.user_real_name)
}
#endif
void UserInfo::set_user_real_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_real_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UserInfo.user_real_name)
}
void UserInfo::set_user_real_name(const char* value, size_t size) {
  
  user_real_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UserInfo.user_real_name)
}
::std::string* UserInfo::mutable_user_real_name() {
  
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.user_real_name)
  return user_real_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfo::release_user_real_name() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.user_real_name)
  
  return user_real_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfo::set_allocated_user_real_name(::std::string* user_real_name) {
  if (user_real_name != NULL) {
    
  } else {
    
  }
  user_real_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_real_name);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.user_real_name)
}

// string user_tel = 8;
void UserInfo::clear_user_tel() {
  user_tel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserInfo::user_tel() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.user_tel)
  return user_tel_.GetNoArena();
}
void UserInfo::set_user_tel(const ::std::string& value) {
  
  user_tel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.user_tel)
}
#if LANG_CXX11
void UserInfo::set_user_tel(::std::string&& value) {
  
  user_tel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.UserInfo.user_tel)
}
#endif
void UserInfo::set_user_tel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_tel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UserInfo.user_tel)
}
void UserInfo::set_user_tel(const char* value, size_t size) {
  
  user_tel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UserInfo.user_tel)
}
::std::string* UserInfo::mutable_user_tel() {
  
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.user_tel)
  return user_tel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfo::release_user_tel() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.user_tel)
  
  return user_tel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfo::set_allocated_user_tel(::std::string* user_tel) {
  if (user_tel != NULL) {
    
  } else {
    
  }
  user_tel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_tel);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.user_tel)
}

// string user_domain = 9;
void UserInfo::clear_user_domain() {
  user_domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserInfo::user_domain() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.user_domain)
  return user_domain_.GetNoArena();
}
void UserInfo::set_user_domain(const ::std::string& value) {
  
  user_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.user_domain)
}
#if LANG_CXX11
void UserInfo::set_user_domain(::std::string&& value) {
  
  user_domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.UserInfo.user_domain)
}
#endif
void UserInfo::set_user_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UserInfo.user_domain)
}
void UserInfo::set_user_domain(const char* value, size_t size) {
  
  user_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UserInfo.user_domain)
}
::std::string* UserInfo::mutable_user_domain() {
  
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.user_domain)
  return user_domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfo::release_user_domain() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.user_domain)
  
  return user_domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfo::set_allocated_user_domain(::std::string* user_domain) {
  if (user_domain != NULL) {
    
  } else {
    
  }
  user_domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_domain);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.user_domain)
}

// uint32 status = 10;
void UserInfo::clear_status() {
  status_ = 0u;
}
::google::protobuf::uint32 UserInfo::status() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.status)
  return status_;
}
void UserInfo::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.status)
}

// string sign_info = 11;
void UserInfo::clear_sign_info() {
  sign_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserInfo::sign_info() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.sign_info)
  return sign_info_.GetNoArena();
}
void UserInfo::set_sign_info(const ::std::string& value) {
  
  sign_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.sign_info)
}
#if LANG_CXX11
void UserInfo::set_sign_info(::std::string&& value) {
  
  sign_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.UserInfo.sign_info)
}
#endif
void UserInfo::set_sign_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sign_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UserInfo.sign_info)
}
void UserInfo::set_sign_info(const char* value, size_t size) {
  
  sign_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UserInfo.sign_info)
}
::std::string* UserInfo::mutable_sign_info() {
  
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.sign_info)
  return sign_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfo::release_sign_info() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.sign_info)
  
  return sign_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfo::set_allocated_sign_info(::std::string* sign_info) {
  if (sign_info != NULL) {
    
  } else {
    
  }
  sign_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign_info);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.sign_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContactSessionInfo::kSessionIdFieldNumber;
const int ContactSessionInfo::kSessionTypeFieldNumber;
const int ContactSessionInfo::kSessionStatusFieldNumber;
const int ContactSessionInfo::kUpdatedTimeFieldNumber;
const int ContactSessionInfo::kLatestMsgIdFieldNumber;
const int ContactSessionInfo::kLatestMsgDataFieldNumber;
const int ContactSessionInfo::kLatestMsgTypeFieldNumber;
const int ContactSessionInfo::kLatestMsgFromUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContactSessionInfo::ContactSessionInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.BaseDefine.ContactSessionInfo)
}
ContactSessionInfo::ContactSessionInfo(const ContactSessionInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  latest_msg_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.latest_msg_data().size() > 0) {
    latest_msg_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latest_msg_data_);
  }
  ::memcpy(&session_id_, &from.session_id_,
    reinterpret_cast<char*>(&latest_msg_from_user_id_) -
    reinterpret_cast<char*>(&session_id_) + sizeof(latest_msg_from_user_id_));
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.ContactSessionInfo)
}

void ContactSessionInfo::SharedCtor() {
  latest_msg_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_id_, 0, reinterpret_cast<char*>(&latest_msg_from_user_id_) -
    reinterpret_cast<char*>(&session_id_) + sizeof(latest_msg_from_user_id_));
  _cached_size_ = 0;
}

ContactSessionInfo::~ContactSessionInfo() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.ContactSessionInfo)
  SharedDtor();
}

void ContactSessionInfo::SharedDtor() {
  latest_msg_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContactSessionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ContactSessionInfo& ContactSessionInfo::default_instance() {
  protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  return *internal_default_instance();
}

ContactSessionInfo* ContactSessionInfo::New(::google::protobuf::Arena* arena) const {
  ContactSessionInfo* n = new ContactSessionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContactSessionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.ContactSessionInfo)
  latest_msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_id_, 0, reinterpret_cast<char*>(&latest_msg_from_user_id_) -
    reinterpret_cast<char*>(&session_id_) + sizeof(latest_msg_from_user_id_));
}

bool ContactSessionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.BaseDefine.ContactSessionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 session_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.SessionType session_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.SessionStatusType session_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_session_status(static_cast< ::IM::BaseDefine::SessionStatusType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 updated_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updated_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 latest_msg_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes latest_msg_data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_latest_msg_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.MsgType latest_msg_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_latest_msg_type(static_cast< ::IM::BaseDefine::MsgType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 latest_msg_from_user_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_msg_from_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.BaseDefine.ContactSessionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.BaseDefine.ContactSessionInfo)
  return false;
#undef DO_
}

void ContactSessionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.BaseDefine.ContactSessionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 session_id = 1;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session_id(), output);
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->session_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // .IM.BaseDefine.SessionStatusType session_status = 3;
  if (this->session_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->session_status(), output);
  }

  // uint32 updated_time = 4;
  if (this->updated_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->updated_time(), output);
  }

  // uint32 latest_msg_id = 5;
  if (this->latest_msg_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->latest_msg_id(), output);
  }

  // bytes latest_msg_data = 6;
  if (this->latest_msg_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->latest_msg_data(), output);
  }

  // .IM.BaseDefine.MsgType latest_msg_type = 7;
  if (this->latest_msg_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->latest_msg_type(), output);
  }

  // uint32 latest_msg_from_user_id = 8;
  if (this->latest_msg_from_user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->latest_msg_from_user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.BaseDefine.ContactSessionInfo)
}

size_t ContactSessionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.ContactSessionInfo)
  size_t total_size = 0;

  // bytes latest_msg_data = 6;
  if (this->latest_msg_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->latest_msg_data());
  }

  // uint32 session_id = 1;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
  }

  // .IM.BaseDefine.SessionStatusType session_status = 3;
  if (this->session_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_status());
  }

  // uint32 updated_time = 4;
  if (this->updated_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updated_time());
  }

  // uint32 latest_msg_id = 5;
  if (this->latest_msg_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latest_msg_id());
  }

  // .IM.BaseDefine.MsgType latest_msg_type = 7;
  if (this->latest_msg_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->latest_msg_type());
  }

  // uint32 latest_msg_from_user_id = 8;
  if (this->latest_msg_from_user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latest_msg_from_user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactSessionInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ContactSessionInfo*>(&from));
}

void ContactSessionInfo::MergeFrom(const ContactSessionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.ContactSessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.latest_msg_data().size() > 0) {

    latest_msg_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latest_msg_data_);
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
  if (from.session_type() != 0) {
    set_session_type(from.session_type());
  }
  if (from.session_status() != 0) {
    set_session_status(from.session_status());
  }
  if (from.updated_time() != 0) {
    set_updated_time(from.updated_time());
  }
  if (from.latest_msg_id() != 0) {
    set_latest_msg_id(from.latest_msg_id());
  }
  if (from.latest_msg_type() != 0) {
    set_latest_msg_type(from.latest_msg_type());
  }
  if (from.latest_msg_from_user_id() != 0) {
    set_latest_msg_from_user_id(from.latest_msg_from_user_id());
  }
}

void ContactSessionInfo::CopyFrom(const ContactSessionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.ContactSessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactSessionInfo::IsInitialized() const {
  return true;
}

void ContactSessionInfo::Swap(ContactSessionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContactSessionInfo::InternalSwap(ContactSessionInfo* other) {
  latest_msg_data_.Swap(&other->latest_msg_data_);
  std::swap(session_id_, other->session_id_);
  std::swap(session_type_, other->session_type_);
  std::swap(session_status_, other->session_status_);
  std::swap(updated_time_, other->updated_time_);
  std::swap(latest_msg_id_, other->latest_msg_id_);
  std::swap(latest_msg_type_, other->latest_msg_type_);
  std::swap(latest_msg_from_user_id_, other->latest_msg_from_user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ContactSessionInfo::GetTypeName() const {
  return "IM.BaseDefine.ContactSessionInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContactSessionInfo

// uint32 session_id = 1;
void ContactSessionInfo::clear_session_id() {
  session_id_ = 0u;
}
::google::protobuf::uint32 ContactSessionInfo::session_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ContactSessionInfo.session_id)
  return session_id_;
}
void ContactSessionInfo::set_session_id(::google::protobuf::uint32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ContactSessionInfo.session_id)
}

// .IM.BaseDefine.SessionType session_type = 2;
void ContactSessionInfo::clear_session_type() {
  session_type_ = 0;
}
::IM::BaseDefine::SessionType ContactSessionInfo::session_type() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ContactSessionInfo.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
void ContactSessionInfo::set_session_type(::IM::BaseDefine::SessionType value) {
  
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ContactSessionInfo.session_type)
}

// .IM.BaseDefine.SessionStatusType session_status = 3;
void ContactSessionInfo::clear_session_status() {
  session_status_ = 0;
}
::IM::BaseDefine::SessionStatusType ContactSessionInfo::session_status() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ContactSessionInfo.session_status)
  return static_cast< ::IM::BaseDefine::SessionStatusType >(session_status_);
}
void ContactSessionInfo::set_session_status(::IM::BaseDefine::SessionStatusType value) {
  
  session_status_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ContactSessionInfo.session_status)
}

// uint32 updated_time = 4;
void ContactSessionInfo::clear_updated_time() {
  updated_time_ = 0u;
}
::google::protobuf::uint32 ContactSessionInfo::updated_time() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ContactSessionInfo.updated_time)
  return updated_time_;
}
void ContactSessionInfo::set_updated_time(::google::protobuf::uint32 value) {
  
  updated_time_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ContactSessionInfo.updated_time)
}

// uint32 latest_msg_id = 5;
void ContactSessionInfo::clear_latest_msg_id() {
  latest_msg_id_ = 0u;
}
::google::protobuf::uint32 ContactSessionInfo::latest_msg_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ContactSessionInfo.latest_msg_id)
  return latest_msg_id_;
}
void ContactSessionInfo::set_latest_msg_id(::google::protobuf::uint32 value) {
  
  latest_msg_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ContactSessionInfo.latest_msg_id)
}

// bytes latest_msg_data = 6;
void ContactSessionInfo::clear_latest_msg_data() {
  latest_msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ContactSessionInfo::latest_msg_data() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ContactSessionInfo.latest_msg_data)
  return latest_msg_data_.GetNoArena();
}
void ContactSessionInfo::set_latest_msg_data(const ::std::string& value) {
  
  latest_msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ContactSessionInfo.latest_msg_data)
}
#if LANG_CXX11
void ContactSessionInfo::set_latest_msg_data(::std::string&& value) {
  
  latest_msg_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.ContactSessionInfo.latest_msg_data)
}
#endif
void ContactSessionInfo::set_latest_msg_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  latest_msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.ContactSessionInfo.latest_msg_data)
}
void ContactSessionInfo::set_latest_msg_data(const void* value, size_t size) {
  
  latest_msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.ContactSessionInfo.latest_msg_data)
}
::std::string* ContactSessionInfo::mutable_latest_msg_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.ContactSessionInfo.latest_msg_data)
  return latest_msg_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContactSessionInfo::release_latest_msg_data() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.ContactSessionInfo.latest_msg_data)
  
  return latest_msg_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContactSessionInfo::set_allocated_latest_msg_data(::std::string* latest_msg_data) {
  if (latest_msg_data != NULL) {
    
  } else {
    
  }
  latest_msg_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), latest_msg_data);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.ContactSessionInfo.latest_msg_data)
}

// .IM.BaseDefine.MsgType latest_msg_type = 7;
void ContactSessionInfo::clear_latest_msg_type() {
  latest_msg_type_ = 0;
}
::IM::BaseDefine::MsgType ContactSessionInfo::latest_msg_type() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ContactSessionInfo.latest_msg_type)
  return static_cast< ::IM::BaseDefine::MsgType >(latest_msg_type_);
}
void ContactSessionInfo::set_latest_msg_type(::IM::BaseDefine::MsgType value) {
  
  latest_msg_type_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ContactSessionInfo.latest_msg_type)
}

// uint32 latest_msg_from_user_id = 8;
void ContactSessionInfo::clear_latest_msg_from_user_id() {
  latest_msg_from_user_id_ = 0u;
}
::google::protobuf::uint32 ContactSessionInfo::latest_msg_from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ContactSessionInfo.latest_msg_from_user_id)
  return latest_msg_from_user_id_;
}
void ContactSessionInfo::set_latest_msg_from_user_id(::google::protobuf::uint32 value) {
  
  latest_msg_from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ContactSessionInfo.latest_msg_from_user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserStat::kUserIdFieldNumber;
const int UserStat::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserStat::UserStat()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.BaseDefine.UserStat)
}
UserStat::UserStat(const UserStat& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.UserStat)
}

void UserStat::SharedCtor() {
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(status_));
  _cached_size_ = 0;
}

UserStat::~UserStat() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.UserStat)
  SharedDtor();
}

void UserStat::SharedDtor() {
}

void UserStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserStat& UserStat::default_instance() {
  protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserStat* UserStat::New(::google::protobuf::Arena* arena) const {
  UserStat* n = new UserStat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserStat::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.UserStat)
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(status_));
}

bool UserStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.BaseDefine.UserStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.UserStatType status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::IM::BaseDefine::UserStatType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.BaseDefine.UserStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.BaseDefine.UserStat)
  return false;
#undef DO_
}

void UserStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.BaseDefine.UserStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // .IM.BaseDefine.UserStatType status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.BaseDefine.UserStat)
}

size_t UserStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.UserStat)
  size_t total_size = 0;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // .IM.BaseDefine.UserStatType status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserStat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserStat*>(&from));
}

void UserStat::MergeFrom(const UserStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.UserStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void UserStat::CopyFrom(const UserStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.UserStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStat::IsInitialized() const {
  return true;
}

void UserStat::Swap(UserStat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserStat::InternalSwap(UserStat* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(status_, other->status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserStat::GetTypeName() const {
  return "IM.BaseDefine.UserStat";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserStat

// uint32 user_id = 1;
void UserStat::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 UserStat::user_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserStat.user_id)
  return user_id_;
}
void UserStat::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserStat.user_id)
}

// .IM.BaseDefine.UserStatType status = 2;
void UserStat::clear_status() {
  status_ = 0;
}
::IM::BaseDefine::UserStatType UserStat::status() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserStat.status)
  return static_cast< ::IM::BaseDefine::UserStatType >(status_);
}
void UserStat::set_status(::IM::BaseDefine::UserStatType value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserStat.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerUserStat::kUserIdFieldNumber;
const int ServerUserStat::kStatusFieldNumber;
const int ServerUserStat::kClientTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerUserStat::ServerUserStat()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.BaseDefine.ServerUserStat)
}
ServerUserStat::ServerUserStat(const ServerUserStat& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&client_type_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(client_type_));
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.ServerUserStat)
}

void ServerUserStat::SharedCtor() {
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&client_type_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(client_type_));
  _cached_size_ = 0;
}

ServerUserStat::~ServerUserStat() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.ServerUserStat)
  SharedDtor();
}

void ServerUserStat::SharedDtor() {
}

void ServerUserStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerUserStat& ServerUserStat::default_instance() {
  protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerUserStat* ServerUserStat::New(::google::protobuf::Arena* arena) const {
  ServerUserStat* n = new ServerUserStat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerUserStat::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.ServerUserStat)
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&client_type_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(client_type_));
}

bool ServerUserStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.BaseDefine.ServerUserStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.UserStatType status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::IM::BaseDefine::UserStatType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.ClientType client_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_client_type(static_cast< ::IM::BaseDefine::ClientType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.BaseDefine.ServerUserStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.BaseDefine.ServerUserStat)
  return false;
#undef DO_
}

void ServerUserStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.BaseDefine.ServerUserStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // .IM.BaseDefine.UserStatType status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // .IM.BaseDefine.ClientType client_type = 3;
  if (this->client_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->client_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.BaseDefine.ServerUserStat)
}

size_t ServerUserStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.ServerUserStat)
  size_t total_size = 0;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // .IM.BaseDefine.UserStatType status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // .IM.BaseDefine.ClientType client_type = 3;
  if (this->client_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerUserStat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerUserStat*>(&from));
}

void ServerUserStat::MergeFrom(const ServerUserStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.ServerUserStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.client_type() != 0) {
    set_client_type(from.client_type());
  }
}

void ServerUserStat::CopyFrom(const ServerUserStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.ServerUserStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerUserStat::IsInitialized() const {
  return true;
}

void ServerUserStat::Swap(ServerUserStat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerUserStat::InternalSwap(ServerUserStat* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(status_, other->status_);
  std::swap(client_type_, other->client_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ServerUserStat::GetTypeName() const {
  return "IM.BaseDefine.ServerUserStat";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerUserStat

// uint32 user_id = 1;
void ServerUserStat::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 ServerUserStat::user_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ServerUserStat.user_id)
  return user_id_;
}
void ServerUserStat::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ServerUserStat.user_id)
}

// .IM.BaseDefine.UserStatType status = 2;
void ServerUserStat::clear_status() {
  status_ = 0;
}
::IM::BaseDefine::UserStatType ServerUserStat::status() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ServerUserStat.status)
  return static_cast< ::IM::BaseDefine::UserStatType >(status_);
}
void ServerUserStat::set_status(::IM::BaseDefine::UserStatType value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ServerUserStat.status)
}

// .IM.BaseDefine.ClientType client_type = 3;
void ServerUserStat::clear_client_type() {
  client_type_ = 0;
}
::IM::BaseDefine::ClientType ServerUserStat::client_type() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ServerUserStat.client_type)
  return static_cast< ::IM::BaseDefine::ClientType >(client_type_);
}
void ServerUserStat::set_client_type(::IM::BaseDefine::ClientType value) {
  
  client_type_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ServerUserStat.client_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnreadInfo::kSessionIdFieldNumber;
const int UnreadInfo::kSessionTypeFieldNumber;
const int UnreadInfo::kUnreadCntFieldNumber;
const int UnreadInfo::kLatestMsgIdFieldNumber;
const int UnreadInfo::kLatestMsgDataFieldNumber;
const int UnreadInfo::kLatestMsgTypeFieldNumber;
const int UnreadInfo::kLatestMsgFromUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnreadInfo::UnreadInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.BaseDefine.UnreadInfo)
}
UnreadInfo::UnreadInfo(const UnreadInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  latest_msg_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.latest_msg_data().size() > 0) {
    latest_msg_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latest_msg_data_);
  }
  ::memcpy(&session_id_, &from.session_id_,
    reinterpret_cast<char*>(&latest_msg_from_user_id_) -
    reinterpret_cast<char*>(&session_id_) + sizeof(latest_msg_from_user_id_));
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.UnreadInfo)
}

void UnreadInfo::SharedCtor() {
  latest_msg_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_id_, 0, reinterpret_cast<char*>(&latest_msg_from_user_id_) -
    reinterpret_cast<char*>(&session_id_) + sizeof(latest_msg_from_user_id_));
  _cached_size_ = 0;
}

UnreadInfo::~UnreadInfo() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.UnreadInfo)
  SharedDtor();
}

void UnreadInfo::SharedDtor() {
  latest_msg_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UnreadInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UnreadInfo& UnreadInfo::default_instance() {
  protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  return *internal_default_instance();
}

UnreadInfo* UnreadInfo::New(::google::protobuf::Arena* arena) const {
  UnreadInfo* n = new UnreadInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnreadInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.UnreadInfo)
  latest_msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_id_, 0, reinterpret_cast<char*>(&latest_msg_from_user_id_) -
    reinterpret_cast<char*>(&session_id_) + sizeof(latest_msg_from_user_id_));
}

bool UnreadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.BaseDefine.UnreadInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 session_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.SessionType session_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 unread_cnt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unread_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 latest_msg_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes latest_msg_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_latest_msg_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.MsgType latest_msg_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_latest_msg_type(static_cast< ::IM::BaseDefine::MsgType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 latest_msg_from_user_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_msg_from_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.BaseDefine.UnreadInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.BaseDefine.UnreadInfo)
  return false;
#undef DO_
}

void UnreadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.BaseDefine.UnreadInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 session_id = 1;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session_id(), output);
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->session_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // uint32 unread_cnt = 3;
  if (this->unread_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->unread_cnt(), output);
  }

  // uint32 latest_msg_id = 4;
  if (this->latest_msg_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->latest_msg_id(), output);
  }

  // bytes latest_msg_data = 5;
  if (this->latest_msg_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->latest_msg_data(), output);
  }

  // .IM.BaseDefine.MsgType latest_msg_type = 6;
  if (this->latest_msg_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->latest_msg_type(), output);
  }

  // uint32 latest_msg_from_user_id = 7;
  if (this->latest_msg_from_user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->latest_msg_from_user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.BaseDefine.UnreadInfo)
}

size_t UnreadInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.UnreadInfo)
  size_t total_size = 0;

  // bytes latest_msg_data = 5;
  if (this->latest_msg_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->latest_msg_data());
  }

  // uint32 session_id = 1;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
  }

  // uint32 unread_cnt = 3;
  if (this->unread_cnt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->unread_cnt());
  }

  // uint32 latest_msg_id = 4;
  if (this->latest_msg_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latest_msg_id());
  }

  // .IM.BaseDefine.MsgType latest_msg_type = 6;
  if (this->latest_msg_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->latest_msg_type());
  }

  // uint32 latest_msg_from_user_id = 7;
  if (this->latest_msg_from_user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latest_msg_from_user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnreadInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UnreadInfo*>(&from));
}

void UnreadInfo::MergeFrom(const UnreadInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.UnreadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.latest_msg_data().size() > 0) {

    latest_msg_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latest_msg_data_);
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
  if (from.session_type() != 0) {
    set_session_type(from.session_type());
  }
  if (from.unread_cnt() != 0) {
    set_unread_cnt(from.unread_cnt());
  }
  if (from.latest_msg_id() != 0) {
    set_latest_msg_id(from.latest_msg_id());
  }
  if (from.latest_msg_type() != 0) {
    set_latest_msg_type(from.latest_msg_type());
  }
  if (from.latest_msg_from_user_id() != 0) {
    set_latest_msg_from_user_id(from.latest_msg_from_user_id());
  }
}

void UnreadInfo::CopyFrom(const UnreadInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.UnreadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnreadInfo::IsInitialized() const {
  return true;
}

void UnreadInfo::Swap(UnreadInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnreadInfo::InternalSwap(UnreadInfo* other) {
  latest_msg_data_.Swap(&other->latest_msg_data_);
  std::swap(session_id_, other->session_id_);
  std::swap(session_type_, other->session_type_);
  std::swap(unread_cnt_, other->unread_cnt_);
  std::swap(latest_msg_id_, other->latest_msg_id_);
  std::swap(latest_msg_type_, other->latest_msg_type_);
  std::swap(latest_msg_from_user_id_, other->latest_msg_from_user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UnreadInfo::GetTypeName() const {
  return "IM.BaseDefine.UnreadInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnreadInfo

// uint32 session_id = 1;
void UnreadInfo::clear_session_id() {
  session_id_ = 0u;
}
::google::protobuf::uint32 UnreadInfo::session_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UnreadInfo.session_id)
  return session_id_;
}
void UnreadInfo::set_session_id(::google::protobuf::uint32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UnreadInfo.session_id)
}

// .IM.BaseDefine.SessionType session_type = 2;
void UnreadInfo::clear_session_type() {
  session_type_ = 0;
}
::IM::BaseDefine::SessionType UnreadInfo::session_type() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UnreadInfo.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
void UnreadInfo::set_session_type(::IM::BaseDefine::SessionType value) {
  
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UnreadInfo.session_type)
}

// uint32 unread_cnt = 3;
void UnreadInfo::clear_unread_cnt() {
  unread_cnt_ = 0u;
}
::google::protobuf::uint32 UnreadInfo::unread_cnt() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UnreadInfo.unread_cnt)
  return unread_cnt_;
}
void UnreadInfo::set_unread_cnt(::google::protobuf::uint32 value) {
  
  unread_cnt_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UnreadInfo.unread_cnt)
}

// uint32 latest_msg_id = 4;
void UnreadInfo::clear_latest_msg_id() {
  latest_msg_id_ = 0u;
}
::google::protobuf::uint32 UnreadInfo::latest_msg_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UnreadInfo.latest_msg_id)
  return latest_msg_id_;
}
void UnreadInfo::set_latest_msg_id(::google::protobuf::uint32 value) {
  
  latest_msg_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UnreadInfo.latest_msg_id)
}

// bytes latest_msg_data = 5;
void UnreadInfo::clear_latest_msg_data() {
  latest_msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UnreadInfo::latest_msg_data() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UnreadInfo.latest_msg_data)
  return latest_msg_data_.GetNoArena();
}
void UnreadInfo::set_latest_msg_data(const ::std::string& value) {
  
  latest_msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UnreadInfo.latest_msg_data)
}
#if LANG_CXX11
void UnreadInfo::set_latest_msg_data(::std::string&& value) {
  
  latest_msg_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.UnreadInfo.latest_msg_data)
}
#endif
void UnreadInfo::set_latest_msg_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  latest_msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UnreadInfo.latest_msg_data)
}
void UnreadInfo::set_latest_msg_data(const void* value, size_t size) {
  
  latest_msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UnreadInfo.latest_msg_data)
}
::std::string* UnreadInfo::mutable_latest_msg_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UnreadInfo.latest_msg_data)
  return latest_msg_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UnreadInfo::release_latest_msg_data() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UnreadInfo.latest_msg_data)
  
  return latest_msg_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UnreadInfo::set_allocated_latest_msg_data(::std::string* latest_msg_data) {
  if (latest_msg_data != NULL) {
    
  } else {
    
  }
  latest_msg_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), latest_msg_data);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UnreadInfo.latest_msg_data)
}

// .IM.BaseDefine.MsgType latest_msg_type = 6;
void UnreadInfo::clear_latest_msg_type() {
  latest_msg_type_ = 0;
}
::IM::BaseDefine::MsgType UnreadInfo::latest_msg_type() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UnreadInfo.latest_msg_type)
  return static_cast< ::IM::BaseDefine::MsgType >(latest_msg_type_);
}
void UnreadInfo::set_latest_msg_type(::IM::BaseDefine::MsgType value) {
  
  latest_msg_type_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UnreadInfo.latest_msg_type)
}

// uint32 latest_msg_from_user_id = 7;
void UnreadInfo::clear_latest_msg_from_user_id() {
  latest_msg_from_user_id_ = 0u;
}
::google::protobuf::uint32 UnreadInfo::latest_msg_from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UnreadInfo.latest_msg_from_user_id)
  return latest_msg_from_user_id_;
}
void UnreadInfo::set_latest_msg_from_user_id(::google::protobuf::uint32 value) {
  
  latest_msg_from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UnreadInfo.latest_msg_from_user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgInfo::kMsgIdFieldNumber;
const int MsgInfo::kFromSessionIdFieldNumber;
const int MsgInfo::kCreateTimeFieldNumber;
const int MsgInfo::kMsgTypeFieldNumber;
const int MsgInfo::kMsgDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgInfo::MsgInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.BaseDefine.MsgInfo)
}
MsgInfo::MsgInfo(const MsgInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg_data().size() > 0) {
    msg_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_data_);
  }
  ::memcpy(&msg_id_, &from.msg_id_,
    reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&msg_id_) + sizeof(msg_type_));
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.MsgInfo)
}

void MsgInfo::SharedCtor() {
  msg_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msg_id_, 0, reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&msg_id_) + sizeof(msg_type_));
  _cached_size_ = 0;
}

MsgInfo::~MsgInfo() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.MsgInfo)
  SharedDtor();
}

void MsgInfo::SharedDtor() {
  msg_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MsgInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgInfo& MsgInfo::default_instance() {
  protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  return *internal_default_instance();
}

MsgInfo* MsgInfo::New(::google::protobuf::Arena* arena) const {
  MsgInfo* n = new MsgInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.MsgInfo)
  msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msg_id_, 0, reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&msg_id_) + sizeof(msg_type_));
}

bool MsgInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.BaseDefine.MsgInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 msg_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 from_session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 create_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.MsgType msg_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_msg_type(static_cast< ::IM::BaseDefine::MsgType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes msg_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.BaseDefine.MsgInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.BaseDefine.MsgInfo)
  return false;
#undef DO_
}

void MsgInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.BaseDefine.MsgInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 msg_id = 1;
  if (this->msg_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msg_id(), output);
  }

  // uint32 from_session_id = 2;
  if (this->from_session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->from_session_id(), output);
  }

  // uint32 create_time = 3;
  if (this->create_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->create_time(), output);
  }

  // .IM.BaseDefine.MsgType msg_type = 4;
  if (this->msg_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->msg_type(), output);
  }

  // bytes msg_data = 5;
  if (this->msg_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->msg_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.BaseDefine.MsgInfo)
}

size_t MsgInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.MsgInfo)
  size_t total_size = 0;

  // bytes msg_data = 5;
  if (this->msg_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg_data());
  }

  // uint32 msg_id = 1;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_id());
  }

  // uint32 from_session_id = 2;
  if (this->from_session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_session_id());
  }

  // uint32 create_time = 3;
  if (this->create_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->create_time());
  }

  // .IM.BaseDefine.MsgType msg_type = 4;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgInfo*>(&from));
}

void MsgInfo::MergeFrom(const MsgInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.MsgInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_data().size() > 0) {

    msg_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_data_);
  }
  if (from.msg_id() != 0) {
    set_msg_id(from.msg_id());
  }
  if (from.from_session_id() != 0) {
    set_from_session_id(from.from_session_id());
  }
  if (from.create_time() != 0) {
    set_create_time(from.create_time());
  }
  if (from.msg_type() != 0) {
    set_msg_type(from.msg_type());
  }
}

void MsgInfo::CopyFrom(const MsgInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.MsgInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgInfo::IsInitialized() const {
  return true;
}

void MsgInfo::Swap(MsgInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgInfo::InternalSwap(MsgInfo* other) {
  msg_data_.Swap(&other->msg_data_);
  std::swap(msg_id_, other->msg_id_);
  std::swap(from_session_id_, other->from_session_id_);
  std::swap(create_time_, other->create_time_);
  std::swap(msg_type_, other->msg_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MsgInfo::GetTypeName() const {
  return "IM.BaseDefine.MsgInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgInfo

// uint32 msg_id = 1;
void MsgInfo::clear_msg_id() {
  msg_id_ = 0u;
}
::google::protobuf::uint32 MsgInfo::msg_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.MsgInfo.msg_id)
  return msg_id_;
}
void MsgInfo::set_msg_id(::google::protobuf::uint32 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.MsgInfo.msg_id)
}

// uint32 from_session_id = 2;
void MsgInfo::clear_from_session_id() {
  from_session_id_ = 0u;
}
::google::protobuf::uint32 MsgInfo::from_session_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.MsgInfo.from_session_id)
  return from_session_id_;
}
void MsgInfo::set_from_session_id(::google::protobuf::uint32 value) {
  
  from_session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.MsgInfo.from_session_id)
}

// uint32 create_time = 3;
void MsgInfo::clear_create_time() {
  create_time_ = 0u;
}
::google::protobuf::uint32 MsgInfo::create_time() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.MsgInfo.create_time)
  return create_time_;
}
void MsgInfo::set_create_time(::google::protobuf::uint32 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.MsgInfo.create_time)
}

// .IM.BaseDefine.MsgType msg_type = 4;
void MsgInfo::clear_msg_type() {
  msg_type_ = 0;
}
::IM::BaseDefine::MsgType MsgInfo::msg_type() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.MsgInfo.msg_type)
  return static_cast< ::IM::BaseDefine::MsgType >(msg_type_);
}
void MsgInfo::set_msg_type(::IM::BaseDefine::MsgType value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.MsgInfo.msg_type)
}

// bytes msg_data = 5;
void MsgInfo::clear_msg_data() {
  msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MsgInfo::msg_data() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.MsgInfo.msg_data)
  return msg_data_.GetNoArena();
}
void MsgInfo::set_msg_data(const ::std::string& value) {
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.MsgInfo.msg_data)
}
#if LANG_CXX11
void MsgInfo::set_msg_data(::std::string&& value) {
  
  msg_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.MsgInfo.msg_data)
}
#endif
void MsgInfo::set_msg_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.MsgInfo.msg_data)
}
void MsgInfo::set_msg_data(const void* value, size_t size) {
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.MsgInfo.msg_data)
}
::std::string* MsgInfo::mutable_msg_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.MsgInfo.msg_data)
  return msg_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MsgInfo::release_msg_data() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.MsgInfo.msg_data)
  
  return msg_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MsgInfo::set_allocated_msg_data(::std::string* msg_data) {
  if (msg_data != NULL) {
    
  } else {
    
  }
  msg_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_data);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.MsgInfo.msg_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupVersionInfo::kGroupIdFieldNumber;
const int GroupVersionInfo::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupVersionInfo::GroupVersionInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.BaseDefine.GroupVersionInfo)
}
GroupVersionInfo::GroupVersionInfo(const GroupVersionInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&group_id_, &from.group_id_,
    reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&group_id_) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.GroupVersionInfo)
}

void GroupVersionInfo::SharedCtor() {
  ::memset(&group_id_, 0, reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&group_id_) + sizeof(version_));
  _cached_size_ = 0;
}

GroupVersionInfo::~GroupVersionInfo() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.GroupVersionInfo)
  SharedDtor();
}

void GroupVersionInfo::SharedDtor() {
}

void GroupVersionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupVersionInfo& GroupVersionInfo::default_instance() {
  protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  return *internal_default_instance();
}

GroupVersionInfo* GroupVersionInfo::New(::google::protobuf::Arena* arena) const {
  GroupVersionInfo* n = new GroupVersionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupVersionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.GroupVersionInfo)
  ::memset(&group_id_, 0, reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&group_id_) + sizeof(version_));
}

bool GroupVersionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.BaseDefine.GroupVersionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.BaseDefine.GroupVersionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.BaseDefine.GroupVersionInfo)
  return false;
#undef DO_
}

void GroupVersionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.BaseDefine.GroupVersionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 group_id = 1;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.BaseDefine.GroupVersionInfo)
}

size_t GroupVersionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.GroupVersionInfo)
  size_t total_size = 0;

  // uint32 group_id = 1;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupVersionInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupVersionInfo*>(&from));
}

void GroupVersionInfo::MergeFrom(const GroupVersionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.GroupVersionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void GroupVersionInfo::CopyFrom(const GroupVersionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.GroupVersionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupVersionInfo::IsInitialized() const {
  return true;
}

void GroupVersionInfo::Swap(GroupVersionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupVersionInfo::InternalSwap(GroupVersionInfo* other) {
  std::swap(group_id_, other->group_id_);
  std::swap(version_, other->version_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GroupVersionInfo::GetTypeName() const {
  return "IM.BaseDefine.GroupVersionInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupVersionInfo

// uint32 group_id = 1;
void GroupVersionInfo::clear_group_id() {
  group_id_ = 0u;
}
::google::protobuf::uint32 GroupVersionInfo::group_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.GroupVersionInfo.group_id)
  return group_id_;
}
void GroupVersionInfo::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.GroupVersionInfo.group_id)
}

// uint32 version = 2;
void GroupVersionInfo::clear_version() {
  version_ = 0u;
}
::google::protobuf::uint32 GroupVersionInfo::version() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.GroupVersionInfo.version)
  return version_;
}
void GroupVersionInfo::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.GroupVersionInfo.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupInfo::kGroupIdFieldNumber;
const int GroupInfo::kVersionFieldNumber;
const int GroupInfo::kGroupNameFieldNumber;
const int GroupInfo::kGroupAvatarFieldNumber;
const int GroupInfo::kGroupCreatorIdFieldNumber;
const int GroupInfo::kGroupTypeFieldNumber;
const int GroupInfo::kShieldStatusFieldNumber;
const int GroupInfo::kGroupMemberListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupInfo::GroupInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.BaseDefine.GroupInfo)
}
GroupInfo::GroupInfo(const GroupInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      group_member_list_(from.group_member_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_name().size() > 0) {
    group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_name_);
  }
  group_avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_avatar().size() > 0) {
    group_avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_avatar_);
  }
  ::memcpy(&group_id_, &from.group_id_,
    reinterpret_cast<char*>(&shield_status_) -
    reinterpret_cast<char*>(&group_id_) + sizeof(shield_status_));
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.GroupInfo)
}

void GroupInfo::SharedCtor() {
  group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&group_id_, 0, reinterpret_cast<char*>(&shield_status_) -
    reinterpret_cast<char*>(&group_id_) + sizeof(shield_status_));
  _cached_size_ = 0;
}

GroupInfo::~GroupInfo() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.GroupInfo)
  SharedDtor();
}

void GroupInfo::SharedDtor() {
  group_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_avatar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GroupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupInfo& GroupInfo::default_instance() {
  protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  return *internal_default_instance();
}

GroupInfo* GroupInfo::New(::google::protobuf::Arena* arena) const {
  GroupInfo* n = new GroupInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.GroupInfo)
  group_member_list_.Clear();
  group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&group_id_, 0, reinterpret_cast<char*>(&shield_status_) -
    reinterpret_cast<char*>(&group_id_) + sizeof(shield_status_));
}

bool GroupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.BaseDefine.GroupInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string group_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_name().data(), this->group_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.BaseDefine.GroupInfo.group_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string group_avatar = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_avatar()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_avatar().data(), this->group_avatar().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.BaseDefine.GroupInfo.group_avatar"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 group_creator_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_creator_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.GroupType group_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_group_type(static_cast< ::IM::BaseDefine::GroupType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 shield_status = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shield_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 group_member_list = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_group_member_list())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(64u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 66u, input, this->mutable_group_member_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.BaseDefine.GroupInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.BaseDefine.GroupInfo)
  return false;
#undef DO_
}

void GroupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.BaseDefine.GroupInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 group_id = 1;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // string group_name = 3;
  if (this->group_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.GroupInfo.group_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->group_name(), output);
  }

  // string group_avatar = 4;
  if (this->group_avatar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_avatar().data(), this->group_avatar().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.GroupInfo.group_avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->group_avatar(), output);
  }

  // uint32 group_creator_id = 5;
  if (this->group_creator_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->group_creator_id(), output);
  }

  // .IM.BaseDefine.GroupType group_type = 6;
  if (this->group_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->group_type(), output);
  }

  // uint32 shield_status = 7;
  if (this->shield_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->shield_status(), output);
  }

  // repeated uint32 group_member_list = 8;
  if (this->group_member_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_group_member_list_cached_byte_size_);
  }
  for (int i = 0, n = this->group_member_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->group_member_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.BaseDefine.GroupInfo)
}

size_t GroupInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.GroupInfo)
  size_t total_size = 0;

  // repeated uint32 group_member_list = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->group_member_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _group_member_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string group_name = 3;
  if (this->group_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_name());
  }

  // string group_avatar = 4;
  if (this->group_avatar().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_avatar());
  }

  // uint32 group_id = 1;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // uint32 group_creator_id = 5;
  if (this->group_creator_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_creator_id());
  }

  // .IM.BaseDefine.GroupType group_type = 6;
  if (this->group_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_type());
  }

  // uint32 shield_status = 7;
  if (this->shield_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shield_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupInfo*>(&from));
}

void GroupInfo::MergeFrom(const GroupInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.GroupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  group_member_list_.MergeFrom(from.group_member_list_);
  if (from.group_name().size() > 0) {

    group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_name_);
  }
  if (from.group_avatar().size() > 0) {

    group_avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_avatar_);
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.group_creator_id() != 0) {
    set_group_creator_id(from.group_creator_id());
  }
  if (from.group_type() != 0) {
    set_group_type(from.group_type());
  }
  if (from.shield_status() != 0) {
    set_shield_status(from.shield_status());
  }
}

void GroupInfo::CopyFrom(const GroupInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.GroupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupInfo::IsInitialized() const {
  return true;
}

void GroupInfo::Swap(GroupInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupInfo::InternalSwap(GroupInfo* other) {
  group_member_list_.InternalSwap(&other->group_member_list_);
  group_name_.Swap(&other->group_name_);
  group_avatar_.Swap(&other->group_avatar_);
  std::swap(group_id_, other->group_id_);
  std::swap(version_, other->version_);
  std::swap(group_creator_id_, other->group_creator_id_);
  std::swap(group_type_, other->group_type_);
  std::swap(shield_status_, other->shield_status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GroupInfo::GetTypeName() const {
  return "IM.BaseDefine.GroupInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupInfo

// uint32 group_id = 1;
void GroupInfo::clear_group_id() {
  group_id_ = 0u;
}
::google::protobuf::uint32 GroupInfo::group_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.GroupInfo.group_id)
  return group_id_;
}
void GroupInfo::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.GroupInfo.group_id)
}

// uint32 version = 2;
void GroupInfo::clear_version() {
  version_ = 0u;
}
::google::protobuf::uint32 GroupInfo::version() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.GroupInfo.version)
  return version_;
}
void GroupInfo::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.GroupInfo.version)
}

// string group_name = 3;
void GroupInfo::clear_group_name() {
  group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GroupInfo::group_name() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.GroupInfo.group_name)
  return group_name_.GetNoArena();
}
void GroupInfo::set_group_name(const ::std::string& value) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.GroupInfo.group_name)
}
#if LANG_CXX11
void GroupInfo::set_group_name(::std::string&& value) {
  
  group_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.GroupInfo.group_name)
}
#endif
void GroupInfo::set_group_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.GroupInfo.group_name)
}
void GroupInfo::set_group_name(const char* value, size_t size) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.GroupInfo.group_name)
}
::std::string* GroupInfo::mutable_group_name() {
  
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.GroupInfo.group_name)
  return group_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GroupInfo::release_group_name() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.GroupInfo.group_name)
  
  return group_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GroupInfo::set_allocated_group_name(::std::string* group_name) {
  if (group_name != NULL) {
    
  } else {
    
  }
  group_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_name);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.GroupInfo.group_name)
}

// string group_avatar = 4;
void GroupInfo::clear_group_avatar() {
  group_avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GroupInfo::group_avatar() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.GroupInfo.group_avatar)
  return group_avatar_.GetNoArena();
}
void GroupInfo::set_group_avatar(const ::std::string& value) {
  
  group_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.GroupInfo.group_avatar)
}
#if LANG_CXX11
void GroupInfo::set_group_avatar(::std::string&& value) {
  
  group_avatar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.GroupInfo.group_avatar)
}
#endif
void GroupInfo::set_group_avatar(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.GroupInfo.group_avatar)
}
void GroupInfo::set_group_avatar(const char* value, size_t size) {
  
  group_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.GroupInfo.group_avatar)
}
::std::string* GroupInfo::mutable_group_avatar() {
  
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.GroupInfo.group_avatar)
  return group_avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GroupInfo::release_group_avatar() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.GroupInfo.group_avatar)
  
  return group_avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GroupInfo::set_allocated_group_avatar(::std::string* group_avatar) {
  if (group_avatar != NULL) {
    
  } else {
    
  }
  group_avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_avatar);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.GroupInfo.group_avatar)
}

// uint32 group_creator_id = 5;
void GroupInfo::clear_group_creator_id() {
  group_creator_id_ = 0u;
}
::google::protobuf::uint32 GroupInfo::group_creator_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.GroupInfo.group_creator_id)
  return group_creator_id_;
}
void GroupInfo::set_group_creator_id(::google::protobuf::uint32 value) {
  
  group_creator_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.GroupInfo.group_creator_id)
}

// .IM.BaseDefine.GroupType group_type = 6;
void GroupInfo::clear_group_type() {
  group_type_ = 0;
}
::IM::BaseDefine::GroupType GroupInfo::group_type() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.GroupInfo.group_type)
  return static_cast< ::IM::BaseDefine::GroupType >(group_type_);
}
void GroupInfo::set_group_type(::IM::BaseDefine::GroupType value) {
  
  group_type_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.GroupInfo.group_type)
}

// uint32 shield_status = 7;
void GroupInfo::clear_shield_status() {
  shield_status_ = 0u;
}
::google::protobuf::uint32 GroupInfo::shield_status() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.GroupInfo.shield_status)
  return shield_status_;
}
void GroupInfo::set_shield_status(::google::protobuf::uint32 value) {
  
  shield_status_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.GroupInfo.shield_status)
}

// repeated uint32 group_member_list = 8;
int GroupInfo::group_member_list_size() const {
  return group_member_list_.size();
}
void GroupInfo::clear_group_member_list() {
  group_member_list_.Clear();
}
::google::protobuf::uint32 GroupInfo::group_member_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.GroupInfo.group_member_list)
  return group_member_list_.Get(index);
}
void GroupInfo::set_group_member_list(int index, ::google::protobuf::uint32 value) {
  group_member_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.GroupInfo.group_member_list)
}
void GroupInfo::add_group_member_list(::google::protobuf::uint32 value) {
  group_member_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.BaseDefine.GroupInfo.group_member_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GroupInfo::group_member_list() const {
  // @@protoc_insertion_point(field_list:IM.BaseDefine.GroupInfo.group_member_list)
  return group_member_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GroupInfo::mutable_group_member_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.BaseDefine.GroupInfo.group_member_list)
  return &group_member_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserTokenInfo::kUserIdFieldNumber;
const int UserTokenInfo::kUserTypeFieldNumber;
const int UserTokenInfo::kTokenFieldNumber;
const int UserTokenInfo::kPushCountFieldNumber;
const int UserTokenInfo::kPushTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserTokenInfo::UserTokenInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.BaseDefine.UserTokenInfo)
}
UserTokenInfo::UserTokenInfo(const UserTokenInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&push_type_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(push_type_));
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.UserTokenInfo)
}

void UserTokenInfo::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&push_type_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(push_type_));
  _cached_size_ = 0;
}

UserTokenInfo::~UserTokenInfo() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.UserTokenInfo)
  SharedDtor();
}

void UserTokenInfo::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserTokenInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserTokenInfo& UserTokenInfo::default_instance() {
  protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserTokenInfo* UserTokenInfo::New(::google::protobuf::Arena* arena) const {
  UserTokenInfo* n = new UserTokenInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserTokenInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.UserTokenInfo)
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&push_type_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(push_type_));
}

bool UserTokenInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.BaseDefine.UserTokenInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.ClientType user_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_user_type(static_cast< ::IM::BaseDefine::ClientType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.BaseDefine.UserTokenInfo.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 push_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &push_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 push_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &push_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.BaseDefine.UserTokenInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.BaseDefine.UserTokenInfo)
  return false;
#undef DO_
}

void UserTokenInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.BaseDefine.UserTokenInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // .IM.BaseDefine.ClientType user_type = 2;
  if (this->user_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->user_type(), output);
  }

  // string token = 3;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.UserTokenInfo.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  // uint32 push_count = 4;
  if (this->push_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->push_count(), output);
  }

  // uint32 push_type = 5;
  if (this->push_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->push_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.BaseDefine.UserTokenInfo)
}

size_t UserTokenInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.UserTokenInfo)
  size_t total_size = 0;

  // string token = 3;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // .IM.BaseDefine.ClientType user_type = 2;
  if (this->user_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->user_type());
  }

  // uint32 push_count = 4;
  if (this->push_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->push_count());
  }

  // uint32 push_type = 5;
  if (this->push_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->push_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserTokenInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserTokenInfo*>(&from));
}

void UserTokenInfo::MergeFrom(const UserTokenInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.UserTokenInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.user_type() != 0) {
    set_user_type(from.user_type());
  }
  if (from.push_count() != 0) {
    set_push_count(from.push_count());
  }
  if (from.push_type() != 0) {
    set_push_type(from.push_type());
  }
}

void UserTokenInfo::CopyFrom(const UserTokenInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.UserTokenInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTokenInfo::IsInitialized() const {
  return true;
}

void UserTokenInfo::Swap(UserTokenInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserTokenInfo::InternalSwap(UserTokenInfo* other) {
  token_.Swap(&other->token_);
  std::swap(user_id_, other->user_id_);
  std::swap(user_type_, other->user_type_);
  std::swap(push_count_, other->push_count_);
  std::swap(push_type_, other->push_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserTokenInfo::GetTypeName() const {
  return "IM.BaseDefine.UserTokenInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserTokenInfo

// uint32 user_id = 1;
void UserTokenInfo::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 UserTokenInfo::user_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserTokenInfo.user_id)
  return user_id_;
}
void UserTokenInfo::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserTokenInfo.user_id)
}

// .IM.BaseDefine.ClientType user_type = 2;
void UserTokenInfo::clear_user_type() {
  user_type_ = 0;
}
::IM::BaseDefine::ClientType UserTokenInfo::user_type() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserTokenInfo.user_type)
  return static_cast< ::IM::BaseDefine::ClientType >(user_type_);
}
void UserTokenInfo::set_user_type(::IM::BaseDefine::ClientType value) {
  
  user_type_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserTokenInfo.user_type)
}

// string token = 3;
void UserTokenInfo::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserTokenInfo::token() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserTokenInfo.token)
  return token_.GetNoArena();
}
void UserTokenInfo::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserTokenInfo.token)
}
#if LANG_CXX11
void UserTokenInfo::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.UserTokenInfo.token)
}
#endif
void UserTokenInfo::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UserTokenInfo.token)
}
void UserTokenInfo::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UserTokenInfo.token)
}
::std::string* UserTokenInfo::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserTokenInfo.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserTokenInfo::release_token() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserTokenInfo.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserTokenInfo::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserTokenInfo.token)
}

// uint32 push_count = 4;
void UserTokenInfo::clear_push_count() {
  push_count_ = 0u;
}
::google::protobuf::uint32 UserTokenInfo::push_count() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserTokenInfo.push_count)
  return push_count_;
}
void UserTokenInfo::set_push_count(::google::protobuf::uint32 value) {
  
  push_count_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserTokenInfo.push_count)
}

// uint32 push_type = 5;
void UserTokenInfo::clear_push_type() {
  push_type_ = 0u;
}
::google::protobuf::uint32 UserTokenInfo::push_type() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserTokenInfo.push_type)
  return push_type_;
}
void UserTokenInfo::set_push_type(::google::protobuf::uint32 value) {
  
  push_type_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserTokenInfo.push_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PushResult::kUserTokenFieldNumber;
const int PushResult::kResultCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PushResult::PushResult()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.BaseDefine.PushResult)
}
PushResult::PushResult(const PushResult& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_token().size() > 0) {
    user_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_token_);
  }
  result_code_ = from.result_code_;
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.PushResult)
}

void PushResult::SharedCtor() {
  user_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_code_ = 0u;
  _cached_size_ = 0;
}

PushResult::~PushResult() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.PushResult)
  SharedDtor();
}

void PushResult::SharedDtor() {
  user_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PushResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PushResult& PushResult::default_instance() {
  protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  return *internal_default_instance();
}

PushResult* PushResult::New(::google::protobuf::Arena* arena) const {
  PushResult* n = new PushResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PushResult::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.PushResult)
  user_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_code_ = 0u;
}

bool PushResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.BaseDefine.PushResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_token().data(), this->user_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.BaseDefine.PushResult.user_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 result_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.BaseDefine.PushResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.BaseDefine.PushResult)
  return false;
#undef DO_
}

void PushResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.BaseDefine.PushResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_token = 1;
  if (this->user_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_token().data(), this->user_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.PushResult.user_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_token(), output);
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.BaseDefine.PushResult)
}

size_t PushResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.PushResult)
  size_t total_size = 0;

  // string user_token = 1;
  if (this->user_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_token());
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PushResult*>(&from));
}

void PushResult::MergeFrom(const PushResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.PushResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_token().size() > 0) {

    user_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_token_);
  }
  if (from.result_code() != 0) {
    set_result_code(from.result_code());
  }
}

void PushResult::CopyFrom(const PushResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.PushResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushResult::IsInitialized() const {
  return true;
}

void PushResult::Swap(PushResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PushResult::InternalSwap(PushResult* other) {
  user_token_.Swap(&other->user_token_);
  std::swap(result_code_, other->result_code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PushResult::GetTypeName() const {
  return "IM.BaseDefine.PushResult";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PushResult

// string user_token = 1;
void PushResult::clear_user_token() {
  user_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PushResult::user_token() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.PushResult.user_token)
  return user_token_.GetNoArena();
}
void PushResult::set_user_token(const ::std::string& value) {
  
  user_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.PushResult.user_token)
}
#if LANG_CXX11
void PushResult::set_user_token(::std::string&& value) {
  
  user_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.PushResult.user_token)
}
#endif
void PushResult::set_user_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.PushResult.user_token)
}
void PushResult::set_user_token(const char* value, size_t size) {
  
  user_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.PushResult.user_token)
}
::std::string* PushResult::mutable_user_token() {
  
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.PushResult.user_token)
  return user_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PushResult::release_user_token() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.PushResult.user_token)
  
  return user_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PushResult::set_allocated_user_token(::std::string* user_token) {
  if (user_token != NULL) {
    
  } else {
    
  }
  user_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_token);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.PushResult.user_token)
}

// uint32 result_code = 2;
void PushResult::clear_result_code() {
  result_code_ = 0u;
}
::google::protobuf::uint32 PushResult::result_code() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.PushResult.result_code)
  return result_code_;
}
void PushResult::set_result_code(::google::protobuf::uint32 value) {
  
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.PushResult.result_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShieldStatus::kUserIdFieldNumber;
const int ShieldStatus::kGroupIdFieldNumber;
const int ShieldStatus::kShieldStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShieldStatus::ShieldStatus()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.BaseDefine.ShieldStatus)
}
ShieldStatus::ShieldStatus(const ShieldStatus& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&shield_status_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(shield_status_));
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.ShieldStatus)
}

void ShieldStatus::SharedCtor() {
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&shield_status_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(shield_status_));
  _cached_size_ = 0;
}

ShieldStatus::~ShieldStatus() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.ShieldStatus)
  SharedDtor();
}

void ShieldStatus::SharedDtor() {
}

void ShieldStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShieldStatus& ShieldStatus::default_instance() {
  protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShieldStatus* ShieldStatus::New(::google::protobuf::Arena* arena) const {
  ShieldStatus* n = new ShieldStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShieldStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.ShieldStatus)
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&shield_status_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(shield_status_));
}

bool ShieldStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.BaseDefine.ShieldStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 group_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 shield_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shield_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.BaseDefine.ShieldStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.BaseDefine.ShieldStatus)
  return false;
#undef DO_
}

void ShieldStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.BaseDefine.ShieldStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // uint32 group_id = 2;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // uint32 shield_status = 3;
  if (this->shield_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->shield_status(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.BaseDefine.ShieldStatus)
}

size_t ShieldStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.ShieldStatus)
  size_t total_size = 0;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // uint32 group_id = 2;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  // uint32 shield_status = 3;
  if (this->shield_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shield_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShieldStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShieldStatus*>(&from));
}

void ShieldStatus::MergeFrom(const ShieldStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.ShieldStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
  if (from.shield_status() != 0) {
    set_shield_status(from.shield_status());
  }
}

void ShieldStatus::CopyFrom(const ShieldStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.ShieldStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShieldStatus::IsInitialized() const {
  return true;
}

void ShieldStatus::Swap(ShieldStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShieldStatus::InternalSwap(ShieldStatus* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(group_id_, other->group_id_);
  std::swap(shield_status_, other->shield_status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ShieldStatus::GetTypeName() const {
  return "IM.BaseDefine.ShieldStatus";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShieldStatus

// uint32 user_id = 1;
void ShieldStatus::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 ShieldStatus::user_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ShieldStatus.user_id)
  return user_id_;
}
void ShieldStatus::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ShieldStatus.user_id)
}

// uint32 group_id = 2;
void ShieldStatus::clear_group_id() {
  group_id_ = 0u;
}
::google::protobuf::uint32 ShieldStatus::group_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ShieldStatus.group_id)
  return group_id_;
}
void ShieldStatus::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ShieldStatus.group_id)
}

// uint32 shield_status = 3;
void ShieldStatus::clear_shield_status() {
  shield_status_ = 0u;
}
::google::protobuf::uint32 ShieldStatus::shield_status() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ShieldStatus.shield_status)
  return shield_status_;
}
void ShieldStatus::set_shield_status(::google::protobuf::uint32 value) {
  
  shield_status_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ShieldStatus.shield_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OfflineFileInfo::kFromUserIdFieldNumber;
const int OfflineFileInfo::kTaskIdFieldNumber;
const int OfflineFileInfo::kFileNameFieldNumber;
const int OfflineFileInfo::kFileSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OfflineFileInfo::OfflineFileInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.BaseDefine.OfflineFileInfo)
}
OfflineFileInfo::OfflineFileInfo(const OfflineFileInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.task_id().size() > 0) {
    task_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_name().size() > 0) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  ::memcpy(&from_user_id_, &from.from_user_id_,
    reinterpret_cast<char*>(&file_size_) -
    reinterpret_cast<char*>(&from_user_id_) + sizeof(file_size_));
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.OfflineFileInfo)
}

void OfflineFileInfo::SharedCtor() {
  task_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_user_id_, 0, reinterpret_cast<char*>(&file_size_) -
    reinterpret_cast<char*>(&from_user_id_) + sizeof(file_size_));
  _cached_size_ = 0;
}

OfflineFileInfo::~OfflineFileInfo() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.OfflineFileInfo)
  SharedDtor();
}

void OfflineFileInfo::SharedDtor() {
  task_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OfflineFileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OfflineFileInfo& OfflineFileInfo::default_instance() {
  protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  return *internal_default_instance();
}

OfflineFileInfo* OfflineFileInfo::New(::google::protobuf::Arena* arena) const {
  OfflineFileInfo* n = new OfflineFileInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OfflineFileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.OfflineFileInfo)
  task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_user_id_, 0, reinterpret_cast<char*>(&file_size_) -
    reinterpret_cast<char*>(&from_user_id_) + sizeof(file_size_));
}

bool OfflineFileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.BaseDefine.OfflineFileInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 from_user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string task_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->task_id().data(), this->task_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.BaseDefine.OfflineFileInfo.task_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string file_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.BaseDefine.OfflineFileInfo.file_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 file_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.BaseDefine.OfflineFileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.BaseDefine.OfflineFileInfo)
  return false;
#undef DO_
}

void OfflineFileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.BaseDefine.OfflineFileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from_user_id = 1;
  if (this->from_user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->from_user_id(), output);
  }

  // string task_id = 2;
  if (this->task_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.OfflineFileInfo.task_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->task_id(), output);
  }

  // string file_name = 3;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.OfflineFileInfo.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->file_name(), output);
  }

  // uint32 file_size = 4;
  if (this->file_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->file_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.BaseDefine.OfflineFileInfo)
}

size_t OfflineFileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.OfflineFileInfo)
  size_t total_size = 0;

  // string task_id = 2;
  if (this->task_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->task_id());
  }

  // string file_name = 3;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  // uint32 from_user_id = 1;
  if (this->from_user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_user_id());
  }

  // uint32 file_size = 4;
  if (this->file_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->file_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfflineFileInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OfflineFileInfo*>(&from));
}

void OfflineFileInfo::MergeFrom(const OfflineFileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.OfflineFileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.task_id().size() > 0) {

    task_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  if (from.file_name().size() > 0) {

    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  if (from.from_user_id() != 0) {
    set_from_user_id(from.from_user_id());
  }
  if (from.file_size() != 0) {
    set_file_size(from.file_size());
  }
}

void OfflineFileInfo::CopyFrom(const OfflineFileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.OfflineFileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfflineFileInfo::IsInitialized() const {
  return true;
}

void OfflineFileInfo::Swap(OfflineFileInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OfflineFileInfo::InternalSwap(OfflineFileInfo* other) {
  task_id_.Swap(&other->task_id_);
  file_name_.Swap(&other->file_name_);
  std::swap(from_user_id_, other->from_user_id_);
  std::swap(file_size_, other->file_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string OfflineFileInfo::GetTypeName() const {
  return "IM.BaseDefine.OfflineFileInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OfflineFileInfo

// uint32 from_user_id = 1;
void OfflineFileInfo::clear_from_user_id() {
  from_user_id_ = 0u;
}
::google::protobuf::uint32 OfflineFileInfo::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.OfflineFileInfo.from_user_id)
  return from_user_id_;
}
void OfflineFileInfo::set_from_user_id(::google::protobuf::uint32 value) {
  
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.OfflineFileInfo.from_user_id)
}

// string task_id = 2;
void OfflineFileInfo::clear_task_id() {
  task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OfflineFileInfo::task_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.OfflineFileInfo.task_id)
  return task_id_.GetNoArena();
}
void OfflineFileInfo::set_task_id(const ::std::string& value) {
  
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.OfflineFileInfo.task_id)
}
#if LANG_CXX11
void OfflineFileInfo::set_task_id(::std::string&& value) {
  
  task_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.OfflineFileInfo.task_id)
}
#endif
void OfflineFileInfo::set_task_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.OfflineFileInfo.task_id)
}
void OfflineFileInfo::set_task_id(const char* value, size_t size) {
  
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.OfflineFileInfo.task_id)
}
::std::string* OfflineFileInfo::mutable_task_id() {
  
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.OfflineFileInfo.task_id)
  return task_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OfflineFileInfo::release_task_id() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.OfflineFileInfo.task_id)
  
  return task_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OfflineFileInfo::set_allocated_task_id(::std::string* task_id) {
  if (task_id != NULL) {
    
  } else {
    
  }
  task_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_id);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.OfflineFileInfo.task_id)
}

// string file_name = 3;
void OfflineFileInfo::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OfflineFileInfo::file_name() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.OfflineFileInfo.file_name)
  return file_name_.GetNoArena();
}
void OfflineFileInfo::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.OfflineFileInfo.file_name)
}
#if LANG_CXX11
void OfflineFileInfo::set_file_name(::std::string&& value) {
  
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.OfflineFileInfo.file_name)
}
#endif
void OfflineFileInfo::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.OfflineFileInfo.file_name)
}
void OfflineFileInfo::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.OfflineFileInfo.file_name)
}
::std::string* OfflineFileInfo::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.OfflineFileInfo.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OfflineFileInfo::release_file_name() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.OfflineFileInfo.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OfflineFileInfo::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.OfflineFileInfo.file_name)
}

// uint32 file_size = 4;
void OfflineFileInfo::clear_file_size() {
  file_size_ = 0u;
}
::google::protobuf::uint32 OfflineFileInfo::file_size() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.OfflineFileInfo.file_size)
  return file_size_;
}
void OfflineFileInfo::set_file_size(::google::protobuf::uint32 value) {
  
  file_size_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.OfflineFileInfo.file_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DepartInfo::kDeptIdFieldNumber;
const int DepartInfo::kPriorityFieldNumber;
const int DepartInfo::kDeptNameFieldNumber;
const int DepartInfo::kParentDeptIdFieldNumber;
const int DepartInfo::kDeptStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DepartInfo::DepartInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.BaseDefine.DepartInfo)
}
DepartInfo::DepartInfo(const DepartInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dept_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dept_name().size() > 0) {
    dept_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dept_name_);
  }
  ::memcpy(&dept_id_, &from.dept_id_,
    reinterpret_cast<char*>(&dept_status_) -
    reinterpret_cast<char*>(&dept_id_) + sizeof(dept_status_));
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.DepartInfo)
}

void DepartInfo::SharedCtor() {
  dept_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dept_id_, 0, reinterpret_cast<char*>(&dept_status_) -
    reinterpret_cast<char*>(&dept_id_) + sizeof(dept_status_));
  _cached_size_ = 0;
}

DepartInfo::~DepartInfo() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.DepartInfo)
  SharedDtor();
}

void DepartInfo::SharedDtor() {
  dept_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DepartInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DepartInfo& DepartInfo::default_instance() {
  protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  return *internal_default_instance();
}

DepartInfo* DepartInfo::New(::google::protobuf::Arena* arena) const {
  DepartInfo* n = new DepartInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DepartInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.DepartInfo)
  dept_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dept_id_, 0, reinterpret_cast<char*>(&dept_status_) -
    reinterpret_cast<char*>(&dept_id_) + sizeof(dept_status_));
}

bool DepartInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.BaseDefine.DepartInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dept_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dept_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 priority = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dept_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dept_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dept_name().data(), this->dept_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.BaseDefine.DepartInfo.dept_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 parent_dept_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_dept_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.DepartmentStatusType dept_status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dept_status(static_cast< ::IM::BaseDefine::DepartmentStatusType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.BaseDefine.DepartInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.BaseDefine.DepartInfo)
  return false;
#undef DO_
}

void DepartInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.BaseDefine.DepartInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dept_id = 1;
  if (this->dept_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dept_id(), output);
  }

  // uint32 priority = 2;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->priority(), output);
  }

  // string dept_name = 3;
  if (this->dept_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dept_name().data(), this->dept_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.DepartInfo.dept_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dept_name(), output);
  }

  // uint32 parent_dept_id = 4;
  if (this->parent_dept_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->parent_dept_id(), output);
  }

  // .IM.BaseDefine.DepartmentStatusType dept_status = 5;
  if (this->dept_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->dept_status(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.BaseDefine.DepartInfo)
}

size_t DepartInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.DepartInfo)
  size_t total_size = 0;

  // string dept_name = 3;
  if (this->dept_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dept_name());
  }

  // uint32 dept_id = 1;
  if (this->dept_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dept_id());
  }

  // uint32 priority = 2;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->priority());
  }

  // uint32 parent_dept_id = 4;
  if (this->parent_dept_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->parent_dept_id());
  }

  // .IM.BaseDefine.DepartmentStatusType dept_status = 5;
  if (this->dept_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dept_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DepartInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DepartInfo*>(&from));
}

void DepartInfo::MergeFrom(const DepartInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.DepartInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dept_name().size() > 0) {

    dept_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dept_name_);
  }
  if (from.dept_id() != 0) {
    set_dept_id(from.dept_id());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
  if (from.parent_dept_id() != 0) {
    set_parent_dept_id(from.parent_dept_id());
  }
  if (from.dept_status() != 0) {
    set_dept_status(from.dept_status());
  }
}

void DepartInfo::CopyFrom(const DepartInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.DepartInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepartInfo::IsInitialized() const {
  return true;
}

void DepartInfo::Swap(DepartInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DepartInfo::InternalSwap(DepartInfo* other) {
  dept_name_.Swap(&other->dept_name_);
  std::swap(dept_id_, other->dept_id_);
  std::swap(priority_, other->priority_);
  std::swap(parent_dept_id_, other->parent_dept_id_);
  std::swap(dept_status_, other->dept_status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DepartInfo::GetTypeName() const {
  return "IM.BaseDefine.DepartInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DepartInfo

// uint32 dept_id = 1;
void DepartInfo::clear_dept_id() {
  dept_id_ = 0u;
}
::google::protobuf::uint32 DepartInfo::dept_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.DepartInfo.dept_id)
  return dept_id_;
}
void DepartInfo::set_dept_id(::google::protobuf::uint32 value) {
  
  dept_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.DepartInfo.dept_id)
}

// uint32 priority = 2;
void DepartInfo::clear_priority() {
  priority_ = 0u;
}
::google::protobuf::uint32 DepartInfo::priority() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.DepartInfo.priority)
  return priority_;
}
void DepartInfo::set_priority(::google::protobuf::uint32 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.DepartInfo.priority)
}

// string dept_name = 3;
void DepartInfo::clear_dept_name() {
  dept_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DepartInfo::dept_name() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.DepartInfo.dept_name)
  return dept_name_.GetNoArena();
}
void DepartInfo::set_dept_name(const ::std::string& value) {
  
  dept_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.DepartInfo.dept_name)
}
#if LANG_CXX11
void DepartInfo::set_dept_name(::std::string&& value) {
  
  dept_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.DepartInfo.dept_name)
}
#endif
void DepartInfo::set_dept_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dept_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.DepartInfo.dept_name)
}
void DepartInfo::set_dept_name(const char* value, size_t size) {
  
  dept_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.DepartInfo.dept_name)
}
::std::string* DepartInfo::mutable_dept_name() {
  
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.DepartInfo.dept_name)
  return dept_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DepartInfo::release_dept_name() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.DepartInfo.dept_name)
  
  return dept_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DepartInfo::set_allocated_dept_name(::std::string* dept_name) {
  if (dept_name != NULL) {
    
  } else {
    
  }
  dept_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dept_name);
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.DepartInfo.dept_name)
}

// uint32 parent_dept_id = 4;
void DepartInfo::clear_parent_dept_id() {
  parent_dept_id_ = 0u;
}
::google::protobuf::uint32 DepartInfo::parent_dept_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.DepartInfo.parent_dept_id)
  return parent_dept_id_;
}
void DepartInfo::set_parent_dept_id(::google::protobuf::uint32 value) {
  
  parent_dept_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.DepartInfo.parent_dept_id)
}

// .IM.BaseDefine.DepartmentStatusType dept_status = 5;
void DepartInfo::clear_dept_status() {
  dept_status_ = 0;
}
::IM::BaseDefine::DepartmentStatusType DepartInfo::dept_status() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.DepartInfo.dept_status)
  return static_cast< ::IM::BaseDefine::DepartmentStatusType >(dept_status_);
}
void DepartInfo::set_dept_status(::IM::BaseDefine::DepartmentStatusType value) {
  
  dept_status_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.DepartInfo.dept_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PushShieldStatus::kUserIdFieldNumber;
const int PushShieldStatus::kShieldStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PushShieldStatus::PushShieldStatus()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.BaseDefine.PushShieldStatus)
}
PushShieldStatus::PushShieldStatus(const PushShieldStatus& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&shield_status_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(shield_status_));
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.PushShieldStatus)
}

void PushShieldStatus::SharedCtor() {
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&shield_status_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(shield_status_));
  _cached_size_ = 0;
}

PushShieldStatus::~PushShieldStatus() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.PushShieldStatus)
  SharedDtor();
}

void PushShieldStatus::SharedDtor() {
}

void PushShieldStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PushShieldStatus& PushShieldStatus::default_instance() {
  protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  return *internal_default_instance();
}

PushShieldStatus* PushShieldStatus::New(::google::protobuf::Arena* arena) const {
  PushShieldStatus* n = new PushShieldStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PushShieldStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.PushShieldStatus)
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&shield_status_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(shield_status_));
}

bool PushShieldStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.BaseDefine.PushShieldStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 shield_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shield_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.BaseDefine.PushShieldStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.BaseDefine.PushShieldStatus)
  return false;
#undef DO_
}

void PushShieldStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.BaseDefine.PushShieldStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // uint32 shield_status = 2;
  if (this->shield_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shield_status(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.BaseDefine.PushShieldStatus)
}

size_t PushShieldStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.PushShieldStatus)
  size_t total_size = 0;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // uint32 shield_status = 2;
  if (this->shield_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shield_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushShieldStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PushShieldStatus*>(&from));
}

void PushShieldStatus::MergeFrom(const PushShieldStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.PushShieldStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.shield_status() != 0) {
    set_shield_status(from.shield_status());
  }
}

void PushShieldStatus::CopyFrom(const PushShieldStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.PushShieldStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushShieldStatus::IsInitialized() const {
  return true;
}

void PushShieldStatus::Swap(PushShieldStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PushShieldStatus::InternalSwap(PushShieldStatus* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(shield_status_, other->shield_status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PushShieldStatus::GetTypeName() const {
  return "IM.BaseDefine.PushShieldStatus";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PushShieldStatus

// uint32 user_id = 1;
void PushShieldStatus::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 PushShieldStatus::user_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.PushShieldStatus.user_id)
  return user_id_;
}
void PushShieldStatus::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.PushShieldStatus.user_id)
}

// uint32 shield_status = 2;
void PushShieldStatus::clear_shield_status() {
  shield_status_ = 0u;
}
::google::protobuf::uint32 PushShieldStatus::shield_status() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.PushShieldStatus.shield_status)
  return shield_status_;
}
void PushShieldStatus::set_shield_status(::google::protobuf::uint32 value) {
  
  shield_status_ = value;
  // @@protoc_insertion_point(field_set:IM.BaseDefine.PushShieldStatus.shield_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace BaseDefine
}  // namespace IM

// @@protoc_insertion_point(global_scope)
