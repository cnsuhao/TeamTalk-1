// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IM.Login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace Login {
class IMMsgServReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMMsgServReq> {
} _IMMsgServReq_default_instance_;
class IMMsgServRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMMsgServRsp> {
} _IMMsgServRsp_default_instance_;
class IMLoginReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMLoginReq> {
} _IMLoginReq_default_instance_;
class IMLoginResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMLoginRes> {
} _IMLoginRes_default_instance_;
class IMLogoutReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMLogoutReq> {
} _IMLogoutReq_default_instance_;
class IMLogoutRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMLogoutRsp> {
} _IMLogoutRsp_default_instance_;
class IMKickUserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMKickUser> {
} _IMKickUser_default_instance_;
class IMDeviceTokenReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMDeviceTokenReq> {
} _IMDeviceTokenReq_default_instance_;
class IMDeviceTokenRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMDeviceTokenRsp> {
} _IMDeviceTokenRsp_default_instance_;
class IMKickPCClientReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMKickPCClientReq> {
} _IMKickPCClientReq_default_instance_;
class IMKickPCClientRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMKickPCClientRsp> {
} _IMKickPCClientRsp_default_instance_;
class IMPushShieldReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMPushShieldReq> {
} _IMPushShieldReq_default_instance_;
class IMPushShieldRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMPushShieldRsp> {
} _IMPushShieldRsp_default_instance_;
class IMQueryPushShieldReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMQueryPushShieldReq> {
} _IMQueryPushShieldReq_default_instance_;
class IMQueryPushShieldRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMQueryPushShieldRsp> {
} _IMQueryPushShieldRsp_default_instance_;

namespace protobuf_IM_2eLogin_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _IMMsgServReq_default_instance_.Shutdown();
  _IMMsgServRsp_default_instance_.Shutdown();
  _IMLoginReq_default_instance_.Shutdown();
  _IMLoginRes_default_instance_.Shutdown();
  _IMLogoutReq_default_instance_.Shutdown();
  _IMLogoutRsp_default_instance_.Shutdown();
  _IMKickUser_default_instance_.Shutdown();
  _IMDeviceTokenReq_default_instance_.Shutdown();
  _IMDeviceTokenRsp_default_instance_.Shutdown();
  _IMKickPCClientReq_default_instance_.Shutdown();
  _IMKickPCClientRsp_default_instance_.Shutdown();
  _IMPushShieldReq_default_instance_.Shutdown();
  _IMPushShieldRsp_default_instance_.Shutdown();
  _IMQueryPushShieldReq_default_instance_.Shutdown();
  _IMQueryPushShieldRsp_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::IM::BaseDefine::protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  _IMMsgServReq_default_instance_.DefaultConstruct();
  _IMMsgServRsp_default_instance_.DefaultConstruct();
  _IMLoginReq_default_instance_.DefaultConstruct();
  _IMLoginRes_default_instance_.DefaultConstruct();
  _IMLogoutReq_default_instance_.DefaultConstruct();
  _IMLogoutRsp_default_instance_.DefaultConstruct();
  _IMKickUser_default_instance_.DefaultConstruct();
  _IMDeviceTokenReq_default_instance_.DefaultConstruct();
  _IMDeviceTokenRsp_default_instance_.DefaultConstruct();
  _IMKickPCClientReq_default_instance_.DefaultConstruct();
  _IMKickPCClientRsp_default_instance_.DefaultConstruct();
  _IMPushShieldReq_default_instance_.DefaultConstruct();
  _IMPushShieldRsp_default_instance_.DefaultConstruct();
  _IMQueryPushShieldReq_default_instance_.DefaultConstruct();
  _IMQueryPushShieldRsp_default_instance_.DefaultConstruct();
  _IMLoginRes_default_instance_.get_mutable()->user_info_ = const_cast< ::IM::BaseDefine::UserInfo*>(
      ::IM::BaseDefine::UserInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::IM::BaseDefine::protobuf_IM_2eBaseDefine_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_IM_2eLogin_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMMsgServReq::IMMsgServReq()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eLogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMMsgServReq)
}
IMMsgServReq::IMMsgServReq(const IMMsgServReq& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMMsgServReq)
}

void IMMsgServReq::SharedCtor() {
  _cached_size_ = 0;
}

IMMsgServReq::~IMMsgServReq() {
  // @@protoc_insertion_point(destructor:IM.Login.IMMsgServReq)
  SharedDtor();
}

void IMMsgServReq::SharedDtor() {
}

void IMMsgServReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMMsgServReq& IMMsgServReq::default_instance() {
  protobuf_IM_2eLogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMMsgServReq* IMMsgServReq::New(::google::protobuf::Arena* arena) const {
  IMMsgServReq* n = new IMMsgServReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMMsgServReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMMsgServReq)
}

bool IMMsgServReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.IMMsgServReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMMsgServReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMMsgServReq)
  return false;
#undef DO_
}

void IMMsgServReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMMsgServReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:IM.Login.IMMsgServReq)
}

size_t IMMsgServReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMMsgServReq)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMMsgServReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMMsgServReq*>(&from));
}

void IMMsgServReq::MergeFrom(const IMMsgServReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMMsgServReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void IMMsgServReq::CopyFrom(const IMMsgServReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMMsgServReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgServReq::IsInitialized() const {
  return true;
}

void IMMsgServReq::Swap(IMMsgServReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMMsgServReq::InternalSwap(IMMsgServReq* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMMsgServReq::GetTypeName() const {
  return "IM.Login.IMMsgServReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMMsgServReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMMsgServRsp::kResultCodeFieldNumber;
const int IMMsgServRsp::kPriorIpFieldNumber;
const int IMMsgServRsp::kBackipIpFieldNumber;
const int IMMsgServRsp::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMMsgServRsp::IMMsgServRsp()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eLogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMMsgServRsp)
}
IMMsgServRsp::IMMsgServRsp(const IMMsgServRsp& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prior_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prior_ip().size() > 0) {
    prior_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prior_ip_);
  }
  backip_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.backip_ip().size() > 0) {
    backip_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.backip_ip_);
  }
  ::memcpy(&result_code_, &from.result_code_,
    reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&result_code_) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMMsgServRsp)
}

void IMMsgServRsp::SharedCtor() {
  prior_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backip_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_code_, 0, reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&result_code_) + sizeof(port_));
  _cached_size_ = 0;
}

IMMsgServRsp::~IMMsgServRsp() {
  // @@protoc_insertion_point(destructor:IM.Login.IMMsgServRsp)
  SharedDtor();
}

void IMMsgServRsp::SharedDtor() {
  prior_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backip_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMMsgServRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMMsgServRsp& IMMsgServRsp::default_instance() {
  protobuf_IM_2eLogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMMsgServRsp* IMMsgServRsp::New(::google::protobuf::Arena* arena) const {
  IMMsgServRsp* n = new IMMsgServRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMMsgServRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMMsgServRsp)
  prior_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backip_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_code_, 0, reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&result_code_) + sizeof(port_));
}

bool IMMsgServRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.IMMsgServRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .IM.BaseDefine.ResultType result_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result_code(static_cast< ::IM::BaseDefine::ResultType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string prior_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prior_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prior_ip().data(), this->prior_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Login.IMMsgServRsp.prior_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string backip_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backip_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->backip_ip().data(), this->backip_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Login.IMMsgServRsp.backip_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMMsgServRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMMsgServRsp)
  return false;
#undef DO_
}

void IMMsgServRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMMsgServRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IM.BaseDefine.ResultType result_code = 1;
  if (this->result_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result_code(), output);
  }

  // string prior_ip = 2;
  if (this->prior_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prior_ip().data(), this->prior_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Login.IMMsgServRsp.prior_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->prior_ip(), output);
  }

  // string backip_ip = 3;
  if (this->backip_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->backip_ip().data(), this->backip_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Login.IMMsgServRsp.backip_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->backip_ip(), output);
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Login.IMMsgServRsp)
}

size_t IMMsgServRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMMsgServRsp)
  size_t total_size = 0;

  // string prior_ip = 2;
  if (this->prior_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prior_ip());
  }

  // string backip_ip = 3;
  if (this->backip_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->backip_ip());
  }

  // .IM.BaseDefine.ResultType result_code = 1;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_code());
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMMsgServRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMMsgServRsp*>(&from));
}

void IMMsgServRsp::MergeFrom(const IMMsgServRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMMsgServRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prior_ip().size() > 0) {

    prior_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prior_ip_);
  }
  if (from.backip_ip().size() > 0) {

    backip_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.backip_ip_);
  }
  if (from.result_code() != 0) {
    set_result_code(from.result_code());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void IMMsgServRsp::CopyFrom(const IMMsgServRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMMsgServRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgServRsp::IsInitialized() const {
  return true;
}

void IMMsgServRsp::Swap(IMMsgServRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMMsgServRsp::InternalSwap(IMMsgServRsp* other) {
  prior_ip_.Swap(&other->prior_ip_);
  backip_ip_.Swap(&other->backip_ip_);
  std::swap(result_code_, other->result_code_);
  std::swap(port_, other->port_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMMsgServRsp::GetTypeName() const {
  return "IM.Login.IMMsgServRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMMsgServRsp

// .IM.BaseDefine.ResultType result_code = 1;
void IMMsgServRsp::clear_result_code() {
  result_code_ = 0;
}
::IM::BaseDefine::ResultType IMMsgServRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMMsgServRsp.result_code)
  return static_cast< ::IM::BaseDefine::ResultType >(result_code_);
}
void IMMsgServRsp::set_result_code(::IM::BaseDefine::ResultType value) {
  
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMMsgServRsp.result_code)
}

// string prior_ip = 2;
void IMMsgServRsp::clear_prior_ip() {
  prior_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMMsgServRsp::prior_ip() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMMsgServRsp.prior_ip)
  return prior_ip_.GetNoArena();
}
void IMMsgServRsp::set_prior_ip(const ::std::string& value) {
  
  prior_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.IMMsgServRsp.prior_ip)
}
#if LANG_CXX11
void IMMsgServRsp::set_prior_ip(::std::string&& value) {
  
  prior_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.IMMsgServRsp.prior_ip)
}
#endif
void IMMsgServRsp::set_prior_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  prior_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.IMMsgServRsp.prior_ip)
}
void IMMsgServRsp::set_prior_ip(const char* value, size_t size) {
  
  prior_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMMsgServRsp.prior_ip)
}
::std::string* IMMsgServRsp::mutable_prior_ip() {
  
  // @@protoc_insertion_point(field_mutable:IM.Login.IMMsgServRsp.prior_ip)
  return prior_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMMsgServRsp::release_prior_ip() {
  // @@protoc_insertion_point(field_release:IM.Login.IMMsgServRsp.prior_ip)
  
  return prior_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMMsgServRsp::set_allocated_prior_ip(::std::string* prior_ip) {
  if (prior_ip != NULL) {
    
  } else {
    
  }
  prior_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prior_ip);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMMsgServRsp.prior_ip)
}

// string backip_ip = 3;
void IMMsgServRsp::clear_backip_ip() {
  backip_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMMsgServRsp::backip_ip() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMMsgServRsp.backip_ip)
  return backip_ip_.GetNoArena();
}
void IMMsgServRsp::set_backip_ip(const ::std::string& value) {
  
  backip_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.IMMsgServRsp.backip_ip)
}
#if LANG_CXX11
void IMMsgServRsp::set_backip_ip(::std::string&& value) {
  
  backip_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.IMMsgServRsp.backip_ip)
}
#endif
void IMMsgServRsp::set_backip_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  backip_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.IMMsgServRsp.backip_ip)
}
void IMMsgServRsp::set_backip_ip(const char* value, size_t size) {
  
  backip_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMMsgServRsp.backip_ip)
}
::std::string* IMMsgServRsp::mutable_backip_ip() {
  
  // @@protoc_insertion_point(field_mutable:IM.Login.IMMsgServRsp.backip_ip)
  return backip_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMMsgServRsp::release_backip_ip() {
  // @@protoc_insertion_point(field_release:IM.Login.IMMsgServRsp.backip_ip)
  
  return backip_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMMsgServRsp::set_allocated_backip_ip(::std::string* backip_ip) {
  if (backip_ip != NULL) {
    
  } else {
    
  }
  backip_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), backip_ip);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMMsgServRsp.backip_ip)
}

// uint32 port = 4;
void IMMsgServRsp::clear_port() {
  port_ = 0u;
}
::google::protobuf::uint32 IMMsgServRsp::port() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMMsgServRsp.port)
  return port_;
}
void IMMsgServRsp::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMMsgServRsp.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMLoginReq::kUserNameFieldNumber;
const int IMLoginReq::kPasswordFieldNumber;
const int IMLoginReq::kOnlineStatusFieldNumber;
const int IMLoginReq::kClientTypeFieldNumber;
const int IMLoginReq::kClientVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMLoginReq::IMLoginReq()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eLogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMLoginReq)
}
IMLoginReq::IMLoginReq(const IMLoginReq& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_name().size() > 0) {
    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  client_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_version().size() > 0) {
    client_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_version_);
  }
  ::memcpy(&online_status_, &from.online_status_,
    reinterpret_cast<char*>(&client_type_) -
    reinterpret_cast<char*>(&online_status_) + sizeof(client_type_));
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMLoginReq)
}

void IMLoginReq::SharedCtor() {
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&online_status_, 0, reinterpret_cast<char*>(&client_type_) -
    reinterpret_cast<char*>(&online_status_) + sizeof(client_type_));
  _cached_size_ = 0;
}

IMLoginReq::~IMLoginReq() {
  // @@protoc_insertion_point(destructor:IM.Login.IMLoginReq)
  SharedDtor();
}

void IMLoginReq::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMLoginReq& IMLoginReq::default_instance() {
  protobuf_IM_2eLogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMLoginReq* IMLoginReq::New(::google::protobuf::Arena* arena) const {
  IMLoginReq* n = new IMLoginReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMLoginReq)
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&online_status_, 0, reinterpret_cast<char*>(&client_type_) -
    reinterpret_cast<char*>(&online_status_) + sizeof(client_type_));
}

bool IMLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.IMLoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Login.IMLoginReq.user_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Login.IMLoginReq.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.UserStatType online_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_online_status(static_cast< ::IM::BaseDefine::UserStatType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.ClientType client_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_client_type(static_cast< ::IM::BaseDefine::ClientType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_version().data(), this->client_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Login.IMLoginReq.client_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMLoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMLoginReq)
  return false;
#undef DO_
}

void IMLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMLoginReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_name = 1;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Login.IMLoginReq.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_name(), output);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Login.IMLoginReq.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // .IM.BaseDefine.UserStatType online_status = 3;
  if (this->online_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->online_status(), output);
  }

  // .IM.BaseDefine.ClientType client_type = 4;
  if (this->client_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->client_type(), output);
  }

  // string client_version = 5;
  if (this->client_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_version().data(), this->client_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Login.IMLoginReq.client_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->client_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Login.IMLoginReq)
}

size_t IMLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMLoginReq)
  size_t total_size = 0;

  // string user_name = 1;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // string client_version = 5;
  if (this->client_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_version());
  }

  // .IM.BaseDefine.UserStatType online_status = 3;
  if (this->online_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->online_status());
  }

  // .IM.BaseDefine.ClientType client_type = 4;
  if (this->client_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMLoginReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMLoginReq*>(&from));
}

void IMLoginReq::MergeFrom(const IMLoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.client_version().size() > 0) {

    client_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_version_);
  }
  if (from.online_status() != 0) {
    set_online_status(from.online_status());
  }
  if (from.client_type() != 0) {
    set_client_type(from.client_type());
  }
}

void IMLoginReq::CopyFrom(const IMLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMLoginReq::IsInitialized() const {
  return true;
}

void IMLoginReq::Swap(IMLoginReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMLoginReq::InternalSwap(IMLoginReq* other) {
  user_name_.Swap(&other->user_name_);
  password_.Swap(&other->password_);
  client_version_.Swap(&other->client_version_);
  std::swap(online_status_, other->online_status_);
  std::swap(client_type_, other->client_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMLoginReq::GetTypeName() const {
  return "IM.Login.IMLoginReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMLoginReq

// string user_name = 1;
void IMLoginReq::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMLoginReq::user_name() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginReq.user_name)
  return user_name_.GetNoArena();
}
void IMLoginReq::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginReq.user_name)
}
#if LANG_CXX11
void IMLoginReq::set_user_name(::std::string&& value) {
  
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.IMLoginReq.user_name)
}
#endif
void IMLoginReq::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.IMLoginReq.user_name)
}
void IMLoginReq::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMLoginReq.user_name)
}
::std::string* IMLoginReq::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:IM.Login.IMLoginReq.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMLoginReq::release_user_name() {
  // @@protoc_insertion_point(field_release:IM.Login.IMLoginReq.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMLoginReq::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMLoginReq.user_name)
}

// string password = 2;
void IMLoginReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMLoginReq::password() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginReq.password)
  return password_.GetNoArena();
}
void IMLoginReq::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginReq.password)
}
#if LANG_CXX11
void IMLoginReq::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.IMLoginReq.password)
}
#endif
void IMLoginReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.IMLoginReq.password)
}
void IMLoginReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMLoginReq.password)
}
::std::string* IMLoginReq::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:IM.Login.IMLoginReq.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMLoginReq::release_password() {
  // @@protoc_insertion_point(field_release:IM.Login.IMLoginReq.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMLoginReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMLoginReq.password)
}

// .IM.BaseDefine.UserStatType online_status = 3;
void IMLoginReq::clear_online_status() {
  online_status_ = 0;
}
::IM::BaseDefine::UserStatType IMLoginReq::online_status() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginReq.online_status)
  return static_cast< ::IM::BaseDefine::UserStatType >(online_status_);
}
void IMLoginReq::set_online_status(::IM::BaseDefine::UserStatType value) {
  
  online_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginReq.online_status)
}

// .IM.BaseDefine.ClientType client_type = 4;
void IMLoginReq::clear_client_type() {
  client_type_ = 0;
}
::IM::BaseDefine::ClientType IMLoginReq::client_type() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginReq.client_type)
  return static_cast< ::IM::BaseDefine::ClientType >(client_type_);
}
void IMLoginReq::set_client_type(::IM::BaseDefine::ClientType value) {
  
  client_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginReq.client_type)
}

// string client_version = 5;
void IMLoginReq::clear_client_version() {
  client_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMLoginReq::client_version() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginReq.client_version)
  return client_version_.GetNoArena();
}
void IMLoginReq::set_client_version(const ::std::string& value) {
  
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginReq.client_version)
}
#if LANG_CXX11
void IMLoginReq::set_client_version(::std::string&& value) {
  
  client_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.IMLoginReq.client_version)
}
#endif
void IMLoginReq::set_client_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.IMLoginReq.client_version)
}
void IMLoginReq::set_client_version(const char* value, size_t size) {
  
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMLoginReq.client_version)
}
::std::string* IMLoginReq::mutable_client_version() {
  
  // @@protoc_insertion_point(field_mutable:IM.Login.IMLoginReq.client_version)
  return client_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMLoginReq::release_client_version() {
  // @@protoc_insertion_point(field_release:IM.Login.IMLoginReq.client_version)
  
  return client_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMLoginReq::set_allocated_client_version(::std::string* client_version) {
  if (client_version != NULL) {
    
  } else {
    
  }
  client_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_version);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMLoginReq.client_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMLoginRes::kServerTimeFieldNumber;
const int IMLoginRes::kResultCodeFieldNumber;
const int IMLoginRes::kResultStringFieldNumber;
const int IMLoginRes::kOnlineStatusFieldNumber;
const int IMLoginRes::kUserInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMLoginRes::IMLoginRes()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eLogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMLoginRes)
}
IMLoginRes::IMLoginRes(const IMLoginRes& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.result_string().size() > 0) {
    result_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_string_);
  }
  if (from.has_user_info()) {
    user_info_ = new ::IM::BaseDefine::UserInfo(*from.user_info_);
  } else {
    user_info_ = NULL;
  }
  ::memcpy(&server_time_, &from.server_time_,
    reinterpret_cast<char*>(&online_status_) -
    reinterpret_cast<char*>(&server_time_) + sizeof(online_status_));
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMLoginRes)
}

void IMLoginRes::SharedCtor() {
  result_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_info_, 0, reinterpret_cast<char*>(&online_status_) -
    reinterpret_cast<char*>(&user_info_) + sizeof(online_status_));
  _cached_size_ = 0;
}

IMLoginRes::~IMLoginRes() {
  // @@protoc_insertion_point(destructor:IM.Login.IMLoginRes)
  SharedDtor();
}

void IMLoginRes::SharedDtor() {
  result_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete user_info_;
  }
}

void IMLoginRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMLoginRes& IMLoginRes::default_instance() {
  protobuf_IM_2eLogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMLoginRes* IMLoginRes::New(::google::protobuf::Arena* arena) const {
  IMLoginRes* n = new IMLoginRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMLoginRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMLoginRes)
  result_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && user_info_ != NULL) {
    delete user_info_;
  }
  user_info_ = NULL;
  ::memset(&server_time_, 0, reinterpret_cast<char*>(&online_status_) -
    reinterpret_cast<char*>(&server_time_) + sizeof(online_status_));
}

bool IMLoginRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.IMLoginRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 server_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.ResultType result_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result_code(static_cast< ::IM::BaseDefine::ResultType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string result_string = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->result_string().data(), this->result_string().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Login.IMLoginRes.result_string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.UserStatType online_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_online_status(static_cast< ::IM::BaseDefine::UserStatType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.UserInfo user_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMLoginRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMLoginRes)
  return false;
#undef DO_
}

void IMLoginRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMLoginRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_time = 1;
  if (this->server_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_time(), output);
  }

  // .IM.BaseDefine.ResultType result_code = 2;
  if (this->result_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result_code(), output);
  }

  // string result_string = 3;
  if (this->result_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result_string().data(), this->result_string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Login.IMLoginRes.result_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->result_string(), output);
  }

  // .IM.BaseDefine.UserStatType online_status = 4;
  if (this->online_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->online_status(), output);
  }

  // .IM.BaseDefine.UserInfo user_info = 5;
  if (this->has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->user_info_, output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Login.IMLoginRes)
}

size_t IMLoginRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMLoginRes)
  size_t total_size = 0;

  // string result_string = 3;
  if (this->result_string().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->result_string());
  }

  // .IM.BaseDefine.UserInfo user_info = 5;
  if (this->has_user_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_info_);
  }

  // uint32 server_time = 1;
  if (this->server_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_time());
  }

  // .IM.BaseDefine.ResultType result_code = 2;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_code());
  }

  // .IM.BaseDefine.UserStatType online_status = 4;
  if (this->online_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->online_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMLoginRes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMLoginRes*>(&from));
}

void IMLoginRes::MergeFrom(const IMLoginRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMLoginRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result_string().size() > 0) {

    result_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_string_);
  }
  if (from.has_user_info()) {
    mutable_user_info()->::IM::BaseDefine::UserInfo::MergeFrom(from.user_info());
  }
  if (from.server_time() != 0) {
    set_server_time(from.server_time());
  }
  if (from.result_code() != 0) {
    set_result_code(from.result_code());
  }
  if (from.online_status() != 0) {
    set_online_status(from.online_status());
  }
}

void IMLoginRes::CopyFrom(const IMLoginRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMLoginRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMLoginRes::IsInitialized() const {
  return true;
}

void IMLoginRes::Swap(IMLoginRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMLoginRes::InternalSwap(IMLoginRes* other) {
  result_string_.Swap(&other->result_string_);
  std::swap(user_info_, other->user_info_);
  std::swap(server_time_, other->server_time_);
  std::swap(result_code_, other->result_code_);
  std::swap(online_status_, other->online_status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMLoginRes::GetTypeName() const {
  return "IM.Login.IMLoginRes";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMLoginRes

// uint32 server_time = 1;
void IMLoginRes::clear_server_time() {
  server_time_ = 0u;
}
::google::protobuf::uint32 IMLoginRes::server_time() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginRes.server_time)
  return server_time_;
}
void IMLoginRes::set_server_time(::google::protobuf::uint32 value) {
  
  server_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginRes.server_time)
}

// .IM.BaseDefine.ResultType result_code = 2;
void IMLoginRes::clear_result_code() {
  result_code_ = 0;
}
::IM::BaseDefine::ResultType IMLoginRes::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginRes.result_code)
  return static_cast< ::IM::BaseDefine::ResultType >(result_code_);
}
void IMLoginRes::set_result_code(::IM::BaseDefine::ResultType value) {
  
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginRes.result_code)
}

// string result_string = 3;
void IMLoginRes::clear_result_string() {
  result_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMLoginRes::result_string() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginRes.result_string)
  return result_string_.GetNoArena();
}
void IMLoginRes::set_result_string(const ::std::string& value) {
  
  result_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginRes.result_string)
}
#if LANG_CXX11
void IMLoginRes::set_result_string(::std::string&& value) {
  
  result_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.IMLoginRes.result_string)
}
#endif
void IMLoginRes::set_result_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  result_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.IMLoginRes.result_string)
}
void IMLoginRes::set_result_string(const char* value, size_t size) {
  
  result_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMLoginRes.result_string)
}
::std::string* IMLoginRes::mutable_result_string() {
  
  // @@protoc_insertion_point(field_mutable:IM.Login.IMLoginRes.result_string)
  return result_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMLoginRes::release_result_string() {
  // @@protoc_insertion_point(field_release:IM.Login.IMLoginRes.result_string)
  
  return result_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMLoginRes::set_allocated_result_string(::std::string* result_string) {
  if (result_string != NULL) {
    
  } else {
    
  }
  result_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result_string);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMLoginRes.result_string)
}

// .IM.BaseDefine.UserStatType online_status = 4;
void IMLoginRes::clear_online_status() {
  online_status_ = 0;
}
::IM::BaseDefine::UserStatType IMLoginRes::online_status() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginRes.online_status)
  return static_cast< ::IM::BaseDefine::UserStatType >(online_status_);
}
void IMLoginRes::set_online_status(::IM::BaseDefine::UserStatType value) {
  
  online_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginRes.online_status)
}

// .IM.BaseDefine.UserInfo user_info = 5;
bool IMLoginRes::has_user_info() const {
  return this != internal_default_instance() && user_info_ != NULL;
}
void IMLoginRes::clear_user_info() {
  if (GetArenaNoVirtual() == NULL && user_info_ != NULL) delete user_info_;
  user_info_ = NULL;
}
const ::IM::BaseDefine::UserInfo& IMLoginRes::user_info() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginRes.user_info)
  return user_info_ != NULL ? *user_info_
                         : *::IM::BaseDefine::UserInfo::internal_default_instance();
}
::IM::BaseDefine::UserInfo* IMLoginRes::mutable_user_info() {
  
  if (user_info_ == NULL) {
    user_info_ = new ::IM::BaseDefine::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:IM.Login.IMLoginRes.user_info)
  return user_info_;
}
::IM::BaseDefine::UserInfo* IMLoginRes::release_user_info() {
  // @@protoc_insertion_point(field_release:IM.Login.IMLoginRes.user_info)
  
  ::IM::BaseDefine::UserInfo* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
void IMLoginRes::set_allocated_user_info(::IM::BaseDefine::UserInfo* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMLoginRes.user_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMLogoutReq::IMLogoutReq()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eLogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMLogoutReq)
}
IMLogoutReq::IMLogoutReq(const IMLogoutReq& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMLogoutReq)
}

void IMLogoutReq::SharedCtor() {
  _cached_size_ = 0;
}

IMLogoutReq::~IMLogoutReq() {
  // @@protoc_insertion_point(destructor:IM.Login.IMLogoutReq)
  SharedDtor();
}

void IMLogoutReq::SharedDtor() {
}

void IMLogoutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMLogoutReq& IMLogoutReq::default_instance() {
  protobuf_IM_2eLogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMLogoutReq* IMLogoutReq::New(::google::protobuf::Arena* arena) const {
  IMLogoutReq* n = new IMLogoutReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMLogoutReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMLogoutReq)
}

bool IMLogoutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.IMLogoutReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMLogoutReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMLogoutReq)
  return false;
#undef DO_
}

void IMLogoutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMLogoutReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:IM.Login.IMLogoutReq)
}

size_t IMLogoutReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMLogoutReq)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMLogoutReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMLogoutReq*>(&from));
}

void IMLogoutReq::MergeFrom(const IMLogoutReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMLogoutReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void IMLogoutReq::CopyFrom(const IMLogoutReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMLogoutReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMLogoutReq::IsInitialized() const {
  return true;
}

void IMLogoutReq::Swap(IMLogoutReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMLogoutReq::InternalSwap(IMLogoutReq* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMLogoutReq::GetTypeName() const {
  return "IM.Login.IMLogoutReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMLogoutReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMLogoutRsp::kResultCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMLogoutRsp::IMLogoutRsp()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eLogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMLogoutRsp)
}
IMLogoutRsp::IMLogoutRsp(const IMLogoutRsp& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_code_ = from.result_code_;
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMLogoutRsp)
}

void IMLogoutRsp::SharedCtor() {
  result_code_ = 0u;
  _cached_size_ = 0;
}

IMLogoutRsp::~IMLogoutRsp() {
  // @@protoc_insertion_point(destructor:IM.Login.IMLogoutRsp)
  SharedDtor();
}

void IMLogoutRsp::SharedDtor() {
}

void IMLogoutRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMLogoutRsp& IMLogoutRsp::default_instance() {
  protobuf_IM_2eLogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMLogoutRsp* IMLogoutRsp::New(::google::protobuf::Arena* arena) const {
  IMLogoutRsp* n = new IMLogoutRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMLogoutRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMLogoutRsp)
  result_code_ = 0u;
}

bool IMLogoutRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.IMLogoutRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 result_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMLogoutRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMLogoutRsp)
  return false;
#undef DO_
}

void IMLogoutRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMLogoutRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result_code = 1;
  if (this->result_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_code(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Login.IMLogoutRsp)
}

size_t IMLogoutRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMLogoutRsp)
  size_t total_size = 0;

  // uint32 result_code = 1;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMLogoutRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMLogoutRsp*>(&from));
}

void IMLogoutRsp::MergeFrom(const IMLogoutRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMLogoutRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result_code() != 0) {
    set_result_code(from.result_code());
  }
}

void IMLogoutRsp::CopyFrom(const IMLogoutRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMLogoutRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMLogoutRsp::IsInitialized() const {
  return true;
}

void IMLogoutRsp::Swap(IMLogoutRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMLogoutRsp::InternalSwap(IMLogoutRsp* other) {
  std::swap(result_code_, other->result_code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMLogoutRsp::GetTypeName() const {
  return "IM.Login.IMLogoutRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMLogoutRsp

// uint32 result_code = 1;
void IMLogoutRsp::clear_result_code() {
  result_code_ = 0u;
}
::google::protobuf::uint32 IMLogoutRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLogoutRsp.result_code)
  return result_code_;
}
void IMLogoutRsp::set_result_code(::google::protobuf::uint32 value) {
  
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMLogoutRsp.result_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMKickUser::kUserIdFieldNumber;
const int IMKickUser::kKickReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMKickUser::IMKickUser()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eLogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMKickUser)
}
IMKickUser::IMKickUser(const IMKickUser& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&kick_reason_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(kick_reason_));
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMKickUser)
}

void IMKickUser::SharedCtor() {
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&kick_reason_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(kick_reason_));
  _cached_size_ = 0;
}

IMKickUser::~IMKickUser() {
  // @@protoc_insertion_point(destructor:IM.Login.IMKickUser)
  SharedDtor();
}

void IMKickUser::SharedDtor() {
}

void IMKickUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMKickUser& IMKickUser::default_instance() {
  protobuf_IM_2eLogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMKickUser* IMKickUser::New(::google::protobuf::Arena* arena) const {
  IMKickUser* n = new IMKickUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMKickUser::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMKickUser)
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&kick_reason_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(kick_reason_));
}

bool IMKickUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.IMKickUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.KickReasonType kick_reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_kick_reason(static_cast< ::IM::BaseDefine::KickReasonType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMKickUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMKickUser)
  return false;
#undef DO_
}

void IMKickUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMKickUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // .IM.BaseDefine.KickReasonType kick_reason = 2;
  if (this->kick_reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->kick_reason(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Login.IMKickUser)
}

size_t IMKickUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMKickUser)
  size_t total_size = 0;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // .IM.BaseDefine.KickReasonType kick_reason = 2;
  if (this->kick_reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kick_reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMKickUser::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMKickUser*>(&from));
}

void IMKickUser::MergeFrom(const IMKickUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMKickUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.kick_reason() != 0) {
    set_kick_reason(from.kick_reason());
  }
}

void IMKickUser::CopyFrom(const IMKickUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMKickUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMKickUser::IsInitialized() const {
  return true;
}

void IMKickUser::Swap(IMKickUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMKickUser::InternalSwap(IMKickUser* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(kick_reason_, other->kick_reason_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMKickUser::GetTypeName() const {
  return "IM.Login.IMKickUser";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMKickUser

// uint32 user_id = 1;
void IMKickUser::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMKickUser::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMKickUser.user_id)
  return user_id_;
}
void IMKickUser::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMKickUser.user_id)
}

// .IM.BaseDefine.KickReasonType kick_reason = 2;
void IMKickUser::clear_kick_reason() {
  kick_reason_ = 0;
}
::IM::BaseDefine::KickReasonType IMKickUser::kick_reason() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMKickUser.kick_reason)
  return static_cast< ::IM::BaseDefine::KickReasonType >(kick_reason_);
}
void IMKickUser::set_kick_reason(::IM::BaseDefine::KickReasonType value) {
  
  kick_reason_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMKickUser.kick_reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMDeviceTokenReq::kUserIdFieldNumber;
const int IMDeviceTokenReq::kDeviceTokenFieldNumber;
const int IMDeviceTokenReq::kClientTypeFieldNumber;
const int IMDeviceTokenReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMDeviceTokenReq::IMDeviceTokenReq()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eLogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMDeviceTokenReq)
}
IMDeviceTokenReq::IMDeviceTokenReq(const IMDeviceTokenReq& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device_token().size() > 0) {
    device_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_token_);
  }
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&client_type_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(client_type_));
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMDeviceTokenReq)
}

void IMDeviceTokenReq::SharedCtor() {
  device_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&client_type_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(client_type_));
  _cached_size_ = 0;
}

IMDeviceTokenReq::~IMDeviceTokenReq() {
  // @@protoc_insertion_point(destructor:IM.Login.IMDeviceTokenReq)
  SharedDtor();
}

void IMDeviceTokenReq::SharedDtor() {
  device_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMDeviceTokenReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMDeviceTokenReq& IMDeviceTokenReq::default_instance() {
  protobuf_IM_2eLogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMDeviceTokenReq* IMDeviceTokenReq::New(::google::protobuf::Arena* arena) const {
  IMDeviceTokenReq* n = new IMDeviceTokenReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMDeviceTokenReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMDeviceTokenReq)
  device_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&client_type_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(client_type_));
}

bool IMDeviceTokenReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.IMDeviceTokenReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string device_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_token().data(), this->device_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Login.IMDeviceTokenReq.device_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.ClientType client_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_client_type(static_cast< ::IM::BaseDefine::ClientType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMDeviceTokenReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMDeviceTokenReq)
  return false;
#undef DO_
}

void IMDeviceTokenReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMDeviceTokenReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // string device_token = 2;
  if (this->device_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_token().data(), this->device_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Login.IMDeviceTokenReq.device_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->device_token(), output);
  }

  // .IM.BaseDefine.ClientType client_type = 3;
  if (this->client_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->client_type(), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Login.IMDeviceTokenReq)
}

size_t IMDeviceTokenReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMDeviceTokenReq)
  size_t total_size = 0;

  // string device_token = 2;
  if (this->device_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_token());
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // .IM.BaseDefine.ClientType client_type = 3;
  if (this->client_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMDeviceTokenReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMDeviceTokenReq*>(&from));
}

void IMDeviceTokenReq::MergeFrom(const IMDeviceTokenReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMDeviceTokenReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_token().size() > 0) {

    device_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_token_);
  }
  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.client_type() != 0) {
    set_client_type(from.client_type());
  }
}

void IMDeviceTokenReq::CopyFrom(const IMDeviceTokenReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMDeviceTokenReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMDeviceTokenReq::IsInitialized() const {
  return true;
}

void IMDeviceTokenReq::Swap(IMDeviceTokenReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMDeviceTokenReq::InternalSwap(IMDeviceTokenReq* other) {
  device_token_.Swap(&other->device_token_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(user_id_, other->user_id_);
  std::swap(client_type_, other->client_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMDeviceTokenReq::GetTypeName() const {
  return "IM.Login.IMDeviceTokenReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMDeviceTokenReq

// uint32 user_id = 1;
void IMDeviceTokenReq::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMDeviceTokenReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMDeviceTokenReq.user_id)
  return user_id_;
}
void IMDeviceTokenReq::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMDeviceTokenReq.user_id)
}

// string device_token = 2;
void IMDeviceTokenReq::clear_device_token() {
  device_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMDeviceTokenReq::device_token() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMDeviceTokenReq.device_token)
  return device_token_.GetNoArena();
}
void IMDeviceTokenReq::set_device_token(const ::std::string& value) {
  
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.IMDeviceTokenReq.device_token)
}
#if LANG_CXX11
void IMDeviceTokenReq::set_device_token(::std::string&& value) {
  
  device_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.IMDeviceTokenReq.device_token)
}
#endif
void IMDeviceTokenReq::set_device_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.IMDeviceTokenReq.device_token)
}
void IMDeviceTokenReq::set_device_token(const char* value, size_t size) {
  
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMDeviceTokenReq.device_token)
}
::std::string* IMDeviceTokenReq::mutable_device_token() {
  
  // @@protoc_insertion_point(field_mutable:IM.Login.IMDeviceTokenReq.device_token)
  return device_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMDeviceTokenReq::release_device_token() {
  // @@protoc_insertion_point(field_release:IM.Login.IMDeviceTokenReq.device_token)
  
  return device_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMDeviceTokenReq::set_allocated_device_token(::std::string* device_token) {
  if (device_token != NULL) {
    
  } else {
    
  }
  device_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_token);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMDeviceTokenReq.device_token)
}

// .IM.BaseDefine.ClientType client_type = 3;
void IMDeviceTokenReq::clear_client_type() {
  client_type_ = 0;
}
::IM::BaseDefine::ClientType IMDeviceTokenReq::client_type() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMDeviceTokenReq.client_type)
  return static_cast< ::IM::BaseDefine::ClientType >(client_type_);
}
void IMDeviceTokenReq::set_client_type(::IM::BaseDefine::ClientType value) {
  
  client_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMDeviceTokenReq.client_type)
}

// bytes attach_data = 20;
void IMDeviceTokenReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMDeviceTokenReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMDeviceTokenReq.attach_data)
  return attach_data_.GetNoArena();
}
void IMDeviceTokenReq::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.IMDeviceTokenReq.attach_data)
}
#if LANG_CXX11
void IMDeviceTokenReq::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.IMDeviceTokenReq.attach_data)
}
#endif
void IMDeviceTokenReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.IMDeviceTokenReq.attach_data)
}
void IMDeviceTokenReq::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMDeviceTokenReq.attach_data)
}
::std::string* IMDeviceTokenReq::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Login.IMDeviceTokenReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMDeviceTokenReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Login.IMDeviceTokenReq.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMDeviceTokenReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMDeviceTokenReq.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMDeviceTokenRsp::kUserIdFieldNumber;
const int IMDeviceTokenRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMDeviceTokenRsp::IMDeviceTokenRsp()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eLogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMDeviceTokenRsp)
}
IMDeviceTokenRsp::IMDeviceTokenRsp(const IMDeviceTokenRsp& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMDeviceTokenRsp)
}

void IMDeviceTokenRsp::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  _cached_size_ = 0;
}

IMDeviceTokenRsp::~IMDeviceTokenRsp() {
  // @@protoc_insertion_point(destructor:IM.Login.IMDeviceTokenRsp)
  SharedDtor();
}

void IMDeviceTokenRsp::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMDeviceTokenRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMDeviceTokenRsp& IMDeviceTokenRsp::default_instance() {
  protobuf_IM_2eLogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMDeviceTokenRsp* IMDeviceTokenRsp::New(::google::protobuf::Arena* arena) const {
  IMDeviceTokenRsp* n = new IMDeviceTokenRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMDeviceTokenRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMDeviceTokenRsp)
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
}

bool IMDeviceTokenRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.IMDeviceTokenRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMDeviceTokenRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMDeviceTokenRsp)
  return false;
#undef DO_
}

void IMDeviceTokenRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMDeviceTokenRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Login.IMDeviceTokenRsp)
}

size_t IMDeviceTokenRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMDeviceTokenRsp)
  size_t total_size = 0;

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMDeviceTokenRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMDeviceTokenRsp*>(&from));
}

void IMDeviceTokenRsp::MergeFrom(const IMDeviceTokenRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMDeviceTokenRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void IMDeviceTokenRsp::CopyFrom(const IMDeviceTokenRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMDeviceTokenRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMDeviceTokenRsp::IsInitialized() const {
  return true;
}

void IMDeviceTokenRsp::Swap(IMDeviceTokenRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMDeviceTokenRsp::InternalSwap(IMDeviceTokenRsp* other) {
  attach_data_.Swap(&other->attach_data_);
  std::swap(user_id_, other->user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMDeviceTokenRsp::GetTypeName() const {
  return "IM.Login.IMDeviceTokenRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMDeviceTokenRsp

// uint32 user_id = 1;
void IMDeviceTokenRsp::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMDeviceTokenRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMDeviceTokenRsp.user_id)
  return user_id_;
}
void IMDeviceTokenRsp::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMDeviceTokenRsp.user_id)
}

// bytes attach_data = 20;
void IMDeviceTokenRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMDeviceTokenRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMDeviceTokenRsp.attach_data)
  return attach_data_.GetNoArena();
}
void IMDeviceTokenRsp::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.IMDeviceTokenRsp.attach_data)
}
#if LANG_CXX11
void IMDeviceTokenRsp::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.IMDeviceTokenRsp.attach_data)
}
#endif
void IMDeviceTokenRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.IMDeviceTokenRsp.attach_data)
}
void IMDeviceTokenRsp::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMDeviceTokenRsp.attach_data)
}
::std::string* IMDeviceTokenRsp::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Login.IMDeviceTokenRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMDeviceTokenRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Login.IMDeviceTokenRsp.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMDeviceTokenRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMDeviceTokenRsp.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMKickPCClientReq::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMKickPCClientReq::IMKickPCClientReq()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eLogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMKickPCClientReq)
}
IMKickPCClientReq::IMKickPCClientReq(const IMKickPCClientReq& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMKickPCClientReq)
}

void IMKickPCClientReq::SharedCtor() {
  user_id_ = 0u;
  _cached_size_ = 0;
}

IMKickPCClientReq::~IMKickPCClientReq() {
  // @@protoc_insertion_point(destructor:IM.Login.IMKickPCClientReq)
  SharedDtor();
}

void IMKickPCClientReq::SharedDtor() {
}

void IMKickPCClientReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMKickPCClientReq& IMKickPCClientReq::default_instance() {
  protobuf_IM_2eLogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMKickPCClientReq* IMKickPCClientReq::New(::google::protobuf::Arena* arena) const {
  IMKickPCClientReq* n = new IMKickPCClientReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMKickPCClientReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMKickPCClientReq)
  user_id_ = 0u;
}

bool IMKickPCClientReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.IMKickPCClientReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMKickPCClientReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMKickPCClientReq)
  return false;
#undef DO_
}

void IMKickPCClientReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMKickPCClientReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Login.IMKickPCClientReq)
}

size_t IMKickPCClientReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMKickPCClientReq)
  size_t total_size = 0;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMKickPCClientReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMKickPCClientReq*>(&from));
}

void IMKickPCClientReq::MergeFrom(const IMKickPCClientReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMKickPCClientReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void IMKickPCClientReq::CopyFrom(const IMKickPCClientReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMKickPCClientReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMKickPCClientReq::IsInitialized() const {
  return true;
}

void IMKickPCClientReq::Swap(IMKickPCClientReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMKickPCClientReq::InternalSwap(IMKickPCClientReq* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMKickPCClientReq::GetTypeName() const {
  return "IM.Login.IMKickPCClientReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMKickPCClientReq

// uint32 user_id = 1;
void IMKickPCClientReq::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMKickPCClientReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMKickPCClientReq.user_id)
  return user_id_;
}
void IMKickPCClientReq::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMKickPCClientReq.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMKickPCClientRsp::kUserIdFieldNumber;
const int IMKickPCClientRsp::kResultCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMKickPCClientRsp::IMKickPCClientRsp()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eLogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMKickPCClientRsp)
}
IMKickPCClientRsp::IMKickPCClientRsp(const IMKickPCClientRsp& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(result_code_));
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMKickPCClientRsp)
}

void IMKickPCClientRsp::SharedCtor() {
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(result_code_));
  _cached_size_ = 0;
}

IMKickPCClientRsp::~IMKickPCClientRsp() {
  // @@protoc_insertion_point(destructor:IM.Login.IMKickPCClientRsp)
  SharedDtor();
}

void IMKickPCClientRsp::SharedDtor() {
}

void IMKickPCClientRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMKickPCClientRsp& IMKickPCClientRsp::default_instance() {
  protobuf_IM_2eLogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMKickPCClientRsp* IMKickPCClientRsp::New(::google::protobuf::Arena* arena) const {
  IMKickPCClientRsp* n = new IMKickPCClientRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMKickPCClientRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMKickPCClientRsp)
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(result_code_));
}

bool IMKickPCClientRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.IMKickPCClientRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 result_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMKickPCClientRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMKickPCClientRsp)
  return false;
#undef DO_
}

void IMKickPCClientRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMKickPCClientRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Login.IMKickPCClientRsp)
}

size_t IMKickPCClientRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMKickPCClientRsp)
  size_t total_size = 0;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMKickPCClientRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMKickPCClientRsp*>(&from));
}

void IMKickPCClientRsp::MergeFrom(const IMKickPCClientRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMKickPCClientRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.result_code() != 0) {
    set_result_code(from.result_code());
  }
}

void IMKickPCClientRsp::CopyFrom(const IMKickPCClientRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMKickPCClientRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMKickPCClientRsp::IsInitialized() const {
  return true;
}

void IMKickPCClientRsp::Swap(IMKickPCClientRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMKickPCClientRsp::InternalSwap(IMKickPCClientRsp* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(result_code_, other->result_code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMKickPCClientRsp::GetTypeName() const {
  return "IM.Login.IMKickPCClientRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMKickPCClientRsp

// uint32 user_id = 1;
void IMKickPCClientRsp::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMKickPCClientRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMKickPCClientRsp.user_id)
  return user_id_;
}
void IMKickPCClientRsp::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMKickPCClientRsp.user_id)
}

// uint32 result_code = 2;
void IMKickPCClientRsp::clear_result_code() {
  result_code_ = 0u;
}
::google::protobuf::uint32 IMKickPCClientRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMKickPCClientRsp.result_code)
  return result_code_;
}
void IMKickPCClientRsp::set_result_code(::google::protobuf::uint32 value) {
  
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMKickPCClientRsp.result_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMPushShieldReq::kUserIdFieldNumber;
const int IMPushShieldReq::kShieldStatusFieldNumber;
const int IMPushShieldReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMPushShieldReq::IMPushShieldReq()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eLogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMPushShieldReq)
}
IMPushShieldReq::IMPushShieldReq(const IMPushShieldReq& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&shield_status_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(shield_status_));
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMPushShieldReq)
}

void IMPushShieldReq::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&shield_status_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(shield_status_));
  _cached_size_ = 0;
}

IMPushShieldReq::~IMPushShieldReq() {
  // @@protoc_insertion_point(destructor:IM.Login.IMPushShieldReq)
  SharedDtor();
}

void IMPushShieldReq::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMPushShieldReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMPushShieldReq& IMPushShieldReq::default_instance() {
  protobuf_IM_2eLogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMPushShieldReq* IMPushShieldReq::New(::google::protobuf::Arena* arena) const {
  IMPushShieldReq* n = new IMPushShieldReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMPushShieldReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMPushShieldReq)
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&shield_status_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(shield_status_));
}

bool IMPushShieldReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.IMPushShieldReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 shield_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shield_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMPushShieldReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMPushShieldReq)
  return false;
#undef DO_
}

void IMPushShieldReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMPushShieldReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // uint32 shield_status = 2;
  if (this->shield_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shield_status(), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Login.IMPushShieldReq)
}

size_t IMPushShieldReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMPushShieldReq)
  size_t total_size = 0;

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // uint32 shield_status = 2;
  if (this->shield_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shield_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMPushShieldReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMPushShieldReq*>(&from));
}

void IMPushShieldReq::MergeFrom(const IMPushShieldReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMPushShieldReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.shield_status() != 0) {
    set_shield_status(from.shield_status());
  }
}

void IMPushShieldReq::CopyFrom(const IMPushShieldReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMPushShieldReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMPushShieldReq::IsInitialized() const {
  return true;
}

void IMPushShieldReq::Swap(IMPushShieldReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMPushShieldReq::InternalSwap(IMPushShieldReq* other) {
  attach_data_.Swap(&other->attach_data_);
  std::swap(user_id_, other->user_id_);
  std::swap(shield_status_, other->shield_status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMPushShieldReq::GetTypeName() const {
  return "IM.Login.IMPushShieldReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMPushShieldReq

// uint32 user_id = 1;
void IMPushShieldReq::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMPushShieldReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMPushShieldReq.user_id)
  return user_id_;
}
void IMPushShieldReq::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMPushShieldReq.user_id)
}

// uint32 shield_status = 2;
void IMPushShieldReq::clear_shield_status() {
  shield_status_ = 0u;
}
::google::protobuf::uint32 IMPushShieldReq::shield_status() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMPushShieldReq.shield_status)
  return shield_status_;
}
void IMPushShieldReq::set_shield_status(::google::protobuf::uint32 value) {
  
  shield_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMPushShieldReq.shield_status)
}

// bytes attach_data = 20;
void IMPushShieldReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMPushShieldReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMPushShieldReq.attach_data)
  return attach_data_.GetNoArena();
}
void IMPushShieldReq::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.IMPushShieldReq.attach_data)
}
#if LANG_CXX11
void IMPushShieldReq::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.IMPushShieldReq.attach_data)
}
#endif
void IMPushShieldReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.IMPushShieldReq.attach_data)
}
void IMPushShieldReq::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMPushShieldReq.attach_data)
}
::std::string* IMPushShieldReq::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Login.IMPushShieldReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMPushShieldReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Login.IMPushShieldReq.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMPushShieldReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMPushShieldReq.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMPushShieldRsp::kUserIdFieldNumber;
const int IMPushShieldRsp::kResultCodeFieldNumber;
const int IMPushShieldRsp::kShieldStatusFieldNumber;
const int IMPushShieldRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMPushShieldRsp::IMPushShieldRsp()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eLogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMPushShieldRsp)
}
IMPushShieldRsp::IMPushShieldRsp(const IMPushShieldRsp& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&shield_status_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(shield_status_));
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMPushShieldRsp)
}

void IMPushShieldRsp::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&shield_status_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(shield_status_));
  _cached_size_ = 0;
}

IMPushShieldRsp::~IMPushShieldRsp() {
  // @@protoc_insertion_point(destructor:IM.Login.IMPushShieldRsp)
  SharedDtor();
}

void IMPushShieldRsp::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMPushShieldRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMPushShieldRsp& IMPushShieldRsp::default_instance() {
  protobuf_IM_2eLogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMPushShieldRsp* IMPushShieldRsp::New(::google::protobuf::Arena* arena) const {
  IMPushShieldRsp* n = new IMPushShieldRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMPushShieldRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMPushShieldRsp)
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&shield_status_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(shield_status_));
}

bool IMPushShieldRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.IMPushShieldRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 result_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 shield_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shield_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMPushShieldRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMPushShieldRsp)
  return false;
#undef DO_
}

void IMPushShieldRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMPushShieldRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // uint32 shield_status = 3;
  if (this->shield_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->shield_status(), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Login.IMPushShieldRsp)
}

size_t IMPushShieldRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMPushShieldRsp)
  size_t total_size = 0;

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());
  }

  // uint32 shield_status = 3;
  if (this->shield_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shield_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMPushShieldRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMPushShieldRsp*>(&from));
}

void IMPushShieldRsp::MergeFrom(const IMPushShieldRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMPushShieldRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.result_code() != 0) {
    set_result_code(from.result_code());
  }
  if (from.shield_status() != 0) {
    set_shield_status(from.shield_status());
  }
}

void IMPushShieldRsp::CopyFrom(const IMPushShieldRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMPushShieldRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMPushShieldRsp::IsInitialized() const {
  return true;
}

void IMPushShieldRsp::Swap(IMPushShieldRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMPushShieldRsp::InternalSwap(IMPushShieldRsp* other) {
  attach_data_.Swap(&other->attach_data_);
  std::swap(user_id_, other->user_id_);
  std::swap(result_code_, other->result_code_);
  std::swap(shield_status_, other->shield_status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMPushShieldRsp::GetTypeName() const {
  return "IM.Login.IMPushShieldRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMPushShieldRsp

// uint32 user_id = 1;
void IMPushShieldRsp::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMPushShieldRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMPushShieldRsp.user_id)
  return user_id_;
}
void IMPushShieldRsp::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMPushShieldRsp.user_id)
}

// uint32 result_code = 2;
void IMPushShieldRsp::clear_result_code() {
  result_code_ = 0u;
}
::google::protobuf::uint32 IMPushShieldRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMPushShieldRsp.result_code)
  return result_code_;
}
void IMPushShieldRsp::set_result_code(::google::protobuf::uint32 value) {
  
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMPushShieldRsp.result_code)
}

// uint32 shield_status = 3;
void IMPushShieldRsp::clear_shield_status() {
  shield_status_ = 0u;
}
::google::protobuf::uint32 IMPushShieldRsp::shield_status() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMPushShieldRsp.shield_status)
  return shield_status_;
}
void IMPushShieldRsp::set_shield_status(::google::protobuf::uint32 value) {
  
  shield_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMPushShieldRsp.shield_status)
}

// bytes attach_data = 20;
void IMPushShieldRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMPushShieldRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMPushShieldRsp.attach_data)
  return attach_data_.GetNoArena();
}
void IMPushShieldRsp::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.IMPushShieldRsp.attach_data)
}
#if LANG_CXX11
void IMPushShieldRsp::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.IMPushShieldRsp.attach_data)
}
#endif
void IMPushShieldRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.IMPushShieldRsp.attach_data)
}
void IMPushShieldRsp::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMPushShieldRsp.attach_data)
}
::std::string* IMPushShieldRsp::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Login.IMPushShieldRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMPushShieldRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Login.IMPushShieldRsp.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMPushShieldRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMPushShieldRsp.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMQueryPushShieldReq::kUserIdFieldNumber;
const int IMQueryPushShieldReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMQueryPushShieldReq::IMQueryPushShieldReq()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eLogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMQueryPushShieldReq)
}
IMQueryPushShieldReq::IMQueryPushShieldReq(const IMQueryPushShieldReq& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMQueryPushShieldReq)
}

void IMQueryPushShieldReq::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  _cached_size_ = 0;
}

IMQueryPushShieldReq::~IMQueryPushShieldReq() {
  // @@protoc_insertion_point(destructor:IM.Login.IMQueryPushShieldReq)
  SharedDtor();
}

void IMQueryPushShieldReq::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMQueryPushShieldReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMQueryPushShieldReq& IMQueryPushShieldReq::default_instance() {
  protobuf_IM_2eLogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMQueryPushShieldReq* IMQueryPushShieldReq::New(::google::protobuf::Arena* arena) const {
  IMQueryPushShieldReq* n = new IMQueryPushShieldReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMQueryPushShieldReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMQueryPushShieldReq)
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
}

bool IMQueryPushShieldReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.IMQueryPushShieldReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMQueryPushShieldReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMQueryPushShieldReq)
  return false;
#undef DO_
}

void IMQueryPushShieldReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMQueryPushShieldReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Login.IMQueryPushShieldReq)
}

size_t IMQueryPushShieldReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMQueryPushShieldReq)
  size_t total_size = 0;

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMQueryPushShieldReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMQueryPushShieldReq*>(&from));
}

void IMQueryPushShieldReq::MergeFrom(const IMQueryPushShieldReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMQueryPushShieldReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void IMQueryPushShieldReq::CopyFrom(const IMQueryPushShieldReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMQueryPushShieldReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMQueryPushShieldReq::IsInitialized() const {
  return true;
}

void IMQueryPushShieldReq::Swap(IMQueryPushShieldReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMQueryPushShieldReq::InternalSwap(IMQueryPushShieldReq* other) {
  attach_data_.Swap(&other->attach_data_);
  std::swap(user_id_, other->user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMQueryPushShieldReq::GetTypeName() const {
  return "IM.Login.IMQueryPushShieldReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMQueryPushShieldReq

// uint32 user_id = 1;
void IMQueryPushShieldReq::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMQueryPushShieldReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMQueryPushShieldReq.user_id)
  return user_id_;
}
void IMQueryPushShieldReq::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMQueryPushShieldReq.user_id)
}

// bytes attach_data = 20;
void IMQueryPushShieldReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMQueryPushShieldReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMQueryPushShieldReq.attach_data)
  return attach_data_.GetNoArena();
}
void IMQueryPushShieldReq::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.IMQueryPushShieldReq.attach_data)
}
#if LANG_CXX11
void IMQueryPushShieldReq::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.IMQueryPushShieldReq.attach_data)
}
#endif
void IMQueryPushShieldReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.IMQueryPushShieldReq.attach_data)
}
void IMQueryPushShieldReq::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMQueryPushShieldReq.attach_data)
}
::std::string* IMQueryPushShieldReq::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Login.IMQueryPushShieldReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMQueryPushShieldReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Login.IMQueryPushShieldReq.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMQueryPushShieldReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMQueryPushShieldReq.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMQueryPushShieldRsp::kUserIdFieldNumber;
const int IMQueryPushShieldRsp::kResultCodeFieldNumber;
const int IMQueryPushShieldRsp::kShieldStatusFieldNumber;
const int IMQueryPushShieldRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMQueryPushShieldRsp::IMQueryPushShieldRsp()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eLogin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMQueryPushShieldRsp)
}
IMQueryPushShieldRsp::IMQueryPushShieldRsp(const IMQueryPushShieldRsp& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&shield_status_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(shield_status_));
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMQueryPushShieldRsp)
}

void IMQueryPushShieldRsp::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&shield_status_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(shield_status_));
  _cached_size_ = 0;
}

IMQueryPushShieldRsp::~IMQueryPushShieldRsp() {
  // @@protoc_insertion_point(destructor:IM.Login.IMQueryPushShieldRsp)
  SharedDtor();
}

void IMQueryPushShieldRsp::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMQueryPushShieldRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMQueryPushShieldRsp& IMQueryPushShieldRsp::default_instance() {
  protobuf_IM_2eLogin_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMQueryPushShieldRsp* IMQueryPushShieldRsp::New(::google::protobuf::Arena* arena) const {
  IMQueryPushShieldRsp* n = new IMQueryPushShieldRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMQueryPushShieldRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMQueryPushShieldRsp)
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&shield_status_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(shield_status_));
}

bool IMQueryPushShieldRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.IMQueryPushShieldRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 result_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 shield_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shield_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMQueryPushShieldRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMQueryPushShieldRsp)
  return false;
#undef DO_
}

void IMQueryPushShieldRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMQueryPushShieldRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // uint32 shield_status = 3;
  if (this->shield_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->shield_status(), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Login.IMQueryPushShieldRsp)
}

size_t IMQueryPushShieldRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMQueryPushShieldRsp)
  size_t total_size = 0;

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());
  }

  // uint32 shield_status = 3;
  if (this->shield_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shield_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMQueryPushShieldRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMQueryPushShieldRsp*>(&from));
}

void IMQueryPushShieldRsp::MergeFrom(const IMQueryPushShieldRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMQueryPushShieldRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.result_code() != 0) {
    set_result_code(from.result_code());
  }
  if (from.shield_status() != 0) {
    set_shield_status(from.shield_status());
  }
}

void IMQueryPushShieldRsp::CopyFrom(const IMQueryPushShieldRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMQueryPushShieldRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMQueryPushShieldRsp::IsInitialized() const {
  return true;
}

void IMQueryPushShieldRsp::Swap(IMQueryPushShieldRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMQueryPushShieldRsp::InternalSwap(IMQueryPushShieldRsp* other) {
  attach_data_.Swap(&other->attach_data_);
  std::swap(user_id_, other->user_id_);
  std::swap(result_code_, other->result_code_);
  std::swap(shield_status_, other->shield_status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMQueryPushShieldRsp::GetTypeName() const {
  return "IM.Login.IMQueryPushShieldRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMQueryPushShieldRsp

// uint32 user_id = 1;
void IMQueryPushShieldRsp::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMQueryPushShieldRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMQueryPushShieldRsp.user_id)
  return user_id_;
}
void IMQueryPushShieldRsp::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMQueryPushShieldRsp.user_id)
}

// uint32 result_code = 2;
void IMQueryPushShieldRsp::clear_result_code() {
  result_code_ = 0u;
}
::google::protobuf::uint32 IMQueryPushShieldRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMQueryPushShieldRsp.result_code)
  return result_code_;
}
void IMQueryPushShieldRsp::set_result_code(::google::protobuf::uint32 value) {
  
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMQueryPushShieldRsp.result_code)
}

// uint32 shield_status = 3;
void IMQueryPushShieldRsp::clear_shield_status() {
  shield_status_ = 0u;
}
::google::protobuf::uint32 IMQueryPushShieldRsp::shield_status() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMQueryPushShieldRsp.shield_status)
  return shield_status_;
}
void IMQueryPushShieldRsp::set_shield_status(::google::protobuf::uint32 value) {
  
  shield_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMQueryPushShieldRsp.shield_status)
}

// bytes attach_data = 20;
void IMQueryPushShieldRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMQueryPushShieldRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMQueryPushShieldRsp.attach_data)
  return attach_data_.GetNoArena();
}
void IMQueryPushShieldRsp::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.IMQueryPushShieldRsp.attach_data)
}
#if LANG_CXX11
void IMQueryPushShieldRsp::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.IMQueryPushShieldRsp.attach_data)
}
#endif
void IMQueryPushShieldRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.IMQueryPushShieldRsp.attach_data)
}
void IMQueryPushShieldRsp::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMQueryPushShieldRsp.attach_data)
}
::std::string* IMQueryPushShieldRsp::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Login.IMQueryPushShieldRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMQueryPushShieldRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Login.IMQueryPushShieldRsp.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMQueryPushShieldRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMQueryPushShieldRsp.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Login
}  // namespace IM

// @@protoc_insertion_point(global_scope)
