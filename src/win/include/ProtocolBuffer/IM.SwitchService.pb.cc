// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.SwitchService.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IM.SwitchService.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace SwitchService {
class IMP2PCmdMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMP2PCmdMsg> {
} _IMP2PCmdMsg_default_instance_;

namespace protobuf_IM_2eSwitchService_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _IMP2PCmdMsg_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _IMP2PCmdMsg_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_IM_2eSwitchService_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMP2PCmdMsg::kFromUserIdFieldNumber;
const int IMP2PCmdMsg::kToUserIdFieldNumber;
const int IMP2PCmdMsg::kCmdMsgDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMP2PCmdMsg::IMP2PCmdMsg()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eSwitchService_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.SwitchService.IMP2PCmdMsg)
}
IMP2PCmdMsg::IMP2PCmdMsg(const IMP2PCmdMsg& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmd_msg_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cmd_msg_data().size() > 0) {
    cmd_msg_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_msg_data_);
  }
  ::memcpy(&from_user_id_, &from.from_user_id_,
    reinterpret_cast<char*>(&to_user_id_) -
    reinterpret_cast<char*>(&from_user_id_) + sizeof(to_user_id_));
  // @@protoc_insertion_point(copy_constructor:IM.SwitchService.IMP2PCmdMsg)
}

void IMP2PCmdMsg::SharedCtor() {
  cmd_msg_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_user_id_, 0, reinterpret_cast<char*>(&to_user_id_) -
    reinterpret_cast<char*>(&from_user_id_) + sizeof(to_user_id_));
  _cached_size_ = 0;
}

IMP2PCmdMsg::~IMP2PCmdMsg() {
  // @@protoc_insertion_point(destructor:IM.SwitchService.IMP2PCmdMsg)
  SharedDtor();
}

void IMP2PCmdMsg::SharedDtor() {
  cmd_msg_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMP2PCmdMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMP2PCmdMsg& IMP2PCmdMsg::default_instance() {
  protobuf_IM_2eSwitchService_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMP2PCmdMsg* IMP2PCmdMsg::New(::google::protobuf::Arena* arena) const {
  IMP2PCmdMsg* n = new IMP2PCmdMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMP2PCmdMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.SwitchService.IMP2PCmdMsg)
  cmd_msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_user_id_, 0, reinterpret_cast<char*>(&to_user_id_) -
    reinterpret_cast<char*>(&from_user_id_) + sizeof(to_user_id_));
}

bool IMP2PCmdMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.SwitchService.IMP2PCmdMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 from_user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 to_user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cmd_msg_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd_msg_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cmd_msg_data().data(), this->cmd_msg_data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.SwitchService.IMP2PCmdMsg.cmd_msg_data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.SwitchService.IMP2PCmdMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.SwitchService.IMP2PCmdMsg)
  return false;
#undef DO_
}

void IMP2PCmdMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.SwitchService.IMP2PCmdMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from_user_id = 1;
  if (this->from_user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->from_user_id(), output);
  }

  // uint32 to_user_id = 2;
  if (this->to_user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->to_user_id(), output);
  }

  // string cmd_msg_data = 3;
  if (this->cmd_msg_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd_msg_data().data(), this->cmd_msg_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.SwitchService.IMP2PCmdMsg.cmd_msg_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cmd_msg_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.SwitchService.IMP2PCmdMsg)
}

size_t IMP2PCmdMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.SwitchService.IMP2PCmdMsg)
  size_t total_size = 0;

  // string cmd_msg_data = 3;
  if (this->cmd_msg_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cmd_msg_data());
  }

  // uint32 from_user_id = 1;
  if (this->from_user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_user_id());
  }

  // uint32 to_user_id = 2;
  if (this->to_user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->to_user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMP2PCmdMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMP2PCmdMsg*>(&from));
}

void IMP2PCmdMsg::MergeFrom(const IMP2PCmdMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.SwitchService.IMP2PCmdMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cmd_msg_data().size() > 0) {

    cmd_msg_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_msg_data_);
  }
  if (from.from_user_id() != 0) {
    set_from_user_id(from.from_user_id());
  }
  if (from.to_user_id() != 0) {
    set_to_user_id(from.to_user_id());
  }
}

void IMP2PCmdMsg::CopyFrom(const IMP2PCmdMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.SwitchService.IMP2PCmdMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMP2PCmdMsg::IsInitialized() const {
  return true;
}

void IMP2PCmdMsg::Swap(IMP2PCmdMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMP2PCmdMsg::InternalSwap(IMP2PCmdMsg* other) {
  cmd_msg_data_.Swap(&other->cmd_msg_data_);
  std::swap(from_user_id_, other->from_user_id_);
  std::swap(to_user_id_, other->to_user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMP2PCmdMsg::GetTypeName() const {
  return "IM.SwitchService.IMP2PCmdMsg";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMP2PCmdMsg

// uint32 from_user_id = 1;
void IMP2PCmdMsg::clear_from_user_id() {
  from_user_id_ = 0u;
}
::google::protobuf::uint32 IMP2PCmdMsg::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.SwitchService.IMP2PCmdMsg.from_user_id)
  return from_user_id_;
}
void IMP2PCmdMsg::set_from_user_id(::google::protobuf::uint32 value) {
  
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.SwitchService.IMP2PCmdMsg.from_user_id)
}

// uint32 to_user_id = 2;
void IMP2PCmdMsg::clear_to_user_id() {
  to_user_id_ = 0u;
}
::google::protobuf::uint32 IMP2PCmdMsg::to_user_id() const {
  // @@protoc_insertion_point(field_get:IM.SwitchService.IMP2PCmdMsg.to_user_id)
  return to_user_id_;
}
void IMP2PCmdMsg::set_to_user_id(::google::protobuf::uint32 value) {
  
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.SwitchService.IMP2PCmdMsg.to_user_id)
}

// string cmd_msg_data = 3;
void IMP2PCmdMsg::clear_cmd_msg_data() {
  cmd_msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMP2PCmdMsg::cmd_msg_data() const {
  // @@protoc_insertion_point(field_get:IM.SwitchService.IMP2PCmdMsg.cmd_msg_data)
  return cmd_msg_data_.GetNoArena();
}
void IMP2PCmdMsg::set_cmd_msg_data(const ::std::string& value) {
  
  cmd_msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.SwitchService.IMP2PCmdMsg.cmd_msg_data)
}
#if LANG_CXX11
void IMP2PCmdMsg::set_cmd_msg_data(::std::string&& value) {
  
  cmd_msg_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.SwitchService.IMP2PCmdMsg.cmd_msg_data)
}
#endif
void IMP2PCmdMsg::set_cmd_msg_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cmd_msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.SwitchService.IMP2PCmdMsg.cmd_msg_data)
}
void IMP2PCmdMsg::set_cmd_msg_data(const char* value, size_t size) {
  
  cmd_msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.SwitchService.IMP2PCmdMsg.cmd_msg_data)
}
::std::string* IMP2PCmdMsg::mutable_cmd_msg_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.SwitchService.IMP2PCmdMsg.cmd_msg_data)
  return cmd_msg_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMP2PCmdMsg::release_cmd_msg_data() {
  // @@protoc_insertion_point(field_release:IM.SwitchService.IMP2PCmdMsg.cmd_msg_data)
  
  return cmd_msg_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMP2PCmdMsg::set_allocated_cmd_msg_data(::std::string* cmd_msg_data) {
  if (cmd_msg_data != NULL) {
    
  } else {
    
  }
  cmd_msg_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd_msg_data);
  // @@protoc_insertion_point(field_set_allocated:IM.SwitchService.IMP2PCmdMsg.cmd_msg_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace SwitchService
}  // namespace IM

// @@protoc_insertion_point(global_scope)
