// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Buddy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IM.Buddy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace Buddy {
class IMRecentContactSessionReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMRecentContactSessionReq> {
} _IMRecentContactSessionReq_default_instance_;
class IMRecentContactSessionRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMRecentContactSessionRsp> {
} _IMRecentContactSessionRsp_default_instance_;
class IMUserStatNotifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMUserStatNotify> {
} _IMUserStatNotify_default_instance_;
class IMUsersInfoReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMUsersInfoReq> {
} _IMUsersInfoReq_default_instance_;
class IMUsersInfoRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMUsersInfoRsp> {
} _IMUsersInfoRsp_default_instance_;
class IMRemoveSessionReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMRemoveSessionReq> {
} _IMRemoveSessionReq_default_instance_;
class IMRemoveSessionRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMRemoveSessionRsp> {
} _IMRemoveSessionRsp_default_instance_;
class IMAllUserReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMAllUserReq> {
} _IMAllUserReq_default_instance_;
class IMAllUserRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMAllUserRsp> {
} _IMAllUserRsp_default_instance_;
class IMUsersStatReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMUsersStatReq> {
} _IMUsersStatReq_default_instance_;
class IMUsersStatRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMUsersStatRsp> {
} _IMUsersStatRsp_default_instance_;
class IMChangeAvatarReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMChangeAvatarReq> {
} _IMChangeAvatarReq_default_instance_;
class IMChangeAvatarRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMChangeAvatarRsp> {
} _IMChangeAvatarRsp_default_instance_;
class IMPCLoginStatusNotifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMPCLoginStatusNotify> {
} _IMPCLoginStatusNotify_default_instance_;
class IMRemoveSessionNotifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMRemoveSessionNotify> {
} _IMRemoveSessionNotify_default_instance_;
class IMDepartmentReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMDepartmentReq> {
} _IMDepartmentReq_default_instance_;
class IMDepartmentRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMDepartmentRsp> {
} _IMDepartmentRsp_default_instance_;
class IMAvatarChangedNotifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMAvatarChangedNotify> {
} _IMAvatarChangedNotify_default_instance_;
class IMChangeSignInfoReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMChangeSignInfoReq> {
} _IMChangeSignInfoReq_default_instance_;
class IMChangeSignInfoRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMChangeSignInfoRsp> {
} _IMChangeSignInfoRsp_default_instance_;
class IMSignInfoChangedNotifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMSignInfoChangedNotify> {
} _IMSignInfoChangedNotify_default_instance_;

namespace protobuf_IM_2eBuddy_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _IMRecentContactSessionReq_default_instance_.Shutdown();
  _IMRecentContactSessionRsp_default_instance_.Shutdown();
  _IMUserStatNotify_default_instance_.Shutdown();
  _IMUsersInfoReq_default_instance_.Shutdown();
  _IMUsersInfoRsp_default_instance_.Shutdown();
  _IMRemoveSessionReq_default_instance_.Shutdown();
  _IMRemoveSessionRsp_default_instance_.Shutdown();
  _IMAllUserReq_default_instance_.Shutdown();
  _IMAllUserRsp_default_instance_.Shutdown();
  _IMUsersStatReq_default_instance_.Shutdown();
  _IMUsersStatRsp_default_instance_.Shutdown();
  _IMChangeAvatarReq_default_instance_.Shutdown();
  _IMChangeAvatarRsp_default_instance_.Shutdown();
  _IMPCLoginStatusNotify_default_instance_.Shutdown();
  _IMRemoveSessionNotify_default_instance_.Shutdown();
  _IMDepartmentReq_default_instance_.Shutdown();
  _IMDepartmentRsp_default_instance_.Shutdown();
  _IMAvatarChangedNotify_default_instance_.Shutdown();
  _IMChangeSignInfoReq_default_instance_.Shutdown();
  _IMChangeSignInfoRsp_default_instance_.Shutdown();
  _IMSignInfoChangedNotify_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::IM::BaseDefine::protobuf_IM_2eBaseDefine_2eproto::InitDefaults();
  _IMRecentContactSessionReq_default_instance_.DefaultConstruct();
  _IMRecentContactSessionRsp_default_instance_.DefaultConstruct();
  _IMUserStatNotify_default_instance_.DefaultConstruct();
  _IMUsersInfoReq_default_instance_.DefaultConstruct();
  _IMUsersInfoRsp_default_instance_.DefaultConstruct();
  _IMRemoveSessionReq_default_instance_.DefaultConstruct();
  _IMRemoveSessionRsp_default_instance_.DefaultConstruct();
  _IMAllUserReq_default_instance_.DefaultConstruct();
  _IMAllUserRsp_default_instance_.DefaultConstruct();
  _IMUsersStatReq_default_instance_.DefaultConstruct();
  _IMUsersStatRsp_default_instance_.DefaultConstruct();
  _IMChangeAvatarReq_default_instance_.DefaultConstruct();
  _IMChangeAvatarRsp_default_instance_.DefaultConstruct();
  _IMPCLoginStatusNotify_default_instance_.DefaultConstruct();
  _IMRemoveSessionNotify_default_instance_.DefaultConstruct();
  _IMDepartmentReq_default_instance_.DefaultConstruct();
  _IMDepartmentRsp_default_instance_.DefaultConstruct();
  _IMAvatarChangedNotify_default_instance_.DefaultConstruct();
  _IMChangeSignInfoReq_default_instance_.DefaultConstruct();
  _IMChangeSignInfoRsp_default_instance_.DefaultConstruct();
  _IMSignInfoChangedNotify_default_instance_.DefaultConstruct();
  _IMUserStatNotify_default_instance_.get_mutable()->user_stat_ = const_cast< ::IM::BaseDefine::UserStat*>(
      ::IM::BaseDefine::UserStat::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::IM::BaseDefine::protobuf_IM_2eBaseDefine_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_IM_2eBuddy_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMRecentContactSessionReq::kUserIdFieldNumber;
const int IMRecentContactSessionReq::kLatestUpdateTimeFieldNumber;
const int IMRecentContactSessionReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMRecentContactSessionReq::IMRecentContactSessionReq()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBuddy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMRecentContactSessionReq)
}
IMRecentContactSessionReq::IMRecentContactSessionReq(const IMRecentContactSessionReq& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&latest_update_time_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(latest_update_time_));
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMRecentContactSessionReq)
}

void IMRecentContactSessionReq::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&latest_update_time_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(latest_update_time_));
  _cached_size_ = 0;
}

IMRecentContactSessionReq::~IMRecentContactSessionReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMRecentContactSessionReq)
  SharedDtor();
}

void IMRecentContactSessionReq::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMRecentContactSessionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMRecentContactSessionReq& IMRecentContactSessionReq::default_instance() {
  protobuf_IM_2eBuddy_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMRecentContactSessionReq* IMRecentContactSessionReq::New(::google::protobuf::Arena* arena) const {
  IMRecentContactSessionReq* n = new IMRecentContactSessionReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMRecentContactSessionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Buddy.IMRecentContactSessionReq)
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&latest_update_time_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(latest_update_time_));
}

bool IMRecentContactSessionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMRecentContactSessionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 latest_update_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_update_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMRecentContactSessionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMRecentContactSessionReq)
  return false;
#undef DO_
}

void IMRecentContactSessionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMRecentContactSessionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // uint32 latest_update_time = 2;
  if (this->latest_update_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->latest_update_time(), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMRecentContactSessionReq)
}

size_t IMRecentContactSessionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Buddy.IMRecentContactSessionReq)
  size_t total_size = 0;

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // uint32 latest_update_time = 2;
  if (this->latest_update_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latest_update_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMRecentContactSessionReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMRecentContactSessionReq*>(&from));
}

void IMRecentContactSessionReq::MergeFrom(const IMRecentContactSessionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Buddy.IMRecentContactSessionReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.latest_update_time() != 0) {
    set_latest_update_time(from.latest_update_time());
  }
}

void IMRecentContactSessionReq::CopyFrom(const IMRecentContactSessionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Buddy.IMRecentContactSessionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMRecentContactSessionReq::IsInitialized() const {
  return true;
}

void IMRecentContactSessionReq::Swap(IMRecentContactSessionReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMRecentContactSessionReq::InternalSwap(IMRecentContactSessionReq* other) {
  attach_data_.Swap(&other->attach_data_);
  std::swap(user_id_, other->user_id_);
  std::swap(latest_update_time_, other->latest_update_time_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMRecentContactSessionReq::GetTypeName() const {
  return "IM.Buddy.IMRecentContactSessionReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMRecentContactSessionReq

// uint32 user_id = 1;
void IMRecentContactSessionReq::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMRecentContactSessionReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecentContactSessionReq.user_id)
  return user_id_;
}
void IMRecentContactSessionReq::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRecentContactSessionReq.user_id)
}

// uint32 latest_update_time = 2;
void IMRecentContactSessionReq::clear_latest_update_time() {
  latest_update_time_ = 0u;
}
::google::protobuf::uint32 IMRecentContactSessionReq::latest_update_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecentContactSessionReq.latest_update_time)
  return latest_update_time_;
}
void IMRecentContactSessionReq::set_latest_update_time(::google::protobuf::uint32 value) {
  
  latest_update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRecentContactSessionReq.latest_update_time)
}

// bytes attach_data = 20;
void IMRecentContactSessionReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMRecentContactSessionReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecentContactSessionReq.attach_data)
  return attach_data_.GetNoArena();
}
void IMRecentContactSessionReq::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRecentContactSessionReq.attach_data)
}
#if LANG_CXX11
void IMRecentContactSessionReq::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMRecentContactSessionReq.attach_data)
}
#endif
void IMRecentContactSessionReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMRecentContactSessionReq.attach_data)
}
void IMRecentContactSessionReq::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMRecentContactSessionReq.attach_data)
}
::std::string* IMRecentContactSessionReq::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMRecentContactSessionReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMRecentContactSessionReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMRecentContactSessionReq.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMRecentContactSessionReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMRecentContactSessionReq.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMRecentContactSessionRsp::kUserIdFieldNumber;
const int IMRecentContactSessionRsp::kContactSessionListFieldNumber;
const int IMRecentContactSessionRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMRecentContactSessionRsp::IMRecentContactSessionRsp()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBuddy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMRecentContactSessionRsp)
}
IMRecentContactSessionRsp::IMRecentContactSessionRsp(const IMRecentContactSessionRsp& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      contact_session_list_(from.contact_session_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMRecentContactSessionRsp)
}

void IMRecentContactSessionRsp::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  _cached_size_ = 0;
}

IMRecentContactSessionRsp::~IMRecentContactSessionRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMRecentContactSessionRsp)
  SharedDtor();
}

void IMRecentContactSessionRsp::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMRecentContactSessionRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMRecentContactSessionRsp& IMRecentContactSessionRsp::default_instance() {
  protobuf_IM_2eBuddy_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMRecentContactSessionRsp* IMRecentContactSessionRsp::New(::google::protobuf::Arena* arena) const {
  IMRecentContactSessionRsp* n = new IMRecentContactSessionRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMRecentContactSessionRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Buddy.IMRecentContactSessionRsp)
  contact_session_list_.Clear();
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
}

bool IMRecentContactSessionRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMRecentContactSessionRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IM.BaseDefine.ContactSessionInfo contact_session_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contact_session_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMRecentContactSessionRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMRecentContactSessionRsp)
  return false;
#undef DO_
}

void IMRecentContactSessionRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMRecentContactSessionRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated .IM.BaseDefine.ContactSessionInfo contact_session_list = 2;
  for (unsigned int i = 0, n = this->contact_session_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->contact_session_list(i), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMRecentContactSessionRsp)
}

size_t IMRecentContactSessionRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Buddy.IMRecentContactSessionRsp)
  size_t total_size = 0;

  // repeated .IM.BaseDefine.ContactSessionInfo contact_session_list = 2;
  {
    unsigned int count = this->contact_session_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contact_session_list(i));
    }
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMRecentContactSessionRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMRecentContactSessionRsp*>(&from));
}

void IMRecentContactSessionRsp::MergeFrom(const IMRecentContactSessionRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Buddy.IMRecentContactSessionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contact_session_list_.MergeFrom(from.contact_session_list_);
  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void IMRecentContactSessionRsp::CopyFrom(const IMRecentContactSessionRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Buddy.IMRecentContactSessionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMRecentContactSessionRsp::IsInitialized() const {
  return true;
}

void IMRecentContactSessionRsp::Swap(IMRecentContactSessionRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMRecentContactSessionRsp::InternalSwap(IMRecentContactSessionRsp* other) {
  contact_session_list_.InternalSwap(&other->contact_session_list_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(user_id_, other->user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMRecentContactSessionRsp::GetTypeName() const {
  return "IM.Buddy.IMRecentContactSessionRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMRecentContactSessionRsp

// uint32 user_id = 1;
void IMRecentContactSessionRsp::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMRecentContactSessionRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecentContactSessionRsp.user_id)
  return user_id_;
}
void IMRecentContactSessionRsp::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRecentContactSessionRsp.user_id)
}

// repeated .IM.BaseDefine.ContactSessionInfo contact_session_list = 2;
int IMRecentContactSessionRsp::contact_session_list_size() const {
  return contact_session_list_.size();
}
void IMRecentContactSessionRsp::clear_contact_session_list() {
  contact_session_list_.Clear();
}
const ::IM::BaseDefine::ContactSessionInfo& IMRecentContactSessionRsp::contact_session_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecentContactSessionRsp.contact_session_list)
  return contact_session_list_.Get(index);
}
::IM::BaseDefine::ContactSessionInfo* IMRecentContactSessionRsp::mutable_contact_session_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMRecentContactSessionRsp.contact_session_list)
  return contact_session_list_.Mutable(index);
}
::IM::BaseDefine::ContactSessionInfo* IMRecentContactSessionRsp::add_contact_session_list() {
  // @@protoc_insertion_point(field_add:IM.Buddy.IMRecentContactSessionRsp.contact_session_list)
  return contact_session_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ContactSessionInfo >*
IMRecentContactSessionRsp::mutable_contact_session_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMRecentContactSessionRsp.contact_session_list)
  return &contact_session_list_;
}
const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ContactSessionInfo >&
IMRecentContactSessionRsp::contact_session_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMRecentContactSessionRsp.contact_session_list)
  return contact_session_list_;
}

// bytes attach_data = 20;
void IMRecentContactSessionRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMRecentContactSessionRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecentContactSessionRsp.attach_data)
  return attach_data_.GetNoArena();
}
void IMRecentContactSessionRsp::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRecentContactSessionRsp.attach_data)
}
#if LANG_CXX11
void IMRecentContactSessionRsp::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMRecentContactSessionRsp.attach_data)
}
#endif
void IMRecentContactSessionRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMRecentContactSessionRsp.attach_data)
}
void IMRecentContactSessionRsp::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMRecentContactSessionRsp.attach_data)
}
::std::string* IMRecentContactSessionRsp::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMRecentContactSessionRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMRecentContactSessionRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMRecentContactSessionRsp.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMRecentContactSessionRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMRecentContactSessionRsp.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMUserStatNotify::kUserStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMUserStatNotify::IMUserStatNotify()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBuddy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMUserStatNotify)
}
IMUserStatNotify::IMUserStatNotify(const IMUserStatNotify& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user_stat()) {
    user_stat_ = new ::IM::BaseDefine::UserStat(*from.user_stat_);
  } else {
    user_stat_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMUserStatNotify)
}

void IMUserStatNotify::SharedCtor() {
  user_stat_ = NULL;
  _cached_size_ = 0;
}

IMUserStatNotify::~IMUserStatNotify() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMUserStatNotify)
  SharedDtor();
}

void IMUserStatNotify::SharedDtor() {
  if (this != internal_default_instance()) {
    delete user_stat_;
  }
}

void IMUserStatNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUserStatNotify& IMUserStatNotify::default_instance() {
  protobuf_IM_2eBuddy_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMUserStatNotify* IMUserStatNotify::New(::google::protobuf::Arena* arena) const {
  IMUserStatNotify* n = new IMUserStatNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMUserStatNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Buddy.IMUserStatNotify)
  if (GetArenaNoVirtual() == NULL && user_stat_ != NULL) {
    delete user_stat_;
  }
  user_stat_ = NULL;
}

bool IMUserStatNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMUserStatNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .IM.BaseDefine.UserStat user_stat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMUserStatNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMUserStatNotify)
  return false;
#undef DO_
}

void IMUserStatNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMUserStatNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IM.BaseDefine.UserStat user_stat = 1;
  if (this->has_user_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->user_stat_, output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMUserStatNotify)
}

size_t IMUserStatNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Buddy.IMUserStatNotify)
  size_t total_size = 0;

  // .IM.BaseDefine.UserStat user_stat = 1;
  if (this->has_user_stat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_stat_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUserStatNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUserStatNotify*>(&from));
}

void IMUserStatNotify::MergeFrom(const IMUserStatNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Buddy.IMUserStatNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_stat()) {
    mutable_user_stat()->::IM::BaseDefine::UserStat::MergeFrom(from.user_stat());
  }
}

void IMUserStatNotify::CopyFrom(const IMUserStatNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Buddy.IMUserStatNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUserStatNotify::IsInitialized() const {
  return true;
}

void IMUserStatNotify::Swap(IMUserStatNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMUserStatNotify::InternalSwap(IMUserStatNotify* other) {
  std::swap(user_stat_, other->user_stat_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMUserStatNotify::GetTypeName() const {
  return "IM.Buddy.IMUserStatNotify";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMUserStatNotify

// .IM.BaseDefine.UserStat user_stat = 1;
bool IMUserStatNotify::has_user_stat() const {
  return this != internal_default_instance() && user_stat_ != NULL;
}
void IMUserStatNotify::clear_user_stat() {
  if (GetArenaNoVirtual() == NULL && user_stat_ != NULL) delete user_stat_;
  user_stat_ = NULL;
}
const ::IM::BaseDefine::UserStat& IMUserStatNotify::user_stat() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUserStatNotify.user_stat)
  return user_stat_ != NULL ? *user_stat_
                         : *::IM::BaseDefine::UserStat::internal_default_instance();
}
::IM::BaseDefine::UserStat* IMUserStatNotify::mutable_user_stat() {
  
  if (user_stat_ == NULL) {
    user_stat_ = new ::IM::BaseDefine::UserStat;
  }
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUserStatNotify.user_stat)
  return user_stat_;
}
::IM::BaseDefine::UserStat* IMUserStatNotify::release_user_stat() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMUserStatNotify.user_stat)
  
  ::IM::BaseDefine::UserStat* temp = user_stat_;
  user_stat_ = NULL;
  return temp;
}
void IMUserStatNotify::set_allocated_user_stat(::IM::BaseDefine::UserStat* user_stat) {
  delete user_stat_;
  user_stat_ = user_stat;
  if (user_stat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMUserStatNotify.user_stat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMUsersInfoReq::kUserIdFieldNumber;
const int IMUsersInfoReq::kUserIdListFieldNumber;
const int IMUsersInfoReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMUsersInfoReq::IMUsersInfoReq()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBuddy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMUsersInfoReq)
}
IMUsersInfoReq::IMUsersInfoReq(const IMUsersInfoReq& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      user_id_list_(from.user_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMUsersInfoReq)
}

void IMUsersInfoReq::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  _cached_size_ = 0;
}

IMUsersInfoReq::~IMUsersInfoReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMUsersInfoReq)
  SharedDtor();
}

void IMUsersInfoReq::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMUsersInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUsersInfoReq& IMUsersInfoReq::default_instance() {
  protobuf_IM_2eBuddy_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMUsersInfoReq* IMUsersInfoReq::New(::google::protobuf::Arena* arena) const {
  IMUsersInfoReq* n = new IMUsersInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMUsersInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Buddy.IMUsersInfoReq)
  user_id_list_.Clear();
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
}

bool IMUsersInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMUsersInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 user_id_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_user_id_list())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_user_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMUsersInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMUsersInfoReq)
  return false;
#undef DO_
}

void IMUsersInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMUsersInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated uint32 user_id_list = 2;
  if (this->user_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_user_id_list_cached_byte_size_);
  }
  for (int i = 0, n = this->user_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->user_id_list(i), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMUsersInfoReq)
}

size_t IMUsersInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Buddy.IMUsersInfoReq)
  size_t total_size = 0;

  // repeated uint32 user_id_list = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->user_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _user_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUsersInfoReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUsersInfoReq*>(&from));
}

void IMUsersInfoReq::MergeFrom(const IMUsersInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Buddy.IMUsersInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_id_list_.MergeFrom(from.user_id_list_);
  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void IMUsersInfoReq::CopyFrom(const IMUsersInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Buddy.IMUsersInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUsersInfoReq::IsInitialized() const {
  return true;
}

void IMUsersInfoReq::Swap(IMUsersInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMUsersInfoReq::InternalSwap(IMUsersInfoReq* other) {
  user_id_list_.InternalSwap(&other->user_id_list_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(user_id_, other->user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMUsersInfoReq::GetTypeName() const {
  return "IM.Buddy.IMUsersInfoReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMUsersInfoReq

// uint32 user_id = 1;
void IMUsersInfoReq::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMUsersInfoReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersInfoReq.user_id)
  return user_id_;
}
void IMUsersInfoReq::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersInfoReq.user_id)
}

// repeated uint32 user_id_list = 2;
int IMUsersInfoReq::user_id_list_size() const {
  return user_id_list_.size();
}
void IMUsersInfoReq::clear_user_id_list() {
  user_id_list_.Clear();
}
::google::protobuf::uint32 IMUsersInfoReq::user_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersInfoReq.user_id_list)
  return user_id_list_.Get(index);
}
void IMUsersInfoReq::set_user_id_list(int index, ::google::protobuf::uint32 value) {
  user_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersInfoReq.user_id_list)
}
void IMUsersInfoReq::add_user_id_list(::google::protobuf::uint32 value) {
  user_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Buddy.IMUsersInfoReq.user_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMUsersInfoReq::user_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMUsersInfoReq.user_id_list)
  return user_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMUsersInfoReq::mutable_user_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMUsersInfoReq.user_id_list)
  return &user_id_list_;
}

// bytes attach_data = 20;
void IMUsersInfoReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMUsersInfoReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersInfoReq.attach_data)
  return attach_data_.GetNoArena();
}
void IMUsersInfoReq::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersInfoReq.attach_data)
}
#if LANG_CXX11
void IMUsersInfoReq::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMUsersInfoReq.attach_data)
}
#endif
void IMUsersInfoReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMUsersInfoReq.attach_data)
}
void IMUsersInfoReq::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMUsersInfoReq.attach_data)
}
::std::string* IMUsersInfoReq::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUsersInfoReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMUsersInfoReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMUsersInfoReq.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMUsersInfoReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMUsersInfoReq.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMUsersInfoRsp::kUserIdFieldNumber;
const int IMUsersInfoRsp::kUserInfoListFieldNumber;
const int IMUsersInfoRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMUsersInfoRsp::IMUsersInfoRsp()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBuddy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMUsersInfoRsp)
}
IMUsersInfoRsp::IMUsersInfoRsp(const IMUsersInfoRsp& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      user_info_list_(from.user_info_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMUsersInfoRsp)
}

void IMUsersInfoRsp::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  _cached_size_ = 0;
}

IMUsersInfoRsp::~IMUsersInfoRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMUsersInfoRsp)
  SharedDtor();
}

void IMUsersInfoRsp::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMUsersInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUsersInfoRsp& IMUsersInfoRsp::default_instance() {
  protobuf_IM_2eBuddy_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMUsersInfoRsp* IMUsersInfoRsp::New(::google::protobuf::Arena* arena) const {
  IMUsersInfoRsp* n = new IMUsersInfoRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMUsersInfoRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Buddy.IMUsersInfoRsp)
  user_info_list_.Clear();
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
}

bool IMUsersInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMUsersInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IM.BaseDefine.UserInfo user_info_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMUsersInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMUsersInfoRsp)
  return false;
#undef DO_
}

void IMUsersInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMUsersInfoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated .IM.BaseDefine.UserInfo user_info_list = 2;
  for (unsigned int i = 0, n = this->user_info_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->user_info_list(i), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMUsersInfoRsp)
}

size_t IMUsersInfoRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Buddy.IMUsersInfoRsp)
  size_t total_size = 0;

  // repeated .IM.BaseDefine.UserInfo user_info_list = 2;
  {
    unsigned int count = this->user_info_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info_list(i));
    }
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUsersInfoRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUsersInfoRsp*>(&from));
}

void IMUsersInfoRsp::MergeFrom(const IMUsersInfoRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Buddy.IMUsersInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_info_list_.MergeFrom(from.user_info_list_);
  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void IMUsersInfoRsp::CopyFrom(const IMUsersInfoRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Buddy.IMUsersInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUsersInfoRsp::IsInitialized() const {
  return true;
}

void IMUsersInfoRsp::Swap(IMUsersInfoRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMUsersInfoRsp::InternalSwap(IMUsersInfoRsp* other) {
  user_info_list_.InternalSwap(&other->user_info_list_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(user_id_, other->user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMUsersInfoRsp::GetTypeName() const {
  return "IM.Buddy.IMUsersInfoRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMUsersInfoRsp

// uint32 user_id = 1;
void IMUsersInfoRsp::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMUsersInfoRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersInfoRsp.user_id)
  return user_id_;
}
void IMUsersInfoRsp::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersInfoRsp.user_id)
}

// repeated .IM.BaseDefine.UserInfo user_info_list = 2;
int IMUsersInfoRsp::user_info_list_size() const {
  return user_info_list_.size();
}
void IMUsersInfoRsp::clear_user_info_list() {
  user_info_list_.Clear();
}
const ::IM::BaseDefine::UserInfo& IMUsersInfoRsp::user_info_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersInfoRsp.user_info_list)
  return user_info_list_.Get(index);
}
::IM::BaseDefine::UserInfo* IMUsersInfoRsp::mutable_user_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUsersInfoRsp.user_info_list)
  return user_info_list_.Mutable(index);
}
::IM::BaseDefine::UserInfo* IMUsersInfoRsp::add_user_info_list() {
  // @@protoc_insertion_point(field_add:IM.Buddy.IMUsersInfoRsp.user_info_list)
  return user_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserInfo >*
IMUsersInfoRsp::mutable_user_info_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMUsersInfoRsp.user_info_list)
  return &user_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserInfo >&
IMUsersInfoRsp::user_info_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMUsersInfoRsp.user_info_list)
  return user_info_list_;
}

// bytes attach_data = 20;
void IMUsersInfoRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMUsersInfoRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersInfoRsp.attach_data)
  return attach_data_.GetNoArena();
}
void IMUsersInfoRsp::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersInfoRsp.attach_data)
}
#if LANG_CXX11
void IMUsersInfoRsp::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMUsersInfoRsp.attach_data)
}
#endif
void IMUsersInfoRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMUsersInfoRsp.attach_data)
}
void IMUsersInfoRsp::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMUsersInfoRsp.attach_data)
}
::std::string* IMUsersInfoRsp::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUsersInfoRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMUsersInfoRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMUsersInfoRsp.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMUsersInfoRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMUsersInfoRsp.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMRemoveSessionReq::kUserIdFieldNumber;
const int IMRemoveSessionReq::kSessionTypeFieldNumber;
const int IMRemoveSessionReq::kSessionIdFieldNumber;
const int IMRemoveSessionReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMRemoveSessionReq::IMRemoveSessionReq()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBuddy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMRemoveSessionReq)
}
IMRemoveSessionReq::IMRemoveSessionReq(const IMRemoveSessionReq& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(session_id_));
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMRemoveSessionReq)
}

void IMRemoveSessionReq::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(session_id_));
  _cached_size_ = 0;
}

IMRemoveSessionReq::~IMRemoveSessionReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMRemoveSessionReq)
  SharedDtor();
}

void IMRemoveSessionReq::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMRemoveSessionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMRemoveSessionReq& IMRemoveSessionReq::default_instance() {
  protobuf_IM_2eBuddy_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMRemoveSessionReq* IMRemoveSessionReq::New(::google::protobuf::Arena* arena) const {
  IMRemoveSessionReq* n = new IMRemoveSessionReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMRemoveSessionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Buddy.IMRemoveSessionReq)
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(session_id_));
}

bool IMRemoveSessionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMRemoveSessionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.SessionType session_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 session_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMRemoveSessionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMRemoveSessionReq)
  return false;
#undef DO_
}

void IMRemoveSessionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMRemoveSessionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->session_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // uint32 session_id = 3;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMRemoveSessionReq)
}

size_t IMRemoveSessionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Buddy.IMRemoveSessionReq)
  size_t total_size = 0;

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
  }

  // uint32 session_id = 3;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMRemoveSessionReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMRemoveSessionReq*>(&from));
}

void IMRemoveSessionReq::MergeFrom(const IMRemoveSessionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Buddy.IMRemoveSessionReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.session_type() != 0) {
    set_session_type(from.session_type());
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
}

void IMRemoveSessionReq::CopyFrom(const IMRemoveSessionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Buddy.IMRemoveSessionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMRemoveSessionReq::IsInitialized() const {
  return true;
}

void IMRemoveSessionReq::Swap(IMRemoveSessionReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMRemoveSessionReq::InternalSwap(IMRemoveSessionReq* other) {
  attach_data_.Swap(&other->attach_data_);
  std::swap(user_id_, other->user_id_);
  std::swap(session_type_, other->session_type_);
  std::swap(session_id_, other->session_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMRemoveSessionReq::GetTypeName() const {
  return "IM.Buddy.IMRemoveSessionReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMRemoveSessionReq

// uint32 user_id = 1;
void IMRemoveSessionReq::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMRemoveSessionReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionReq.user_id)
  return user_id_;
}
void IMRemoveSessionReq::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionReq.user_id)
}

// .IM.BaseDefine.SessionType session_type = 2;
void IMRemoveSessionReq::clear_session_type() {
  session_type_ = 0;
}
::IM::BaseDefine::SessionType IMRemoveSessionReq::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionReq.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
void IMRemoveSessionReq::set_session_type(::IM::BaseDefine::SessionType value) {
  
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionReq.session_type)
}

// uint32 session_id = 3;
void IMRemoveSessionReq::clear_session_id() {
  session_id_ = 0u;
}
::google::protobuf::uint32 IMRemoveSessionReq::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionReq.session_id)
  return session_id_;
}
void IMRemoveSessionReq::set_session_id(::google::protobuf::uint32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionReq.session_id)
}

// bytes attach_data = 20;
void IMRemoveSessionReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMRemoveSessionReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionReq.attach_data)
  return attach_data_.GetNoArena();
}
void IMRemoveSessionReq::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionReq.attach_data)
}
#if LANG_CXX11
void IMRemoveSessionReq::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMRemoveSessionReq.attach_data)
}
#endif
void IMRemoveSessionReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMRemoveSessionReq.attach_data)
}
void IMRemoveSessionReq::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMRemoveSessionReq.attach_data)
}
::std::string* IMRemoveSessionReq::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMRemoveSessionReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMRemoveSessionReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMRemoveSessionReq.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMRemoveSessionReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMRemoveSessionReq.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMRemoveSessionRsp::kUserIdFieldNumber;
const int IMRemoveSessionRsp::kResultCodeFieldNumber;
const int IMRemoveSessionRsp::kSessionTypeFieldNumber;
const int IMRemoveSessionRsp::kSessionIdFieldNumber;
const int IMRemoveSessionRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMRemoveSessionRsp::IMRemoveSessionRsp()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBuddy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMRemoveSessionRsp)
}
IMRemoveSessionRsp::IMRemoveSessionRsp(const IMRemoveSessionRsp& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(session_id_));
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMRemoveSessionRsp)
}

void IMRemoveSessionRsp::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(session_id_));
  _cached_size_ = 0;
}

IMRemoveSessionRsp::~IMRemoveSessionRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMRemoveSessionRsp)
  SharedDtor();
}

void IMRemoveSessionRsp::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMRemoveSessionRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMRemoveSessionRsp& IMRemoveSessionRsp::default_instance() {
  protobuf_IM_2eBuddy_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMRemoveSessionRsp* IMRemoveSessionRsp::New(::google::protobuf::Arena* arena) const {
  IMRemoveSessionRsp* n = new IMRemoveSessionRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMRemoveSessionRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Buddy.IMRemoveSessionRsp)
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(session_id_));
}

bool IMRemoveSessionRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMRemoveSessionRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 result_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.SessionType session_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 session_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMRemoveSessionRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMRemoveSessionRsp)
  return false;
#undef DO_
}

void IMRemoveSessionRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMRemoveSessionRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // .IM.BaseDefine.SessionType session_type = 3;
  if (this->session_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->session_type(), output);
  }

  // uint32 session_id = 4;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->session_id(), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMRemoveSessionRsp)
}

size_t IMRemoveSessionRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Buddy.IMRemoveSessionRsp)
  size_t total_size = 0;

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());
  }

  // .IM.BaseDefine.SessionType session_type = 3;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
  }

  // uint32 session_id = 4;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMRemoveSessionRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMRemoveSessionRsp*>(&from));
}

void IMRemoveSessionRsp::MergeFrom(const IMRemoveSessionRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Buddy.IMRemoveSessionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.result_code() != 0) {
    set_result_code(from.result_code());
  }
  if (from.session_type() != 0) {
    set_session_type(from.session_type());
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
}

void IMRemoveSessionRsp::CopyFrom(const IMRemoveSessionRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Buddy.IMRemoveSessionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMRemoveSessionRsp::IsInitialized() const {
  return true;
}

void IMRemoveSessionRsp::Swap(IMRemoveSessionRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMRemoveSessionRsp::InternalSwap(IMRemoveSessionRsp* other) {
  attach_data_.Swap(&other->attach_data_);
  std::swap(user_id_, other->user_id_);
  std::swap(result_code_, other->result_code_);
  std::swap(session_type_, other->session_type_);
  std::swap(session_id_, other->session_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMRemoveSessionRsp::GetTypeName() const {
  return "IM.Buddy.IMRemoveSessionRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMRemoveSessionRsp

// uint32 user_id = 1;
void IMRemoveSessionRsp::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMRemoveSessionRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionRsp.user_id)
  return user_id_;
}
void IMRemoveSessionRsp::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionRsp.user_id)
}

// uint32 result_code = 2;
void IMRemoveSessionRsp::clear_result_code() {
  result_code_ = 0u;
}
::google::protobuf::uint32 IMRemoveSessionRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionRsp.result_code)
  return result_code_;
}
void IMRemoveSessionRsp::set_result_code(::google::protobuf::uint32 value) {
  
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionRsp.result_code)
}

// .IM.BaseDefine.SessionType session_type = 3;
void IMRemoveSessionRsp::clear_session_type() {
  session_type_ = 0;
}
::IM::BaseDefine::SessionType IMRemoveSessionRsp::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionRsp.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
void IMRemoveSessionRsp::set_session_type(::IM::BaseDefine::SessionType value) {
  
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionRsp.session_type)
}

// uint32 session_id = 4;
void IMRemoveSessionRsp::clear_session_id() {
  session_id_ = 0u;
}
::google::protobuf::uint32 IMRemoveSessionRsp::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionRsp.session_id)
  return session_id_;
}
void IMRemoveSessionRsp::set_session_id(::google::protobuf::uint32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionRsp.session_id)
}

// bytes attach_data = 20;
void IMRemoveSessionRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMRemoveSessionRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionRsp.attach_data)
  return attach_data_.GetNoArena();
}
void IMRemoveSessionRsp::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionRsp.attach_data)
}
#if LANG_CXX11
void IMRemoveSessionRsp::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMRemoveSessionRsp.attach_data)
}
#endif
void IMRemoveSessionRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMRemoveSessionRsp.attach_data)
}
void IMRemoveSessionRsp::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMRemoveSessionRsp.attach_data)
}
::std::string* IMRemoveSessionRsp::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMRemoveSessionRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMRemoveSessionRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMRemoveSessionRsp.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMRemoveSessionRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMRemoveSessionRsp.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMAllUserReq::kUserIdFieldNumber;
const int IMAllUserReq::kLatestUpdateTimeFieldNumber;
const int IMAllUserReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMAllUserReq::IMAllUserReq()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBuddy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMAllUserReq)
}
IMAllUserReq::IMAllUserReq(const IMAllUserReq& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&latest_update_time_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(latest_update_time_));
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMAllUserReq)
}

void IMAllUserReq::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&latest_update_time_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(latest_update_time_));
  _cached_size_ = 0;
}

IMAllUserReq::~IMAllUserReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMAllUserReq)
  SharedDtor();
}

void IMAllUserReq::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMAllUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMAllUserReq& IMAllUserReq::default_instance() {
  protobuf_IM_2eBuddy_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMAllUserReq* IMAllUserReq::New(::google::protobuf::Arena* arena) const {
  IMAllUserReq* n = new IMAllUserReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMAllUserReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Buddy.IMAllUserReq)
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&latest_update_time_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(latest_update_time_));
}

bool IMAllUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMAllUserReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 latest_update_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_update_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMAllUserReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMAllUserReq)
  return false;
#undef DO_
}

void IMAllUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMAllUserReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // uint32 latest_update_time = 2;
  if (this->latest_update_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->latest_update_time(), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMAllUserReq)
}

size_t IMAllUserReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Buddy.IMAllUserReq)
  size_t total_size = 0;

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // uint32 latest_update_time = 2;
  if (this->latest_update_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latest_update_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMAllUserReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMAllUserReq*>(&from));
}

void IMAllUserReq::MergeFrom(const IMAllUserReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Buddy.IMAllUserReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.latest_update_time() != 0) {
    set_latest_update_time(from.latest_update_time());
  }
}

void IMAllUserReq::CopyFrom(const IMAllUserReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Buddy.IMAllUserReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMAllUserReq::IsInitialized() const {
  return true;
}

void IMAllUserReq::Swap(IMAllUserReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMAllUserReq::InternalSwap(IMAllUserReq* other) {
  attach_data_.Swap(&other->attach_data_);
  std::swap(user_id_, other->user_id_);
  std::swap(latest_update_time_, other->latest_update_time_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMAllUserReq::GetTypeName() const {
  return "IM.Buddy.IMAllUserReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMAllUserReq

// uint32 user_id = 1;
void IMAllUserReq::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMAllUserReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAllUserReq.user_id)
  return user_id_;
}
void IMAllUserReq::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAllUserReq.user_id)
}

// uint32 latest_update_time = 2;
void IMAllUserReq::clear_latest_update_time() {
  latest_update_time_ = 0u;
}
::google::protobuf::uint32 IMAllUserReq::latest_update_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAllUserReq.latest_update_time)
  return latest_update_time_;
}
void IMAllUserReq::set_latest_update_time(::google::protobuf::uint32 value) {
  
  latest_update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAllUserReq.latest_update_time)
}

// bytes attach_data = 20;
void IMAllUserReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMAllUserReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAllUserReq.attach_data)
  return attach_data_.GetNoArena();
}
void IMAllUserReq::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAllUserReq.attach_data)
}
#if LANG_CXX11
void IMAllUserReq::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMAllUserReq.attach_data)
}
#endif
void IMAllUserReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMAllUserReq.attach_data)
}
void IMAllUserReq::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMAllUserReq.attach_data)
}
::std::string* IMAllUserReq::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMAllUserReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMAllUserReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMAllUserReq.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMAllUserReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMAllUserReq.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMAllUserRsp::kUserIdFieldNumber;
const int IMAllUserRsp::kLatestUpdateTimeFieldNumber;
const int IMAllUserRsp::kUserListFieldNumber;
const int IMAllUserRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMAllUserRsp::IMAllUserRsp()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBuddy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMAllUserRsp)
}
IMAllUserRsp::IMAllUserRsp(const IMAllUserRsp& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      user_list_(from.user_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&latest_update_time_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(latest_update_time_));
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMAllUserRsp)
}

void IMAllUserRsp::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&latest_update_time_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(latest_update_time_));
  _cached_size_ = 0;
}

IMAllUserRsp::~IMAllUserRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMAllUserRsp)
  SharedDtor();
}

void IMAllUserRsp::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMAllUserRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMAllUserRsp& IMAllUserRsp::default_instance() {
  protobuf_IM_2eBuddy_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMAllUserRsp* IMAllUserRsp::New(::google::protobuf::Arena* arena) const {
  IMAllUserRsp* n = new IMAllUserRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMAllUserRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Buddy.IMAllUserRsp)
  user_list_.Clear();
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&latest_update_time_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(latest_update_time_));
}

bool IMAllUserRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMAllUserRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 latest_update_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_update_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IM.BaseDefine.UserInfo user_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMAllUserRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMAllUserRsp)
  return false;
#undef DO_
}

void IMAllUserRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMAllUserRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // uint32 latest_update_time = 2;
  if (this->latest_update_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->latest_update_time(), output);
  }

  // repeated .IM.BaseDefine.UserInfo user_list = 3;
  for (unsigned int i = 0, n = this->user_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->user_list(i), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMAllUserRsp)
}

size_t IMAllUserRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Buddy.IMAllUserRsp)
  size_t total_size = 0;

  // repeated .IM.BaseDefine.UserInfo user_list = 3;
  {
    unsigned int count = this->user_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_list(i));
    }
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // uint32 latest_update_time = 2;
  if (this->latest_update_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latest_update_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMAllUserRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMAllUserRsp*>(&from));
}

void IMAllUserRsp::MergeFrom(const IMAllUserRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Buddy.IMAllUserRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_list_.MergeFrom(from.user_list_);
  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.latest_update_time() != 0) {
    set_latest_update_time(from.latest_update_time());
  }
}

void IMAllUserRsp::CopyFrom(const IMAllUserRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Buddy.IMAllUserRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMAllUserRsp::IsInitialized() const {
  return true;
}

void IMAllUserRsp::Swap(IMAllUserRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMAllUserRsp::InternalSwap(IMAllUserRsp* other) {
  user_list_.InternalSwap(&other->user_list_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(user_id_, other->user_id_);
  std::swap(latest_update_time_, other->latest_update_time_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMAllUserRsp::GetTypeName() const {
  return "IM.Buddy.IMAllUserRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMAllUserRsp

// uint32 user_id = 1;
void IMAllUserRsp::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMAllUserRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAllUserRsp.user_id)
  return user_id_;
}
void IMAllUserRsp::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAllUserRsp.user_id)
}

// uint32 latest_update_time = 2;
void IMAllUserRsp::clear_latest_update_time() {
  latest_update_time_ = 0u;
}
::google::protobuf::uint32 IMAllUserRsp::latest_update_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAllUserRsp.latest_update_time)
  return latest_update_time_;
}
void IMAllUserRsp::set_latest_update_time(::google::protobuf::uint32 value) {
  
  latest_update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAllUserRsp.latest_update_time)
}

// repeated .IM.BaseDefine.UserInfo user_list = 3;
int IMAllUserRsp::user_list_size() const {
  return user_list_.size();
}
void IMAllUserRsp::clear_user_list() {
  user_list_.Clear();
}
const ::IM::BaseDefine::UserInfo& IMAllUserRsp::user_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAllUserRsp.user_list)
  return user_list_.Get(index);
}
::IM::BaseDefine::UserInfo* IMAllUserRsp::mutable_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMAllUserRsp.user_list)
  return user_list_.Mutable(index);
}
::IM::BaseDefine::UserInfo* IMAllUserRsp::add_user_list() {
  // @@protoc_insertion_point(field_add:IM.Buddy.IMAllUserRsp.user_list)
  return user_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserInfo >*
IMAllUserRsp::mutable_user_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMAllUserRsp.user_list)
  return &user_list_;
}
const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserInfo >&
IMAllUserRsp::user_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMAllUserRsp.user_list)
  return user_list_;
}

// bytes attach_data = 20;
void IMAllUserRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMAllUserRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAllUserRsp.attach_data)
  return attach_data_.GetNoArena();
}
void IMAllUserRsp::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAllUserRsp.attach_data)
}
#if LANG_CXX11
void IMAllUserRsp::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMAllUserRsp.attach_data)
}
#endif
void IMAllUserRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMAllUserRsp.attach_data)
}
void IMAllUserRsp::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMAllUserRsp.attach_data)
}
::std::string* IMAllUserRsp::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMAllUserRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMAllUserRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMAllUserRsp.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMAllUserRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMAllUserRsp.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMUsersStatReq::kUserIdFieldNumber;
const int IMUsersStatReq::kUserIdListFieldNumber;
const int IMUsersStatReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMUsersStatReq::IMUsersStatReq()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBuddy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMUsersStatReq)
}
IMUsersStatReq::IMUsersStatReq(const IMUsersStatReq& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      user_id_list_(from.user_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMUsersStatReq)
}

void IMUsersStatReq::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  _cached_size_ = 0;
}

IMUsersStatReq::~IMUsersStatReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMUsersStatReq)
  SharedDtor();
}

void IMUsersStatReq::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMUsersStatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUsersStatReq& IMUsersStatReq::default_instance() {
  protobuf_IM_2eBuddy_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMUsersStatReq* IMUsersStatReq::New(::google::protobuf::Arena* arena) const {
  IMUsersStatReq* n = new IMUsersStatReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMUsersStatReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Buddy.IMUsersStatReq)
  user_id_list_.Clear();
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
}

bool IMUsersStatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMUsersStatReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 user_id_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_user_id_list())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_user_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMUsersStatReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMUsersStatReq)
  return false;
#undef DO_
}

void IMUsersStatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMUsersStatReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated uint32 user_id_list = 2;
  if (this->user_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_user_id_list_cached_byte_size_);
  }
  for (int i = 0, n = this->user_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->user_id_list(i), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMUsersStatReq)
}

size_t IMUsersStatReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Buddy.IMUsersStatReq)
  size_t total_size = 0;

  // repeated uint32 user_id_list = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->user_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _user_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUsersStatReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUsersStatReq*>(&from));
}

void IMUsersStatReq::MergeFrom(const IMUsersStatReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Buddy.IMUsersStatReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_id_list_.MergeFrom(from.user_id_list_);
  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void IMUsersStatReq::CopyFrom(const IMUsersStatReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Buddy.IMUsersStatReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUsersStatReq::IsInitialized() const {
  return true;
}

void IMUsersStatReq::Swap(IMUsersStatReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMUsersStatReq::InternalSwap(IMUsersStatReq* other) {
  user_id_list_.InternalSwap(&other->user_id_list_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(user_id_, other->user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMUsersStatReq::GetTypeName() const {
  return "IM.Buddy.IMUsersStatReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMUsersStatReq

// uint32 user_id = 1;
void IMUsersStatReq::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMUsersStatReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersStatReq.user_id)
  return user_id_;
}
void IMUsersStatReq::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersStatReq.user_id)
}

// repeated uint32 user_id_list = 2;
int IMUsersStatReq::user_id_list_size() const {
  return user_id_list_.size();
}
void IMUsersStatReq::clear_user_id_list() {
  user_id_list_.Clear();
}
::google::protobuf::uint32 IMUsersStatReq::user_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersStatReq.user_id_list)
  return user_id_list_.Get(index);
}
void IMUsersStatReq::set_user_id_list(int index, ::google::protobuf::uint32 value) {
  user_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersStatReq.user_id_list)
}
void IMUsersStatReq::add_user_id_list(::google::protobuf::uint32 value) {
  user_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Buddy.IMUsersStatReq.user_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMUsersStatReq::user_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMUsersStatReq.user_id_list)
  return user_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMUsersStatReq::mutable_user_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMUsersStatReq.user_id_list)
  return &user_id_list_;
}

// bytes attach_data = 20;
void IMUsersStatReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMUsersStatReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersStatReq.attach_data)
  return attach_data_.GetNoArena();
}
void IMUsersStatReq::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersStatReq.attach_data)
}
#if LANG_CXX11
void IMUsersStatReq::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMUsersStatReq.attach_data)
}
#endif
void IMUsersStatReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMUsersStatReq.attach_data)
}
void IMUsersStatReq::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMUsersStatReq.attach_data)
}
::std::string* IMUsersStatReq::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUsersStatReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMUsersStatReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMUsersStatReq.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMUsersStatReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMUsersStatReq.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMUsersStatRsp::kUserIdFieldNumber;
const int IMUsersStatRsp::kUserStatListFieldNumber;
const int IMUsersStatRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMUsersStatRsp::IMUsersStatRsp()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBuddy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMUsersStatRsp)
}
IMUsersStatRsp::IMUsersStatRsp(const IMUsersStatRsp& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      user_stat_list_(from.user_stat_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMUsersStatRsp)
}

void IMUsersStatRsp::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  _cached_size_ = 0;
}

IMUsersStatRsp::~IMUsersStatRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMUsersStatRsp)
  SharedDtor();
}

void IMUsersStatRsp::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMUsersStatRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUsersStatRsp& IMUsersStatRsp::default_instance() {
  protobuf_IM_2eBuddy_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMUsersStatRsp* IMUsersStatRsp::New(::google::protobuf::Arena* arena) const {
  IMUsersStatRsp* n = new IMUsersStatRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMUsersStatRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Buddy.IMUsersStatRsp)
  user_stat_list_.Clear();
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
}

bool IMUsersStatRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMUsersStatRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IM.BaseDefine.UserStat user_stat_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_stat_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMUsersStatRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMUsersStatRsp)
  return false;
#undef DO_
}

void IMUsersStatRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMUsersStatRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated .IM.BaseDefine.UserStat user_stat_list = 2;
  for (unsigned int i = 0, n = this->user_stat_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->user_stat_list(i), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMUsersStatRsp)
}

size_t IMUsersStatRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Buddy.IMUsersStatRsp)
  size_t total_size = 0;

  // repeated .IM.BaseDefine.UserStat user_stat_list = 2;
  {
    unsigned int count = this->user_stat_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_stat_list(i));
    }
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUsersStatRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUsersStatRsp*>(&from));
}

void IMUsersStatRsp::MergeFrom(const IMUsersStatRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Buddy.IMUsersStatRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_stat_list_.MergeFrom(from.user_stat_list_);
  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void IMUsersStatRsp::CopyFrom(const IMUsersStatRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Buddy.IMUsersStatRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUsersStatRsp::IsInitialized() const {
  return true;
}

void IMUsersStatRsp::Swap(IMUsersStatRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMUsersStatRsp::InternalSwap(IMUsersStatRsp* other) {
  user_stat_list_.InternalSwap(&other->user_stat_list_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(user_id_, other->user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMUsersStatRsp::GetTypeName() const {
  return "IM.Buddy.IMUsersStatRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMUsersStatRsp

// uint32 user_id = 1;
void IMUsersStatRsp::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMUsersStatRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersStatRsp.user_id)
  return user_id_;
}
void IMUsersStatRsp::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersStatRsp.user_id)
}

// repeated .IM.BaseDefine.UserStat user_stat_list = 2;
int IMUsersStatRsp::user_stat_list_size() const {
  return user_stat_list_.size();
}
void IMUsersStatRsp::clear_user_stat_list() {
  user_stat_list_.Clear();
}
const ::IM::BaseDefine::UserStat& IMUsersStatRsp::user_stat_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersStatRsp.user_stat_list)
  return user_stat_list_.Get(index);
}
::IM::BaseDefine::UserStat* IMUsersStatRsp::mutable_user_stat_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUsersStatRsp.user_stat_list)
  return user_stat_list_.Mutable(index);
}
::IM::BaseDefine::UserStat* IMUsersStatRsp::add_user_stat_list() {
  // @@protoc_insertion_point(field_add:IM.Buddy.IMUsersStatRsp.user_stat_list)
  return user_stat_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserStat >*
IMUsersStatRsp::mutable_user_stat_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMUsersStatRsp.user_stat_list)
  return &user_stat_list_;
}
const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserStat >&
IMUsersStatRsp::user_stat_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMUsersStatRsp.user_stat_list)
  return user_stat_list_;
}

// bytes attach_data = 20;
void IMUsersStatRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMUsersStatRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersStatRsp.attach_data)
  return attach_data_.GetNoArena();
}
void IMUsersStatRsp::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersStatRsp.attach_data)
}
#if LANG_CXX11
void IMUsersStatRsp::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMUsersStatRsp.attach_data)
}
#endif
void IMUsersStatRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMUsersStatRsp.attach_data)
}
void IMUsersStatRsp::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMUsersStatRsp.attach_data)
}
::std::string* IMUsersStatRsp::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUsersStatRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMUsersStatRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMUsersStatRsp.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMUsersStatRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMUsersStatRsp.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMChangeAvatarReq::kUserIdFieldNumber;
const int IMChangeAvatarReq::kAvatarUrlFieldNumber;
const int IMChangeAvatarReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMChangeAvatarReq::IMChangeAvatarReq()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBuddy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMChangeAvatarReq)
}
IMChangeAvatarReq::IMChangeAvatarReq(const IMChangeAvatarReq& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  avatar_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.avatar_url().size() > 0) {
    avatar_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMChangeAvatarReq)
}

void IMChangeAvatarReq::SharedCtor() {
  avatar_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  _cached_size_ = 0;
}

IMChangeAvatarReq::~IMChangeAvatarReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMChangeAvatarReq)
  SharedDtor();
}

void IMChangeAvatarReq::SharedDtor() {
  avatar_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMChangeAvatarReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMChangeAvatarReq& IMChangeAvatarReq::default_instance() {
  protobuf_IM_2eBuddy_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMChangeAvatarReq* IMChangeAvatarReq::New(::google::protobuf::Arena* arena) const {
  IMChangeAvatarReq* n = new IMChangeAvatarReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMChangeAvatarReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Buddy.IMChangeAvatarReq)
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
}

bool IMChangeAvatarReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMChangeAvatarReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string avatar_url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->avatar_url().data(), this->avatar_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Buddy.IMChangeAvatarReq.avatar_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMChangeAvatarReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMChangeAvatarReq)
  return false;
#undef DO_
}

void IMChangeAvatarReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMChangeAvatarReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // string avatar_url = 2;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Buddy.IMChangeAvatarReq.avatar_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->avatar_url(), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMChangeAvatarReq)
}

size_t IMChangeAvatarReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Buddy.IMChangeAvatarReq)
  size_t total_size = 0;

  // string avatar_url = 2;
  if (this->avatar_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->avatar_url());
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMChangeAvatarReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMChangeAvatarReq*>(&from));
}

void IMChangeAvatarReq::MergeFrom(const IMChangeAvatarReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Buddy.IMChangeAvatarReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.avatar_url().size() > 0) {

    avatar_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void IMChangeAvatarReq::CopyFrom(const IMChangeAvatarReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Buddy.IMChangeAvatarReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMChangeAvatarReq::IsInitialized() const {
  return true;
}

void IMChangeAvatarReq::Swap(IMChangeAvatarReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMChangeAvatarReq::InternalSwap(IMChangeAvatarReq* other) {
  avatar_url_.Swap(&other->avatar_url_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(user_id_, other->user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMChangeAvatarReq::GetTypeName() const {
  return "IM.Buddy.IMChangeAvatarReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMChangeAvatarReq

// uint32 user_id = 1;
void IMChangeAvatarReq::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMChangeAvatarReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeAvatarReq.user_id)
  return user_id_;
}
void IMChangeAvatarReq::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeAvatarReq.user_id)
}

// string avatar_url = 2;
void IMChangeAvatarReq::clear_avatar_url() {
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMChangeAvatarReq::avatar_url() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeAvatarReq.avatar_url)
  return avatar_url_.GetNoArena();
}
void IMChangeAvatarReq::set_avatar_url(const ::std::string& value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeAvatarReq.avatar_url)
}
#if LANG_CXX11
void IMChangeAvatarReq::set_avatar_url(::std::string&& value) {
  
  avatar_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMChangeAvatarReq.avatar_url)
}
#endif
void IMChangeAvatarReq::set_avatar_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChangeAvatarReq.avatar_url)
}
void IMChangeAvatarReq::set_avatar_url(const char* value, size_t size) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChangeAvatarReq.avatar_url)
}
::std::string* IMChangeAvatarReq::mutable_avatar_url() {
  
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChangeAvatarReq.avatar_url)
  return avatar_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMChangeAvatarReq::release_avatar_url() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMChangeAvatarReq.avatar_url)
  
  return avatar_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMChangeAvatarReq::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url != NULL) {
    
  } else {
    
  }
  avatar_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar_url);
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChangeAvatarReq.avatar_url)
}

// bytes attach_data = 20;
void IMChangeAvatarReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMChangeAvatarReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeAvatarReq.attach_data)
  return attach_data_.GetNoArena();
}
void IMChangeAvatarReq::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeAvatarReq.attach_data)
}
#if LANG_CXX11
void IMChangeAvatarReq::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMChangeAvatarReq.attach_data)
}
#endif
void IMChangeAvatarReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChangeAvatarReq.attach_data)
}
void IMChangeAvatarReq::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChangeAvatarReq.attach_data)
}
::std::string* IMChangeAvatarReq::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChangeAvatarReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMChangeAvatarReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMChangeAvatarReq.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMChangeAvatarReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChangeAvatarReq.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMChangeAvatarRsp::kUserIdFieldNumber;
const int IMChangeAvatarRsp::kResultCodeFieldNumber;
const int IMChangeAvatarRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMChangeAvatarRsp::IMChangeAvatarRsp()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBuddy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMChangeAvatarRsp)
}
IMChangeAvatarRsp::IMChangeAvatarRsp(const IMChangeAvatarRsp& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(result_code_));
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMChangeAvatarRsp)
}

void IMChangeAvatarRsp::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(result_code_));
  _cached_size_ = 0;
}

IMChangeAvatarRsp::~IMChangeAvatarRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMChangeAvatarRsp)
  SharedDtor();
}

void IMChangeAvatarRsp::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMChangeAvatarRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMChangeAvatarRsp& IMChangeAvatarRsp::default_instance() {
  protobuf_IM_2eBuddy_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMChangeAvatarRsp* IMChangeAvatarRsp::New(::google::protobuf::Arena* arena) const {
  IMChangeAvatarRsp* n = new IMChangeAvatarRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMChangeAvatarRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Buddy.IMChangeAvatarRsp)
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(result_code_));
}

bool IMChangeAvatarRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMChangeAvatarRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 result_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMChangeAvatarRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMChangeAvatarRsp)
  return false;
#undef DO_
}

void IMChangeAvatarRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMChangeAvatarRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMChangeAvatarRsp)
}

size_t IMChangeAvatarRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Buddy.IMChangeAvatarRsp)
  size_t total_size = 0;

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMChangeAvatarRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMChangeAvatarRsp*>(&from));
}

void IMChangeAvatarRsp::MergeFrom(const IMChangeAvatarRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Buddy.IMChangeAvatarRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.result_code() != 0) {
    set_result_code(from.result_code());
  }
}

void IMChangeAvatarRsp::CopyFrom(const IMChangeAvatarRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Buddy.IMChangeAvatarRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMChangeAvatarRsp::IsInitialized() const {
  return true;
}

void IMChangeAvatarRsp::Swap(IMChangeAvatarRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMChangeAvatarRsp::InternalSwap(IMChangeAvatarRsp* other) {
  attach_data_.Swap(&other->attach_data_);
  std::swap(user_id_, other->user_id_);
  std::swap(result_code_, other->result_code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMChangeAvatarRsp::GetTypeName() const {
  return "IM.Buddy.IMChangeAvatarRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMChangeAvatarRsp

// uint32 user_id = 1;
void IMChangeAvatarRsp::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMChangeAvatarRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeAvatarRsp.user_id)
  return user_id_;
}
void IMChangeAvatarRsp::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeAvatarRsp.user_id)
}

// uint32 result_code = 2;
void IMChangeAvatarRsp::clear_result_code() {
  result_code_ = 0u;
}
::google::protobuf::uint32 IMChangeAvatarRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeAvatarRsp.result_code)
  return result_code_;
}
void IMChangeAvatarRsp::set_result_code(::google::protobuf::uint32 value) {
  
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeAvatarRsp.result_code)
}

// bytes attach_data = 20;
void IMChangeAvatarRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMChangeAvatarRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeAvatarRsp.attach_data)
  return attach_data_.GetNoArena();
}
void IMChangeAvatarRsp::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeAvatarRsp.attach_data)
}
#if LANG_CXX11
void IMChangeAvatarRsp::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMChangeAvatarRsp.attach_data)
}
#endif
void IMChangeAvatarRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChangeAvatarRsp.attach_data)
}
void IMChangeAvatarRsp::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChangeAvatarRsp.attach_data)
}
::std::string* IMChangeAvatarRsp::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChangeAvatarRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMChangeAvatarRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMChangeAvatarRsp.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMChangeAvatarRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChangeAvatarRsp.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMPCLoginStatusNotify::kUserIdFieldNumber;
const int IMPCLoginStatusNotify::kLoginStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMPCLoginStatusNotify::IMPCLoginStatusNotify()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBuddy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMPCLoginStatusNotify)
}
IMPCLoginStatusNotify::IMPCLoginStatusNotify(const IMPCLoginStatusNotify& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&login_stat_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(login_stat_));
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMPCLoginStatusNotify)
}

void IMPCLoginStatusNotify::SharedCtor() {
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&login_stat_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(login_stat_));
  _cached_size_ = 0;
}

IMPCLoginStatusNotify::~IMPCLoginStatusNotify() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMPCLoginStatusNotify)
  SharedDtor();
}

void IMPCLoginStatusNotify::SharedDtor() {
}

void IMPCLoginStatusNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMPCLoginStatusNotify& IMPCLoginStatusNotify::default_instance() {
  protobuf_IM_2eBuddy_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMPCLoginStatusNotify* IMPCLoginStatusNotify::New(::google::protobuf::Arena* arena) const {
  IMPCLoginStatusNotify* n = new IMPCLoginStatusNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMPCLoginStatusNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Buddy.IMPCLoginStatusNotify)
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&login_stat_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(login_stat_));
}

bool IMPCLoginStatusNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMPCLoginStatusNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.UserStatType login_stat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_login_stat(static_cast< ::IM::BaseDefine::UserStatType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMPCLoginStatusNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMPCLoginStatusNotify)
  return false;
#undef DO_
}

void IMPCLoginStatusNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMPCLoginStatusNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // .IM.BaseDefine.UserStatType login_stat = 2;
  if (this->login_stat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->login_stat(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMPCLoginStatusNotify)
}

size_t IMPCLoginStatusNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Buddy.IMPCLoginStatusNotify)
  size_t total_size = 0;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // .IM.BaseDefine.UserStatType login_stat = 2;
  if (this->login_stat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->login_stat());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMPCLoginStatusNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMPCLoginStatusNotify*>(&from));
}

void IMPCLoginStatusNotify::MergeFrom(const IMPCLoginStatusNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Buddy.IMPCLoginStatusNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.login_stat() != 0) {
    set_login_stat(from.login_stat());
  }
}

void IMPCLoginStatusNotify::CopyFrom(const IMPCLoginStatusNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Buddy.IMPCLoginStatusNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMPCLoginStatusNotify::IsInitialized() const {
  return true;
}

void IMPCLoginStatusNotify::Swap(IMPCLoginStatusNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMPCLoginStatusNotify::InternalSwap(IMPCLoginStatusNotify* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(login_stat_, other->login_stat_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMPCLoginStatusNotify::GetTypeName() const {
  return "IM.Buddy.IMPCLoginStatusNotify";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMPCLoginStatusNotify

// uint32 user_id = 1;
void IMPCLoginStatusNotify::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMPCLoginStatusNotify::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMPCLoginStatusNotify.user_id)
  return user_id_;
}
void IMPCLoginStatusNotify::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMPCLoginStatusNotify.user_id)
}

// .IM.BaseDefine.UserStatType login_stat = 2;
void IMPCLoginStatusNotify::clear_login_stat() {
  login_stat_ = 0;
}
::IM::BaseDefine::UserStatType IMPCLoginStatusNotify::login_stat() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMPCLoginStatusNotify.login_stat)
  return static_cast< ::IM::BaseDefine::UserStatType >(login_stat_);
}
void IMPCLoginStatusNotify::set_login_stat(::IM::BaseDefine::UserStatType value) {
  
  login_stat_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMPCLoginStatusNotify.login_stat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMRemoveSessionNotify::kUserIdFieldNumber;
const int IMRemoveSessionNotify::kSessionTypeFieldNumber;
const int IMRemoveSessionNotify::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMRemoveSessionNotify::IMRemoveSessionNotify()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBuddy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMRemoveSessionNotify)
}
IMRemoveSessionNotify::IMRemoveSessionNotify(const IMRemoveSessionNotify& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(session_id_));
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMRemoveSessionNotify)
}

void IMRemoveSessionNotify::SharedCtor() {
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(session_id_));
  _cached_size_ = 0;
}

IMRemoveSessionNotify::~IMRemoveSessionNotify() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMRemoveSessionNotify)
  SharedDtor();
}

void IMRemoveSessionNotify::SharedDtor() {
}

void IMRemoveSessionNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMRemoveSessionNotify& IMRemoveSessionNotify::default_instance() {
  protobuf_IM_2eBuddy_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMRemoveSessionNotify* IMRemoveSessionNotify::New(::google::protobuf::Arena* arena) const {
  IMRemoveSessionNotify* n = new IMRemoveSessionNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMRemoveSessionNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Buddy.IMRemoveSessionNotify)
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(session_id_));
}

bool IMRemoveSessionNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMRemoveSessionNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.SessionType session_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 session_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMRemoveSessionNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMRemoveSessionNotify)
  return false;
#undef DO_
}

void IMRemoveSessionNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMRemoveSessionNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->session_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // uint32 session_id = 3;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMRemoveSessionNotify)
}

size_t IMRemoveSessionNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Buddy.IMRemoveSessionNotify)
  size_t total_size = 0;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
  }

  // uint32 session_id = 3;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMRemoveSessionNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMRemoveSessionNotify*>(&from));
}

void IMRemoveSessionNotify::MergeFrom(const IMRemoveSessionNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Buddy.IMRemoveSessionNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.session_type() != 0) {
    set_session_type(from.session_type());
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
}

void IMRemoveSessionNotify::CopyFrom(const IMRemoveSessionNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Buddy.IMRemoveSessionNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMRemoveSessionNotify::IsInitialized() const {
  return true;
}

void IMRemoveSessionNotify::Swap(IMRemoveSessionNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMRemoveSessionNotify::InternalSwap(IMRemoveSessionNotify* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(session_type_, other->session_type_);
  std::swap(session_id_, other->session_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMRemoveSessionNotify::GetTypeName() const {
  return "IM.Buddy.IMRemoveSessionNotify";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMRemoveSessionNotify

// uint32 user_id = 1;
void IMRemoveSessionNotify::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMRemoveSessionNotify::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionNotify.user_id)
  return user_id_;
}
void IMRemoveSessionNotify::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionNotify.user_id)
}

// .IM.BaseDefine.SessionType session_type = 2;
void IMRemoveSessionNotify::clear_session_type() {
  session_type_ = 0;
}
::IM::BaseDefine::SessionType IMRemoveSessionNotify::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionNotify.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
void IMRemoveSessionNotify::set_session_type(::IM::BaseDefine::SessionType value) {
  
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionNotify.session_type)
}

// uint32 session_id = 3;
void IMRemoveSessionNotify::clear_session_id() {
  session_id_ = 0u;
}
::google::protobuf::uint32 IMRemoveSessionNotify::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionNotify.session_id)
  return session_id_;
}
void IMRemoveSessionNotify::set_session_id(::google::protobuf::uint32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionNotify.session_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMDepartmentReq::kUserIdFieldNumber;
const int IMDepartmentReq::kLatestUpdateTimeFieldNumber;
const int IMDepartmentReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMDepartmentReq::IMDepartmentReq()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBuddy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMDepartmentReq)
}
IMDepartmentReq::IMDepartmentReq(const IMDepartmentReq& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&latest_update_time_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(latest_update_time_));
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMDepartmentReq)
}

void IMDepartmentReq::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&latest_update_time_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(latest_update_time_));
  _cached_size_ = 0;
}

IMDepartmentReq::~IMDepartmentReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMDepartmentReq)
  SharedDtor();
}

void IMDepartmentReq::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMDepartmentReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMDepartmentReq& IMDepartmentReq::default_instance() {
  protobuf_IM_2eBuddy_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMDepartmentReq* IMDepartmentReq::New(::google::protobuf::Arena* arena) const {
  IMDepartmentReq* n = new IMDepartmentReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMDepartmentReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Buddy.IMDepartmentReq)
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&latest_update_time_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(latest_update_time_));
}

bool IMDepartmentReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMDepartmentReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 latest_update_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_update_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMDepartmentReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMDepartmentReq)
  return false;
#undef DO_
}

void IMDepartmentReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMDepartmentReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // uint32 latest_update_time = 2;
  if (this->latest_update_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->latest_update_time(), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMDepartmentReq)
}

size_t IMDepartmentReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Buddy.IMDepartmentReq)
  size_t total_size = 0;

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // uint32 latest_update_time = 2;
  if (this->latest_update_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latest_update_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMDepartmentReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMDepartmentReq*>(&from));
}

void IMDepartmentReq::MergeFrom(const IMDepartmentReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Buddy.IMDepartmentReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.latest_update_time() != 0) {
    set_latest_update_time(from.latest_update_time());
  }
}

void IMDepartmentReq::CopyFrom(const IMDepartmentReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Buddy.IMDepartmentReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMDepartmentReq::IsInitialized() const {
  return true;
}

void IMDepartmentReq::Swap(IMDepartmentReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMDepartmentReq::InternalSwap(IMDepartmentReq* other) {
  attach_data_.Swap(&other->attach_data_);
  std::swap(user_id_, other->user_id_);
  std::swap(latest_update_time_, other->latest_update_time_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMDepartmentReq::GetTypeName() const {
  return "IM.Buddy.IMDepartmentReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMDepartmentReq

// uint32 user_id = 1;
void IMDepartmentReq::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMDepartmentReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDepartmentReq.user_id)
  return user_id_;
}
void IMDepartmentReq::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDepartmentReq.user_id)
}

// uint32 latest_update_time = 2;
void IMDepartmentReq::clear_latest_update_time() {
  latest_update_time_ = 0u;
}
::google::protobuf::uint32 IMDepartmentReq::latest_update_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDepartmentReq.latest_update_time)
  return latest_update_time_;
}
void IMDepartmentReq::set_latest_update_time(::google::protobuf::uint32 value) {
  
  latest_update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDepartmentReq.latest_update_time)
}

// bytes attach_data = 20;
void IMDepartmentReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMDepartmentReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDepartmentReq.attach_data)
  return attach_data_.GetNoArena();
}
void IMDepartmentReq::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDepartmentReq.attach_data)
}
#if LANG_CXX11
void IMDepartmentReq::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMDepartmentReq.attach_data)
}
#endif
void IMDepartmentReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMDepartmentReq.attach_data)
}
void IMDepartmentReq::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMDepartmentReq.attach_data)
}
::std::string* IMDepartmentReq::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMDepartmentReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMDepartmentReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMDepartmentReq.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMDepartmentReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMDepartmentReq.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMDepartmentRsp::kUserIdFieldNumber;
const int IMDepartmentRsp::kLatestUpdateTimeFieldNumber;
const int IMDepartmentRsp::kDeptListFieldNumber;
const int IMDepartmentRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMDepartmentRsp::IMDepartmentRsp()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBuddy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMDepartmentRsp)
}
IMDepartmentRsp::IMDepartmentRsp(const IMDepartmentRsp& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      dept_list_(from.dept_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&latest_update_time_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(latest_update_time_));
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMDepartmentRsp)
}

void IMDepartmentRsp::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&latest_update_time_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(latest_update_time_));
  _cached_size_ = 0;
}

IMDepartmentRsp::~IMDepartmentRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMDepartmentRsp)
  SharedDtor();
}

void IMDepartmentRsp::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMDepartmentRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMDepartmentRsp& IMDepartmentRsp::default_instance() {
  protobuf_IM_2eBuddy_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMDepartmentRsp* IMDepartmentRsp::New(::google::protobuf::Arena* arena) const {
  IMDepartmentRsp* n = new IMDepartmentRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMDepartmentRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Buddy.IMDepartmentRsp)
  dept_list_.Clear();
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&latest_update_time_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(latest_update_time_));
}

bool IMDepartmentRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMDepartmentRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 latest_update_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_update_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IM.BaseDefine.DepartInfo dept_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dept_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMDepartmentRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMDepartmentRsp)
  return false;
#undef DO_
}

void IMDepartmentRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMDepartmentRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // uint32 latest_update_time = 2;
  if (this->latest_update_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->latest_update_time(), output);
  }

  // repeated .IM.BaseDefine.DepartInfo dept_list = 3;
  for (unsigned int i = 0, n = this->dept_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->dept_list(i), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMDepartmentRsp)
}

size_t IMDepartmentRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Buddy.IMDepartmentRsp)
  size_t total_size = 0;

  // repeated .IM.BaseDefine.DepartInfo dept_list = 3;
  {
    unsigned int count = this->dept_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dept_list(i));
    }
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // uint32 latest_update_time = 2;
  if (this->latest_update_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latest_update_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMDepartmentRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMDepartmentRsp*>(&from));
}

void IMDepartmentRsp::MergeFrom(const IMDepartmentRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Buddy.IMDepartmentRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dept_list_.MergeFrom(from.dept_list_);
  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.latest_update_time() != 0) {
    set_latest_update_time(from.latest_update_time());
  }
}

void IMDepartmentRsp::CopyFrom(const IMDepartmentRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Buddy.IMDepartmentRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMDepartmentRsp::IsInitialized() const {
  return true;
}

void IMDepartmentRsp::Swap(IMDepartmentRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMDepartmentRsp::InternalSwap(IMDepartmentRsp* other) {
  dept_list_.InternalSwap(&other->dept_list_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(user_id_, other->user_id_);
  std::swap(latest_update_time_, other->latest_update_time_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMDepartmentRsp::GetTypeName() const {
  return "IM.Buddy.IMDepartmentRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMDepartmentRsp

// uint32 user_id = 1;
void IMDepartmentRsp::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMDepartmentRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDepartmentRsp.user_id)
  return user_id_;
}
void IMDepartmentRsp::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDepartmentRsp.user_id)
}

// uint32 latest_update_time = 2;
void IMDepartmentRsp::clear_latest_update_time() {
  latest_update_time_ = 0u;
}
::google::protobuf::uint32 IMDepartmentRsp::latest_update_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDepartmentRsp.latest_update_time)
  return latest_update_time_;
}
void IMDepartmentRsp::set_latest_update_time(::google::protobuf::uint32 value) {
  
  latest_update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDepartmentRsp.latest_update_time)
}

// repeated .IM.BaseDefine.DepartInfo dept_list = 3;
int IMDepartmentRsp::dept_list_size() const {
  return dept_list_.size();
}
void IMDepartmentRsp::clear_dept_list() {
  dept_list_.Clear();
}
const ::IM::BaseDefine::DepartInfo& IMDepartmentRsp::dept_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDepartmentRsp.dept_list)
  return dept_list_.Get(index);
}
::IM::BaseDefine::DepartInfo* IMDepartmentRsp::mutable_dept_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMDepartmentRsp.dept_list)
  return dept_list_.Mutable(index);
}
::IM::BaseDefine::DepartInfo* IMDepartmentRsp::add_dept_list() {
  // @@protoc_insertion_point(field_add:IM.Buddy.IMDepartmentRsp.dept_list)
  return dept_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::DepartInfo >*
IMDepartmentRsp::mutable_dept_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMDepartmentRsp.dept_list)
  return &dept_list_;
}
const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::DepartInfo >&
IMDepartmentRsp::dept_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMDepartmentRsp.dept_list)
  return dept_list_;
}

// bytes attach_data = 20;
void IMDepartmentRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMDepartmentRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDepartmentRsp.attach_data)
  return attach_data_.GetNoArena();
}
void IMDepartmentRsp::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDepartmentRsp.attach_data)
}
#if LANG_CXX11
void IMDepartmentRsp::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMDepartmentRsp.attach_data)
}
#endif
void IMDepartmentRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMDepartmentRsp.attach_data)
}
void IMDepartmentRsp::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMDepartmentRsp.attach_data)
}
::std::string* IMDepartmentRsp::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMDepartmentRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMDepartmentRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMDepartmentRsp.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMDepartmentRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMDepartmentRsp.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMAvatarChangedNotify::kChangedUserIdFieldNumber;
const int IMAvatarChangedNotify::kAvatarUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMAvatarChangedNotify::IMAvatarChangedNotify()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBuddy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMAvatarChangedNotify)
}
IMAvatarChangedNotify::IMAvatarChangedNotify(const IMAvatarChangedNotify& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  avatar_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.avatar_url().size() > 0) {
    avatar_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  changed_user_id_ = from.changed_user_id_;
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMAvatarChangedNotify)
}

void IMAvatarChangedNotify::SharedCtor() {
  avatar_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  changed_user_id_ = 0u;
  _cached_size_ = 0;
}

IMAvatarChangedNotify::~IMAvatarChangedNotify() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMAvatarChangedNotify)
  SharedDtor();
}

void IMAvatarChangedNotify::SharedDtor() {
  avatar_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMAvatarChangedNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMAvatarChangedNotify& IMAvatarChangedNotify::default_instance() {
  protobuf_IM_2eBuddy_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMAvatarChangedNotify* IMAvatarChangedNotify::New(::google::protobuf::Arena* arena) const {
  IMAvatarChangedNotify* n = new IMAvatarChangedNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMAvatarChangedNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Buddy.IMAvatarChangedNotify)
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  changed_user_id_ = 0u;
}

bool IMAvatarChangedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMAvatarChangedNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 changed_user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &changed_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string avatar_url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->avatar_url().data(), this->avatar_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Buddy.IMAvatarChangedNotify.avatar_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMAvatarChangedNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMAvatarChangedNotify)
  return false;
#undef DO_
}

void IMAvatarChangedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMAvatarChangedNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 changed_user_id = 1;
  if (this->changed_user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->changed_user_id(), output);
  }

  // string avatar_url = 2;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Buddy.IMAvatarChangedNotify.avatar_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->avatar_url(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMAvatarChangedNotify)
}

size_t IMAvatarChangedNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Buddy.IMAvatarChangedNotify)
  size_t total_size = 0;

  // string avatar_url = 2;
  if (this->avatar_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->avatar_url());
  }

  // uint32 changed_user_id = 1;
  if (this->changed_user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->changed_user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMAvatarChangedNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMAvatarChangedNotify*>(&from));
}

void IMAvatarChangedNotify::MergeFrom(const IMAvatarChangedNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Buddy.IMAvatarChangedNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.avatar_url().size() > 0) {

    avatar_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  if (from.changed_user_id() != 0) {
    set_changed_user_id(from.changed_user_id());
  }
}

void IMAvatarChangedNotify::CopyFrom(const IMAvatarChangedNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Buddy.IMAvatarChangedNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMAvatarChangedNotify::IsInitialized() const {
  return true;
}

void IMAvatarChangedNotify::Swap(IMAvatarChangedNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMAvatarChangedNotify::InternalSwap(IMAvatarChangedNotify* other) {
  avatar_url_.Swap(&other->avatar_url_);
  std::swap(changed_user_id_, other->changed_user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMAvatarChangedNotify::GetTypeName() const {
  return "IM.Buddy.IMAvatarChangedNotify";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMAvatarChangedNotify

// uint32 changed_user_id = 1;
void IMAvatarChangedNotify::clear_changed_user_id() {
  changed_user_id_ = 0u;
}
::google::protobuf::uint32 IMAvatarChangedNotify::changed_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAvatarChangedNotify.changed_user_id)
  return changed_user_id_;
}
void IMAvatarChangedNotify::set_changed_user_id(::google::protobuf::uint32 value) {
  
  changed_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAvatarChangedNotify.changed_user_id)
}

// string avatar_url = 2;
void IMAvatarChangedNotify::clear_avatar_url() {
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMAvatarChangedNotify::avatar_url() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAvatarChangedNotify.avatar_url)
  return avatar_url_.GetNoArena();
}
void IMAvatarChangedNotify::set_avatar_url(const ::std::string& value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAvatarChangedNotify.avatar_url)
}
#if LANG_CXX11
void IMAvatarChangedNotify::set_avatar_url(::std::string&& value) {
  
  avatar_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMAvatarChangedNotify.avatar_url)
}
#endif
void IMAvatarChangedNotify::set_avatar_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMAvatarChangedNotify.avatar_url)
}
void IMAvatarChangedNotify::set_avatar_url(const char* value, size_t size) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMAvatarChangedNotify.avatar_url)
}
::std::string* IMAvatarChangedNotify::mutable_avatar_url() {
  
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMAvatarChangedNotify.avatar_url)
  return avatar_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMAvatarChangedNotify::release_avatar_url() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMAvatarChangedNotify.avatar_url)
  
  return avatar_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMAvatarChangedNotify::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url != NULL) {
    
  } else {
    
  }
  avatar_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar_url);
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMAvatarChangedNotify.avatar_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMChangeSignInfoReq::kUserIdFieldNumber;
const int IMChangeSignInfoReq::kSignInfoFieldNumber;
const int IMChangeSignInfoReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMChangeSignInfoReq::IMChangeSignInfoReq()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBuddy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMChangeSignInfoReq)
}
IMChangeSignInfoReq::IMChangeSignInfoReq(const IMChangeSignInfoReq& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sign_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sign_info().size() > 0) {
    sign_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_info_);
  }
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMChangeSignInfoReq)
}

void IMChangeSignInfoReq::SharedCtor() {
  sign_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  _cached_size_ = 0;
}

IMChangeSignInfoReq::~IMChangeSignInfoReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMChangeSignInfoReq)
  SharedDtor();
}

void IMChangeSignInfoReq::SharedDtor() {
  sign_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMChangeSignInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMChangeSignInfoReq& IMChangeSignInfoReq::default_instance() {
  protobuf_IM_2eBuddy_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMChangeSignInfoReq* IMChangeSignInfoReq::New(::google::protobuf::Arena* arena) const {
  IMChangeSignInfoReq* n = new IMChangeSignInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMChangeSignInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Buddy.IMChangeSignInfoReq)
  sign_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
}

bool IMChangeSignInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMChangeSignInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sign_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sign_info().data(), this->sign_info().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Buddy.IMChangeSignInfoReq.sign_info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMChangeSignInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMChangeSignInfoReq)
  return false;
#undef DO_
}

void IMChangeSignInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMChangeSignInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // string sign_info = 2;
  if (this->sign_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sign_info().data(), this->sign_info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Buddy.IMChangeSignInfoReq.sign_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sign_info(), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMChangeSignInfoReq)
}

size_t IMChangeSignInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Buddy.IMChangeSignInfoReq)
  size_t total_size = 0;

  // string sign_info = 2;
  if (this->sign_info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sign_info());
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMChangeSignInfoReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMChangeSignInfoReq*>(&from));
}

void IMChangeSignInfoReq::MergeFrom(const IMChangeSignInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Buddy.IMChangeSignInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sign_info().size() > 0) {

    sign_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_info_);
  }
  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void IMChangeSignInfoReq::CopyFrom(const IMChangeSignInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Buddy.IMChangeSignInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMChangeSignInfoReq::IsInitialized() const {
  return true;
}

void IMChangeSignInfoReq::Swap(IMChangeSignInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMChangeSignInfoReq::InternalSwap(IMChangeSignInfoReq* other) {
  sign_info_.Swap(&other->sign_info_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(user_id_, other->user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMChangeSignInfoReq::GetTypeName() const {
  return "IM.Buddy.IMChangeSignInfoReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMChangeSignInfoReq

// uint32 user_id = 1;
void IMChangeSignInfoReq::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMChangeSignInfoReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeSignInfoReq.user_id)
  return user_id_;
}
void IMChangeSignInfoReq::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeSignInfoReq.user_id)
}

// string sign_info = 2;
void IMChangeSignInfoReq::clear_sign_info() {
  sign_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMChangeSignInfoReq::sign_info() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeSignInfoReq.sign_info)
  return sign_info_.GetNoArena();
}
void IMChangeSignInfoReq::set_sign_info(const ::std::string& value) {
  
  sign_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeSignInfoReq.sign_info)
}
#if LANG_CXX11
void IMChangeSignInfoReq::set_sign_info(::std::string&& value) {
  
  sign_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMChangeSignInfoReq.sign_info)
}
#endif
void IMChangeSignInfoReq::set_sign_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sign_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChangeSignInfoReq.sign_info)
}
void IMChangeSignInfoReq::set_sign_info(const char* value, size_t size) {
  
  sign_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChangeSignInfoReq.sign_info)
}
::std::string* IMChangeSignInfoReq::mutable_sign_info() {
  
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChangeSignInfoReq.sign_info)
  return sign_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMChangeSignInfoReq::release_sign_info() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMChangeSignInfoReq.sign_info)
  
  return sign_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMChangeSignInfoReq::set_allocated_sign_info(::std::string* sign_info) {
  if (sign_info != NULL) {
    
  } else {
    
  }
  sign_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign_info);
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChangeSignInfoReq.sign_info)
}

// bytes attach_data = 20;
void IMChangeSignInfoReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMChangeSignInfoReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeSignInfoReq.attach_data)
  return attach_data_.GetNoArena();
}
void IMChangeSignInfoReq::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeSignInfoReq.attach_data)
}
#if LANG_CXX11
void IMChangeSignInfoReq::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMChangeSignInfoReq.attach_data)
}
#endif
void IMChangeSignInfoReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChangeSignInfoReq.attach_data)
}
void IMChangeSignInfoReq::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChangeSignInfoReq.attach_data)
}
::std::string* IMChangeSignInfoReq::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChangeSignInfoReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMChangeSignInfoReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMChangeSignInfoReq.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMChangeSignInfoReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChangeSignInfoReq.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMChangeSignInfoRsp::kUserIdFieldNumber;
const int IMChangeSignInfoRsp::kResultCodeFieldNumber;
const int IMChangeSignInfoRsp::kSignInfoFieldNumber;
const int IMChangeSignInfoRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMChangeSignInfoRsp::IMChangeSignInfoRsp()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBuddy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMChangeSignInfoRsp)
}
IMChangeSignInfoRsp::IMChangeSignInfoRsp(const IMChangeSignInfoRsp& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sign_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sign_info().size() > 0) {
    sign_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_info_);
  }
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(result_code_));
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMChangeSignInfoRsp)
}

void IMChangeSignInfoRsp::SharedCtor() {
  sign_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(result_code_));
  _cached_size_ = 0;
}

IMChangeSignInfoRsp::~IMChangeSignInfoRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMChangeSignInfoRsp)
  SharedDtor();
}

void IMChangeSignInfoRsp::SharedDtor() {
  sign_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMChangeSignInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMChangeSignInfoRsp& IMChangeSignInfoRsp::default_instance() {
  protobuf_IM_2eBuddy_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMChangeSignInfoRsp* IMChangeSignInfoRsp::New(::google::protobuf::Arena* arena) const {
  IMChangeSignInfoRsp* n = new IMChangeSignInfoRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMChangeSignInfoRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Buddy.IMChangeSignInfoRsp)
  sign_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&user_id_) + sizeof(result_code_));
}

bool IMChangeSignInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMChangeSignInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 result_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sign_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sign_info().data(), this->sign_info().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Buddy.IMChangeSignInfoRsp.sign_info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMChangeSignInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMChangeSignInfoRsp)
  return false;
#undef DO_
}

void IMChangeSignInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMChangeSignInfoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // string sign_info = 3;
  if (this->sign_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sign_info().data(), this->sign_info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Buddy.IMChangeSignInfoRsp.sign_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sign_info(), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMChangeSignInfoRsp)
}

size_t IMChangeSignInfoRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Buddy.IMChangeSignInfoRsp)
  size_t total_size = 0;

  // string sign_info = 3;
  if (this->sign_info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sign_info());
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMChangeSignInfoRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMChangeSignInfoRsp*>(&from));
}

void IMChangeSignInfoRsp::MergeFrom(const IMChangeSignInfoRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Buddy.IMChangeSignInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sign_info().size() > 0) {

    sign_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_info_);
  }
  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.result_code() != 0) {
    set_result_code(from.result_code());
  }
}

void IMChangeSignInfoRsp::CopyFrom(const IMChangeSignInfoRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Buddy.IMChangeSignInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMChangeSignInfoRsp::IsInitialized() const {
  return true;
}

void IMChangeSignInfoRsp::Swap(IMChangeSignInfoRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMChangeSignInfoRsp::InternalSwap(IMChangeSignInfoRsp* other) {
  sign_info_.Swap(&other->sign_info_);
  attach_data_.Swap(&other->attach_data_);
  std::swap(user_id_, other->user_id_);
  std::swap(result_code_, other->result_code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMChangeSignInfoRsp::GetTypeName() const {
  return "IM.Buddy.IMChangeSignInfoRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMChangeSignInfoRsp

// uint32 user_id = 1;
void IMChangeSignInfoRsp::clear_user_id() {
  user_id_ = 0u;
}
::google::protobuf::uint32 IMChangeSignInfoRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeSignInfoRsp.user_id)
  return user_id_;
}
void IMChangeSignInfoRsp::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeSignInfoRsp.user_id)
}

// uint32 result_code = 2;
void IMChangeSignInfoRsp::clear_result_code() {
  result_code_ = 0u;
}
::google::protobuf::uint32 IMChangeSignInfoRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeSignInfoRsp.result_code)
  return result_code_;
}
void IMChangeSignInfoRsp::set_result_code(::google::protobuf::uint32 value) {
  
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeSignInfoRsp.result_code)
}

// string sign_info = 3;
void IMChangeSignInfoRsp::clear_sign_info() {
  sign_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMChangeSignInfoRsp::sign_info() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeSignInfoRsp.sign_info)
  return sign_info_.GetNoArena();
}
void IMChangeSignInfoRsp::set_sign_info(const ::std::string& value) {
  
  sign_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeSignInfoRsp.sign_info)
}
#if LANG_CXX11
void IMChangeSignInfoRsp::set_sign_info(::std::string&& value) {
  
  sign_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMChangeSignInfoRsp.sign_info)
}
#endif
void IMChangeSignInfoRsp::set_sign_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sign_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChangeSignInfoRsp.sign_info)
}
void IMChangeSignInfoRsp::set_sign_info(const char* value, size_t size) {
  
  sign_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChangeSignInfoRsp.sign_info)
}
::std::string* IMChangeSignInfoRsp::mutable_sign_info() {
  
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChangeSignInfoRsp.sign_info)
  return sign_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMChangeSignInfoRsp::release_sign_info() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMChangeSignInfoRsp.sign_info)
  
  return sign_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMChangeSignInfoRsp::set_allocated_sign_info(::std::string* sign_info) {
  if (sign_info != NULL) {
    
  } else {
    
  }
  sign_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign_info);
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChangeSignInfoRsp.sign_info)
}

// bytes attach_data = 20;
void IMChangeSignInfoRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMChangeSignInfoRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeSignInfoRsp.attach_data)
  return attach_data_.GetNoArena();
}
void IMChangeSignInfoRsp::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeSignInfoRsp.attach_data)
}
#if LANG_CXX11
void IMChangeSignInfoRsp::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMChangeSignInfoRsp.attach_data)
}
#endif
void IMChangeSignInfoRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChangeSignInfoRsp.attach_data)
}
void IMChangeSignInfoRsp::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChangeSignInfoRsp.attach_data)
}
::std::string* IMChangeSignInfoRsp::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChangeSignInfoRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMChangeSignInfoRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMChangeSignInfoRsp.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMChangeSignInfoRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChangeSignInfoRsp.attach_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMSignInfoChangedNotify::kChangedUserIdFieldNumber;
const int IMSignInfoChangedNotify::kSignInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMSignInfoChangedNotify::IMSignInfoChangedNotify()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IM_2eBuddy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMSignInfoChangedNotify)
}
IMSignInfoChangedNotify::IMSignInfoChangedNotify(const IMSignInfoChangedNotify& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sign_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sign_info().size() > 0) {
    sign_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_info_);
  }
  changed_user_id_ = from.changed_user_id_;
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMSignInfoChangedNotify)
}

void IMSignInfoChangedNotify::SharedCtor() {
  sign_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  changed_user_id_ = 0u;
  _cached_size_ = 0;
}

IMSignInfoChangedNotify::~IMSignInfoChangedNotify() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMSignInfoChangedNotify)
  SharedDtor();
}

void IMSignInfoChangedNotify::SharedDtor() {
  sign_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMSignInfoChangedNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMSignInfoChangedNotify& IMSignInfoChangedNotify::default_instance() {
  protobuf_IM_2eBuddy_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMSignInfoChangedNotify* IMSignInfoChangedNotify::New(::google::protobuf::Arena* arena) const {
  IMSignInfoChangedNotify* n = new IMSignInfoChangedNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMSignInfoChangedNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Buddy.IMSignInfoChangedNotify)
  sign_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  changed_user_id_ = 0u;
}

bool IMSignInfoChangedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMSignInfoChangedNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 changed_user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &changed_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sign_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sign_info().data(), this->sign_info().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Buddy.IMSignInfoChangedNotify.sign_info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMSignInfoChangedNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMSignInfoChangedNotify)
  return false;
#undef DO_
}

void IMSignInfoChangedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMSignInfoChangedNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 changed_user_id = 1;
  if (this->changed_user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->changed_user_id(), output);
  }

  // string sign_info = 2;
  if (this->sign_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sign_info().data(), this->sign_info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Buddy.IMSignInfoChangedNotify.sign_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sign_info(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMSignInfoChangedNotify)
}

size_t IMSignInfoChangedNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Buddy.IMSignInfoChangedNotify)
  size_t total_size = 0;

  // string sign_info = 2;
  if (this->sign_info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sign_info());
  }

  // uint32 changed_user_id = 1;
  if (this->changed_user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->changed_user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMSignInfoChangedNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMSignInfoChangedNotify*>(&from));
}

void IMSignInfoChangedNotify::MergeFrom(const IMSignInfoChangedNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Buddy.IMSignInfoChangedNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sign_info().size() > 0) {

    sign_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_info_);
  }
  if (from.changed_user_id() != 0) {
    set_changed_user_id(from.changed_user_id());
  }
}

void IMSignInfoChangedNotify::CopyFrom(const IMSignInfoChangedNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Buddy.IMSignInfoChangedNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMSignInfoChangedNotify::IsInitialized() const {
  return true;
}

void IMSignInfoChangedNotify::Swap(IMSignInfoChangedNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMSignInfoChangedNotify::InternalSwap(IMSignInfoChangedNotify* other) {
  sign_info_.Swap(&other->sign_info_);
  std::swap(changed_user_id_, other->changed_user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string IMSignInfoChangedNotify::GetTypeName() const {
  return "IM.Buddy.IMSignInfoChangedNotify";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMSignInfoChangedNotify

// uint32 changed_user_id = 1;
void IMSignInfoChangedNotify::clear_changed_user_id() {
  changed_user_id_ = 0u;
}
::google::protobuf::uint32 IMSignInfoChangedNotify::changed_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMSignInfoChangedNotify.changed_user_id)
  return changed_user_id_;
}
void IMSignInfoChangedNotify::set_changed_user_id(::google::protobuf::uint32 value) {
  
  changed_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Buddy.IMSignInfoChangedNotify.changed_user_id)
}

// string sign_info = 2;
void IMSignInfoChangedNotify::clear_sign_info() {
  sign_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IMSignInfoChangedNotify::sign_info() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMSignInfoChangedNotify.sign_info)
  return sign_info_.GetNoArena();
}
void IMSignInfoChangedNotify::set_sign_info(const ::std::string& value) {
  
  sign_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMSignInfoChangedNotify.sign_info)
}
#if LANG_CXX11
void IMSignInfoChangedNotify::set_sign_info(::std::string&& value) {
  
  sign_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMSignInfoChangedNotify.sign_info)
}
#endif
void IMSignInfoChangedNotify::set_sign_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sign_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMSignInfoChangedNotify.sign_info)
}
void IMSignInfoChangedNotify::set_sign_info(const char* value, size_t size) {
  
  sign_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMSignInfoChangedNotify.sign_info)
}
::std::string* IMSignInfoChangedNotify::mutable_sign_info() {
  
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMSignInfoChangedNotify.sign_info)
  return sign_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IMSignInfoChangedNotify::release_sign_info() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMSignInfoChangedNotify.sign_info)
  
  return sign_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IMSignInfoChangedNotify::set_allocated_sign_info(::std::string* sign_info) {
  if (sign_info != NULL) {
    
  } else {
    
  }
  sign_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign_info);
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMSignInfoChangedNotify.sign_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Buddy
}  // namespace IM

// @@protoc_insertion_point(global_scope)
